{
  "Name": "Microsoft.CompilerErrors",
  "Rules": [
    {
      "Code": "CS0001",
      "Title": "Internal compiler error",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0001",
      "Description": "Try to determine whether the compiler is failing because of its inability to parse unexpected syntax. If you receive this error repeatedly, please contact Microsoft."
    },
    {
      "Code": "CS0003",
      "Title": "Out of memory",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0003",
      "Description": "The compiler was unable to allocate enough virtual memory to complete compilation. Close all unnecessary applications and compile again."
    },
    {
      "Code": "CS0004",
      "Title": "Warning treated as error",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0004",
      "Description": "You compiled with the /warnaserror compiler option, which causes the compiler to generate warnings as errors."
    },
    {
      "Code": "CS0005",
      "Title": "Compiler option 'compiler_option' must be followed by an argument",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0005",
      "Description": "Some compiler options require parameters. If you do not pass the arguments required by the compiler option, CS0005 is generated."
    },
    {
      "Code": "CS0006",
      "Title": "Metadata file 'dll_name' could not be found",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0006",
      "Description": "The program was compiled and explicitly passed the name of a file that contained metadata; however, the .dll was not found. For more information, see References (C# Compiler Options)."
    },
    {
      "Code": "CS0007",
      "Title": "Unexpected common language runtime initialization error — 'description'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0007",
      "Description": "This error occurs if the runtime could not be loaded. This could occur if the version of the common language runtime that the compiler attempts to load is not present on the machine, or if the common language runtime installation or configuration is corrupt."
    },
    {
      "Code": "CS0008",
      "Title": "Unexpected error reading metadata from file 'file' — 'description'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0008",
      "Description": "A DLL was successfully opened for retrieving metadata but is corrupted, such that data could not be read from it. For more information, see References (C# Compiler Options)."
    },
    {
      "Code": "CS0009",
      "Title": "Metadata file 'file' could not be opened — 'description'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0009",
      "Description": "The file specified with the References compiler option does not contain valid metadata."
    },
    {
      "Code": "CS0010",
      "Title": "Unexpected fatal error -- 'error'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0010",
      "Description": "This error is generated when something completely unexpected occurs to stop compilation."
    },
    {
      "Code": "CS0011",
      "Title": "The base class or interface 'class' in assembly 'assembly' referenced by type 'type' could not be resolved",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0011",
      "Description": "A class that was imported from a file with /reference, is derived from a class or implements an interface that is not found. This can occur if a required DLL is not also included in the compilation with /reference."
    },
    {
      "Code": "CS0012",
      "Title": "The type 'type' is defined in an assembly that is not referenced. You must add a reference to assembly 'assembly'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0012",
      "Description": "The definition for a referenced type was not found. This could occur if a required .DLL file is not included in the compilation. For more information, see Add Reference Dialog Box and References (C# Compiler Options)."
    },
    {
      "Code": "CS0013",
      "Title": "Unexpected error writing metadata to file 'ModelStore.dll' -- 'No logical space left to create more user strings.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0013",
      "Description": "The .NET runtime did not emit metadata. Check to make sure that the path is correct and that the disk is not full. If the problem persists, you may have to repair or reinstall Visual Studio and/or .NET."
    },
    {
      "Code": "CS0014",
      "Title": "Required file 'file' could not be found",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0014",
      "Description": "A file is needed by the compiler but is not on the system. Make sure that the path is correct. If the file is a Visual Studio system file, then you may need to repair your installation or else remove and reinstall Visual Studio completely."
    },
    {
      "Code": "CS0015",
      "Title": "The name of type 'type' is too long",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0015",
      "Description": "The fully qualified name of a user-defined type must have fewer than 1024 characters, including the periods."
    },
    {
      "Code": "CS0016",
      "Title": "Could not write to output file 'file' — 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0016",
      "Description": "The compiler could not write to an output file. Check the path to the file to make sure it exists. If a previously built file is already at the location, make sure it is writeable, and that no process currently has a lock on the file. For example, make sure your executable is not running when you attempt to build."
    },
    {
      "Code": "CS0017",
      "Title": "Program 'output file name' has more than one entry point defined. Compile with /main to specify the type that contains the entry point.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0017",
      "Description": "A program can only have one Main method."
    },
    {
      "Code": "CS0019",
      "Title": "Operator 'operator' cannot be applied to operands of type 'type' and 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0019",
      "Description": "A binary operator is applied to data types that do not support it. For example, you cannot use the || operator on strings, you cannot use +, -, &lt;, or &gt; operators on bool variables, and you cannot use the == operator with a struct type unless the type explicitly overloads that operator."
    },
    {
      "Code": "CS0020",
      "Title": "Division by constant zero",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0020",
      "Description": "An expression uses a literal (not variable) value of zero in the denominator of a division operation. Division by zero is not defined, and is therefore invalid."
    },
    {
      "Code": "CS0021",
      "Title": "Cannot apply indexing with [] to an expression of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0021",
      "Description": "An attempt was made to access a value through an indexer on a data type that does not support Indexers."
    },
    {
      "Code": "CS0022",
      "Title": "Wrong number of indices inside [], expected 'number'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0022",
      "Description": "An array-access operation specified the incorrect number of dimensions within the square brackets. For more information, see Arrays."
    },
    {
      "Code": "CS0023",
      "Title": "Operator 'operator' cannot be applied to operand of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0023",
      "Description": "An attempt was made to apply an operator to a variable whose type was not designed to work with the operator. For more information, see Types and C# Operators."
    },
    {
      "Code": "CS0025",
      "Title": "Standard library file 'file' could not be found",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0025",
      "Description": "A file that is needed by the compiler was not found. Check that the path is correct and that the file exists."
    },
    {
      "Code": "CS0026",
      "Title": "Keyword 'this' is not valid in a static property, static method, or static field initializer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0026",
      "Description": "The this keyword refers to an object, which is an instance of a type. Since static methods are independent of any instance of the containing class, the &quot;this&quot; keyword is meaningless and is therefore not allowed. For more information, see Static Classes and Static Class Members and Objects."
    },
    {
      "Code": "CS0027",
      "Title": "Keyword 'this' is not available in the current context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0027",
      "Description": "The this keyword was found outside of a property, method, or constructor."
    },
    {
      "Code": "CS0029",
      "Title": "Cannot implicitly convert type 'type' to 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0029",
      "Description": "The compiler requires an explicit conversion. For example, you may need to cast an r-value to be the same type as an l-value. Or, you must provide conversion routines to support certain operator overloads."
    },
    {
      "Code": "CS0030",
      "Title": "Cannot convert type 'type' to 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0030",
      "Description": "There is no predefined conversion between types. You can define a custom conversion between those types. For more information, see User-defined conversion operators."
    },
    {
      "Code": "CS0031",
      "Title": "Constant value 'value' cannot be converted to a 'type'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0031",
      "Description": "An attempt was made to assign a value to a variable whose type cannot store the value. For more information, see Types."
    },
    {
      "Code": "CS0034",
      "Title": "Operator 'operator' is ambiguous on operands of type 'type1' and 'type2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0034",
      "Description": "An operator was used on two objects and the compiler found more than one conversion. Because conversions have to be unique, you either have to make a cast or to make one of the conversions explicit. For more information, see User-defined conversion operators."
    },
    {
      "Code": "CS0035",
      "Title": "Operator 'operator' is ambiguous on an operand of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0035",
      "Description": "The compiler has more than one available conversion and does not know which to choose before applying the operator."
    },
    {
      "Code": "CS0036",
      "Title": "An out parameter cannot have the '[In]' attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0036",
      "Description": "Currently, the In attribute is not permitted on an out parameter."
    },
    {
      "Code": "CS0037",
      "Title": "Cannot convert null to 'type' because it is a non-nullable value type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0037",
      "Description": "The compiler cannot assign null to a value type; null can only be assigned to a reference type or to a nullable value type. struct is a value type."
    },
    {
      "Code": "CS0038",
      "Title": "Cannot access a nonstatic member of outer type 'type1' via nested type 'type2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0038",
      "Description": "A field in a class is not automatically available to a nested class. To be available to a nested class, the field must be static. Otherwise, you must create an instance of the outer class. For more information, see Nested Types."
    },
    {
      "Code": "CS0039",
      "Title": "Cannot convert type 'type1' to 'type2' via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0039",
      "Description": "A conversion with the as operator is allowed by inheritance, reference conversions, and boxing conversions."
    },
    {
      "Code": "CS0040",
      "Title": "Unexpected error creating debug information file — 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0040",
      "Description": "This error can occur when using the DebugType compiler option and indicates that the compiler was unable to write to the .pdb file. Possible resolutions to this error include reinstalling Visual Studio, ensuring that the compiler has write access to a file or directory, or not compiling with /debug."
    },
    {
      "Code": "CS0041",
      "Title": "Unexpected error writing debug information -- '{error}'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0041",
      "Description": ""
    },
    {
      "Code": "CS0042",
      "Title": "Unexpected error creating debug information file 'file' — 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0042",
      "Description": "The compiler could not create the debug information; reason contains additional information on the error condition."
    },
    {
      "Code": "CS0043",
      "Title": "PDB file 'file' has an incorrect or out-of-date format. Delete it and rebuild.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0043",
      "Description": "Delete the .pdb file for this compilation and recompile."
    },
    {
      "Code": "CS0050",
      "Title": "Inconsistent accessibility: return type 'type' is less accessible than method 'method'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0050",
      "Description": "The return type and each of the types referenced in the formal parameter list of a method must be at least as accessible as the method itself. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0051",
      "Title": "Inconsistent accessibility: parameter type 'type' is less accessible than method 'method'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0051",
      "Description": "The return type and each of the types referenced in the formal parameter list of a method must be at least as accessible as the method itself. Make sure the types used in method signatures are not accidentally private due to the omission of the public modifier. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0052",
      "Title": "Inconsistent accessibility: field type 'type' is less accessible than field 'field'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0052",
      "Description": "The type of a field cannot be less accessible than the field itself because all public constructs must return a publicly accessible object."
    },
    {
      "Code": "CS0053",
      "Title": "Inconsistent accessibility: property type 'type' is less accessible than property 'property'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0053",
      "Description": "A public construct must return a publicly accessible object. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0054",
      "Title": "Inconsistent accessibility: indexer return type 'type' is less accessible than indexer 'indexer'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0054",
      "Description": "A public construct must return a publicly accessible object. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0055",
      "Title": "Inconsistent accessibility: parameter type 'type' is less accessible than indexer 'indexer'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0055",
      "Description": "A public construct must return a publicly accessible object. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0056",
      "Title": "Inconsistent accessibility: return type 'type' is less accessible than operator 'operator'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0056",
      "Description": "A public construct must return a publicly accessible object. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0057",
      "Title": "Inconsistent accessibility: parameter type 'type' is less accessible than operator 'operator'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0057",
      "Description": "A public construct must return a publicly accessible object. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0058",
      "Title": "Inconsistent accessibility: return type 'type' is less accessible than delegate 'delegate'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0058",
      "Description": "A public construct must return a publicly accessible object. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0059",
      "Title": "Inconsistent accessibility: parameter type 'type' is less accessible than delegate 'delegate'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0059",
      "Description": "The return type and each of the types referenced in the formal parameter list of a method must be at least as accessible as the method itself. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0060",
      "Title": "Inconsistent accessibility: base class 'class1' is less accessible than class 'class2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0060",
      "Description": "Class accessibility should be consistent between the base class and inherited class."
    },
    {
      "Code": "CS0061",
      "Title": "Inconsistent accessibility: base interface 'interface 1' is less accessible than interface 'interface 2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0061",
      "Description": "A public construct must return a publicly accessible object."
    },
    {
      "Code": "CS0065",
      "Title": "'event' : event property must have both add and remove accessors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0065",
      "Description": "An event that is not a field must have both access methods."
    },
    {
      "Code": "CS0066",
      "Title": "'event': event must be of a delegate type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0066",
      "Description": "The event keyword requires a delegate type. For more information, see Events and Delegates."
    },
    {
      "Code": "CS0068",
      "Title": "'event': event in interface cannot have initializer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0068",
      "Description": "An event in an interface cannot have an initializer. For more information, see Interfaces."
    },
    {
      "Code": "CS0069",
      "Title": "An event in an interface cannot have add or remove accessors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0069",
      "Description": "You cannot define an event's accessor functions in an interface. For more information, see Events and Interfaces."
    },
    {
      "Code": "CS0070",
      "Title": "The event 'event' can only appear on the left hand side of += or -= (except when used from within the type 'type')",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0070",
      "Description": "Outside of the class it is defined in, an event can only add or subtract references. For more information, see Events."
    },
    {
      "Code": "CS0071",
      "Title": "An explicit interface implementation of an event must use event accessor syntax",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0071",
      "Description": "When explicitly implementing an event that was declared in an interface, you must manually provide the add and remove event accessors that are typically provided by the compiler. The accessor code can connect the interface event to another event in your class (shown later in this topic) or to its own delegate type. For more information, see How to implement interface events."
    },
    {
      "Code": "CS0072",
      "Title": "'event' : cannot override; 'method' is not an event",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0072",
      "Description": "An event can only override another event. For more information, see Events."
    },
    {
      "Code": "CS0073",
      "Title": "An add or remove accessor must have a body",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0073",
      "Description": "An add or remove keyword in an event definition must have a body. For more information, see Events."
    },
    {
      "Code": "CS0074",
      "Title": "'event': abstract event cannot have initializer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0074",
      "Description": "If an event is marked as abstract, it cannot be initialized. For more information, see Events."
    },
    {
      "Code": "CS0075",
      "Title": "To cast a negative value, you must enclose the value in parentheses",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0075",
      "Description": "If you are casting using a keyword that identifies a predefined type, then you do not need parentheses. Otherwise, you must put the parentheses because (x) –y will not be considered a cast expression. From the C# Specification, Section 7.6.6:"
    },
    {
      "Code": "CS0076",
      "Title": "The enumerator name 'value__' is reserved and cannot be used",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0076",
      "Description": "An item in an enumeration cannot have an identifier called value__."
    },
    {
      "Code": "CS0077",
      "Title": "The as operator must be used with a reference type or nullable type ('int' is a non-nullable value type).",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0077",
      "Description": "The as operator was passed a value type. Because as can return null, it can only be passed a reference type or a nullable value type."
    },
    {
      "Code": "CS0079",
      "Title": "The event 'event' can only appear on the left hand side of += or -=",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0079",
      "Description": "An event was called incorrectly. For more information, see Events and Delegates."
    },
    {
      "Code": "CS0080",
      "Title": "Constraints are not allowed on non-generic declarations",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0080",
      "Description": "The syntax found may only be used in a generic declaration to apply constraints to the type parameter. For more information, see Generics."
    },
    {
      "Code": "CS0081",
      "Title": "Type parameter declaration must be an identifier not a type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0081",
      "Description": "When you declare a generic method or type, specify the type parameter as an identifier, for example &quot;T&quot; or &quot;inputType&quot;. When client code calls the method, it supplies the type, which replaces each occurrence of the identifier in the method or class body. For more information, see Generic Type Parameters."
    },
    {
      "Code": "CS0082",
      "Title": "Type 'type' already reserves a member called 'name' with the same parameter types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0082",
      "Description": "Properties at compile time are translated to methods with get_ and/or set_ in front of the identifier. If you define your own method that conflicts with the method name, an error is generated."
    },
    {
      "Code": "CS0100",
      "Title": "The parameter name 'parameter name' is a duplicate",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0100",
      "Description": "A method declaration used the same parameter name more than once. Parameter names must be unique in a method declaration. For more information, see Methods."
    },
    {
      "Code": "CS0101",
      "Title": "The namespace 'namespace' already contains a definition for 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0101",
      "Description": "A namespace has duplicate identifiers. Rename or delete one of the duplicate identifiers. For more information, see Namespaces"
    },
    {
      "Code": "CS0102",
      "Title": "The type 'type name' already contains a definition for 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0102",
      "Description": "A class contains multiple declarations for identifiers with the same name at the same scope. To fix the error, rename the duplicate identifiers."
    },
    {
      "Code": "CS0103",
      "Title": "The name 'identifier' does not exist in the current context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0103",
      "Description": "An attempt was made to use a name that does not exist in the class, namespace, or scope. Check the spelling of the name and check your using directives and assembly references to make sure that the name that you are trying to use is available."
    },
    {
      "Code": "CS0104",
      "Title": "'reference' is an ambiguous reference between 'identifier' and 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0104",
      "Description": "Your program contains using directives for two namespaces and your code references a name that appears in both namespaces."
    },
    {
      "Code": "CS0106",
      "Title": "The modifier 'modifier' is not valid for this item",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0106",
      "Description": "A class or interface member was marked with an invalid access modifier. The following examples describe some of these invalid modifiers:"
    },
    {
      "Code": "CS0107",
      "Title": "More than one protection modifier",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0107",
      "Description": "Only one access modifier (public, private, protected, or internal) is allowed on a class member, with the exception of protected internal and private protected."
    },
    {
      "Code": "CS0110",
      "Title": "The evaluation of the constant value for 'const declaration' involves a circular definition",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0110",
      "Description": "The declaration of a const variable (a) cannot reference another const variable (b) that also references (a)."
    },
    {
      "Code": "CS0111",
      "Title": "Type 'class' already defines a member called 'member' with the same parameter types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0111",
      "Description": "CS0111 occurs if a class contains two member declarations with the same name and parameter types. For more information, see Methods."
    },
    {
      "Code": "CS0112",
      "Title": "A static member 'function' cannot be marked as override, virtual or abstract",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0112",
      "Description": "Any method declaration that uses the override, virtual, or abstract keyword cannot also use the static keyword."
    },
    {
      "Code": "CS0113",
      "Title": "A member 'function' marked as override cannot be marked as new or virtual",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0113",
      "Description": "It is mutually exclusive to mark a method with the new and override keywords."
    },
    {
      "Code": "CS0115",
      "Title": "'function' : no suitable method found to override",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0115",
      "Description": "A method was marked as an override, but the compiler found no method to override. For more information, see override, and Knowing When to Use Override and New Keywords."
    },
    {
      "Code": "CS0116",
      "Title": "A namespace cannot directly contain members such as fields or methods.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0116",
      "Description": "A namespace can contain other namespaces, structs, and classes. For more information, see the namespace keyword article."
    },
    {
      "Code": "CS0117",
      "Title": "'type' does not contain a definition for 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0117",
      "Description": "The following sample generates CS0117:"
    },
    {
      "Code": "CS0118",
      "Title": "'construct1_name' is a 'construct1' but is used like a 'construct2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0118",
      "Description": "The compiler detected a situation in which a construct was used in some erroneous way or a disallowed operation was tried on a construct. Some common examples include the following:"
    },
    {
      "Code": "CS0119",
      "Title": "'construct1_name' is a 'construct1', which is not valid in the given context.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0119",
      "Description": "The compiler detected an unexpected construct such as the following:"
    },
    {
      "Code": "CS0120",
      "Title": "An object reference is required for the nonstatic field, method, or property 'member'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0120",
      "Description": "In order to use a non-static field, method, or property, you must first create an object instance. For more information about static methods, see Static Classes and Static Class Members. For more information about creating instances of classes, see Instance Constructors."
    },
    {
      "Code": "CS0121",
      "Title": "The call is ambiguous between the following methods or properties: 'method1' and 'method2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0121",
      "Description": "Due to implicit conversion, the compiler was not able to call one form of an overloaded method. You can resolve this error in one of the following ways:"
    },
    {
      "Code": "CS0122",
      "Title": "'member' is inaccessible due to its protection level",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0122",
      "Description": "The access modifier for a class member prevents accessing the member. For more information, see Access Modifiers."
    },
    {
      "Code": "CS0123",
      "Title": "No overload for 'method' matches delegate 'delegate'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0123",
      "Description": "An attempt to create a delegate failed because the correct signature was not used. Instances of a delegate must be declared with the same signature as the delegate declaration."
    },
    {
      "Code": "CS0126",
      "Title": "An object of a type convertible to 'type' is required",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0126",
      "Description": "A return statement is present, but the statement does not return a value of the expected type. For more information, see Properties."
    },
    {
      "Code": "CS0127",
      "Title": "Since 'function' returns void, a return keyword must not be followed by an object expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0127",
      "Description": "A method with a void return type cannot return a value. For more information, see Methods."
    },
    {
      "Code": "CS0128",
      "Title": "A local variable named 'variable' is already defined in this scope",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0128",
      "Description": "The compiler detected declarations of two local variables with the same name. For more information, see Methods."
    },
    {
      "Code": "CS0131",
      "Title": "The left-hand side of an assignment must be a variable, property or indexer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0131",
      "Description": "In an assignment statement, the value of the right-hand side is assigned to the left-hand side. The left-hand side must be a variable, property, or indexer."
    },
    {
      "Code": "CS0132",
      "Title": "'constructor' : a static constructor must be parameterless",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0132",
      "Description": "A static constructor cannot be declared with one or more parameters. For more information, see Constructors."
    },
    {
      "Code": "CS0133",
      "Title": "The expression being assigned to 'variable' must be constant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0133",
      "Description": "A const variable cannot take as its value an expression that is not constant. For more information, see Constants."
    },
    {
      "Code": "CS0134",
      "Title": "'variable' is of type 'type'. A const field of a reference type other than string can only be initialized with null.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0134",
      "Description": "A constant-expression is an expression that can be fully evaluated at compile-time. Because the only way to create a non-null value of a reference-type is to apply the new operator, and because the new operator is not permitted in a constant-expression, the only possible value for constants of reference-types other than string is null."
    },
    {
      "Code": "CS0135",
      "Title": "'declaration1' conflicts with the declaration 'declaration2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0135",
      "Description": "The compiler does not allow hiding names, which commonly leads to logic errors in your code."
    },
    {
      "Code": "CS0136",
      "Title": "A local variable named 'var' cannot be declared in this scope because it would give a different meaning to 'var', which is already used in a 'parent or current/child' scope to denote something else",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0136",
      "Description": "A variable declaration hides another declaration that would otherwise be in scope. Rename the variable that is declared on the line that generated CS0136."
    },
    {
      "Code": "CS0138",
      "Title": "A using namespace directive can only be applied to namespaces; 'type' is a type not a namespace",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0138",
      "Description": "A using directive can only take the name of a namespace as a parameter. For more information, see Namespaces."
    },
    {
      "Code": "CS0139",
      "Title": "No enclosing loop out of which to break or continue",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0139",
      "Description": "A break or continue statement was encountered outside of a loop."
    },
    {
      "Code": "CS0140",
      "Title": "The label 'label' is a duplicate",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0140",
      "Description": "A label with the same name appeared twice. For more information, see goto."
    },
    {
      "Code": "CS0143",
      "Title": "The type 'class' has no constructors defined",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0143",
      "Description": "There is no appropriate constructor available. This is the case for built-in numeric value types, which are initialized simply by assigning a value to them."
    },
    {
      "Code": "CS0144",
      "Title": "Cannot create an instance of the abstract class or interface 'interface'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0144",
      "Description": "You cannot create an instance of an abstract class or an interface. For more information, see Interfaces."
    },
    {
      "Code": "CS0145",
      "Title": "A const field requires a value to be provided",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0145",
      "Description": "You must initialize a const variable. For more information, see Constants."
    },
    {
      "Code": "CS0146",
      "Title": "Circular base class dependency involving 'class1' and 'class2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0146",
      "Description": "The inheritance list for a class includes a direct or indirect reference to itself. A class cannot inherit from itself. For more information, see Inheritance."
    },
    {
      "Code": "CS0148",
      "Title": "The delegate 'delegate' does not have a valid constructor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0148",
      "Description": "You imported and used a managed program (one that uses the .NET runtime) that was created with another compiler. That compiler allowed an ill-formed delegate constructor. For more information, see Delegates."
    },
    {
      "Code": "CS0149",
      "Title": "Method name expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0149",
      "Description": "When creating a delegate, specify a method. For more information, see Delegates."
    },
    {
      "Code": "CS0150",
      "Title": "A constant value is expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0150",
      "Description": "A variable was found where a constant was expected. For more information, see switch."
    },
    {
      "Code": "CS0151",
      "Title": "A value of an integral type expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0151",
      "Description": "A variable was used in a situation where an integral data type was required. For more information, see Types."
    },
    {
      "Code": "CS0152",
      "Title": "The label 'label' already occurs in this switch statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0152",
      "Description": "A label was repeated in a switch statement."
    },
    {
      "Code": "CS0153",
      "Title": "A goto case is only valid inside a switch statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0153",
      "Description": "An attempt was made to use the switch statement syntax outside of a switch statement."
    },
    {
      "Code": "CS0154",
      "Title": "The property or indexer 'property' cannot be used in this context because it lacks the get accessor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0154",
      "Description": "An attempt to use a property failed because no get accessor method was defined in the property. For more information, see Fields."
    },
    {
      "Code": "CS0155",
      "Title": "The type caught or thrown must be derived from System.Exception",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0155",
      "Description": "An attempt was made to pass a data type that does not derive from System.Exception into a catch block. Only data types that derive from System.Exception can be passed into a catch block. For more information, see Exceptions and Exception Handling."
    },
    {
      "Code": "CS0156",
      "Title": "A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0156",
      "Description": "A throw statement with no parameters can only appear in a catch clause that takes no parameters."
    },
    {
      "Code": "CS0157",
      "Title": "Control cannot leave the body of a finally clause",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0157",
      "Description": "All of the statements in a finally clause must execute. For more information, see Exceptions and Exception Handling."
    },
    {
      "Code": "CS0158",
      "Title": "The label 'label' shadows another label by the same name in a contained scope",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0158",
      "Description": "A label in an inner scope hides a label with the same name in an outer scope. For more information, see goto."
    },
    {
      "Code": "CS0159",
      "Title": "No such label 'label' within the scope of the goto statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0159",
      "Description": "The label referenced by the goto statement could not be found within the scope of the goto statement."
    },
    {
      "Code": "CS0160",
      "Title": "A previous catch clause already catches all exceptions of this or of a super type ('type')",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0160",
      "Description": "A series of catch statements needs to be in decreasing order of derivation. For example, the most derived objects must appear first."
    },
    {
      "Code": "CS0161",
      "Title": "'method': not all code paths return a value",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0161",
      "Description": "A method that returns a value must have a return statement in all code paths. For more information, see Methods."
    },
    {
      "Code": "CS0163",
      "Title": "Control cannot fall through from one case label ('label') to another",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0163",
      "Description": "When a switch statement contains more than one switch section, you must explicitly terminate each section, including the last one, by using one of the following keywords:"
    },
    {
      "Code": "CS0165",
      "Title": "Use of unassigned local variable 'name'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0165",
      "Description": "The C# compiler doesn't allow the use of uninitialized variables. If the compiler detects the use of a variable that might not have been initialized, it generates compiler error CS0165. For more information, see Fields. This error is generated when the compiler encounters a construct that might result in the use of an unassigned variable, even if your particular code does not. This avoids the necessity of overly complex rules for definite assignment."
    },
    {
      "Code": "CS0167",
      "Title": "The delegate 'delegate' is missing the Invoke method",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0167",
      "Description": "You imported and used a managed program (one that uses the .NET runtime) that was created with another compiler. That compiler allowed an ill-formed delegate. Therefore, the Invoke method was not available. For more information, see Delegates."
    },
    {
      "Code": "CS0170",
      "Title": "Use of possibly unassigned field 'field'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0170",
      "Description": "A field in a structure was used without first being initialized. To solve this problem, first determine which field was uninitialized and then initialize it before you try to access it. For more information about initializing structs, see Structure types."
    },
    {
      "Code": "CS0171",
      "Title": "Backing field for automatically implemented property 'name' must be fully assigned before control is returned to the caller. Consider calling the parameterless constructor from a constructor initializer.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0171",
      "Description": "A constructor in a struct must initialize all fields in the struct. For more information, see Constructors."
    },
    {
      "Code": "CS0172",
      "Title": "Type of conditional expression cannot be determined because 'type1' and 'type2' implicitly convert to one another",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0172",
      "Description": "In a conditional statement, you must be able to implicitly convert the types on either side of the : token. Also, there cannot be mutual implicit conversions; you only need one conversion."
    },
    {
      "Code": "CS0173",
      "Title": "Type of conditional expression cannot be determined because there is no implicit conversion between 'class1' and 'class2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0173",
      "Description": "Conversions between classes are useful when you want objects of different classes to work with the same code. However, two classes that work together cannot have mutual and redundant conversions, or no implicit conversions. The types of class1 and class2 are determined independently, and the more general type is selected as the type of the conditional expression. For more information about how types are determined, see Conditional operator cannot cast implicitly."
    },
    {
      "Code": "CS0174",
      "Title": "A base class is required for a 'base' reference",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0174",
      "Description": "This error occurs only when the .NET runtime compiles the source code for the System.Object class, which is the only class that has no base class."
    },
    {
      "Code": "CS0175",
      "Title": "Use of keyword 'base' is not valid in this context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0175",
      "Description": "The base keyword must be used to specify a particular member of the base class. For more information, see Constructors."
    },
    {
      "Code": "CS0176",
      "Title": "Static member 'member' cannot be accessed with an instance reference; qualify it with a type name instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0176",
      "Description": "Only a class name can be used to qualify a static variable; an instance name cannot be a qualifier. For more information, see Static Classes and Static Class Members."
    },
    {
      "Code": "CS0177",
      "Title": "The out parameter 'parameter' must be assigned to before control leaves the current method",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0177",
      "Description": "A parameter marked with the out keyword was not assigned a value in the method body. For more information, see Passing Parameters"
    },
    {
      "Code": "CS0178",
      "Title": "Invalid rank specifier: expected ',' or ']'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0178",
      "Description": "An array initialization was ill-formed. For example, when specifying the array dimensions, you can specify the following:"
    },
    {
      "Code": "CS0179",
      "Title": "'member' cannot be extern and declare a body",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0179",
      "Description": "When a class member is marked extern, it means that the member's definition is located in another file. Therefore, a class member marked as extern cannot be defined in the class. Either remove the extern keyword or delete the definition. For more information, see Methods."
    },
    {
      "Code": "CS0180",
      "Title": "'member' cannot be both extern and abstract",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0180",
      "Description": "The abstract and extern keywords are mutually exclusive. The extern keyword means that the member is defined outside the file, and abstract means that the implementation is provided in a derived class. For more information, see Methods."
    },
    {
      "Code": "CS0182",
      "Title": "An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0182",
      "Description": "Certain restrictions apply to what kinds of arguments may be used with attributes. Note that in addition to the restrictions specified in the error message, the following types are NOT allowed as attribute arguments:"
    },
    {
      "Code": "CS0185",
      "Title": "'type' is not a reference type as required by the lock statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0185",
      "Description": "The lock statement can only be used with reference types."
    },
    {
      "Code": "CS0186",
      "Title": "Use of null is not valid in this context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0186",
      "Description": "The following sample generates CS0186:"
    },
    {
      "Code": "CS0188",
      "Title": "The 'this' object cannot be used before all of its fields are assigned to",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0188",
      "Description": "All fields in a struct have to be assigned by a constructor before the constructor can call a method in the struct."
    },
    {
      "Code": "CS0191",
      "Title": "Property or indexer 'name' cannot be assigned to -- it is read only",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0191",
      "Description": "A readonly field can only take an assignment in a constructor or at declaration. For more information, see Constructors."
    },
    {
      "Code": "CS0192",
      "Title": "Fields of static readonly field 'name' cannot be passed ref or out (except in a static constructor)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0192",
      "Description": "A field (variable) marked with the readonly keyword cannot be passed either to a ref or out parameter except inside a constructor. For more information, see Fields."
    },
    {
      "Code": "CS0193",
      "Title": "The * or -&gt; operator must be applied to a pointer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0193",
      "Description": "The * or -&gt; operator was used with a nonpointer type. For more information, see Pointer types."
    },
    {
      "Code": "CS0196",
      "Title": "A pointer must be indexed by only one value",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0196",
      "Description": "A pointer cannot have multiple indices. For more information, see Pointer types"
    },
    {
      "Code": "CS0198",
      "Title": "Fields of static readonly field 'name' cannot be assigned to (except in a static constructor or a variable initializer)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0198",
      "Description": "A readonly variable must have the same static usage as the constructor in which you want to initialize it. For more information, see Static Constructors."
    },
    {
      "Code": "CS0199",
      "Title": "Fields of static readonly field 'name' cannot be passed ref or out (except in a static constructor)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0199",
      "Description": "A readonly variable must have the same static usage as the constructor in which you want to pass it as a ref or out parameter. For more information, see Passing Parameters."
    },
    {
      "Code": "CS0200",
      "Title": "Property or indexer 'property' cannot be assigned to -- it is read only",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0200",
      "Description": "An attempt was made to assign a value to a property, but the property does not have a set accessor or the assignment was outside of the constructor. Resolve the error by adding a set accessor. For more information, see How to declare and use read-write properties."
    },
    {
      "Code": "CS0201",
      "Title": "Only assignment, call, increment, decrement, and new object expressions can be used as a statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0201",
      "Description": "The compiler generates an error when it encounters an invalid statement. An invalid statement is any line or series of lines ending in a semicolon that does not represent an assignment (=), method call (), new, -- or ++ operation. For more information, see Statements, Expressions, and Operators."
    },
    {
      "Code": "CS0202",
      "Title": "foreach requires that the return type 'type' of 'type.GetEnumerator()' must have a suitable public MoveNext method and public Current property",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0202",
      "Description": "A GetEnumerator function, used to enable the use of foreach statements, cannot return a pointer or array; it must return an instance of a class that is able to act as an enumerator. The proper requirements to serve as an enumerator include a public Current property and a public MoveNext method."
    },
    {
      "Code": "CS0204",
      "Title": "Only 65534 locals are allowed",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0204",
      "Description": "The limit of 65534 local variables has been exceeded in a method."
    },
    {
      "Code": "CS0205",
      "Title": "Cannot call an abstract base member: 'method'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0205",
      "Description": "You cannot call an abstract method because it does not have a method body. For more information, see Abstract and Sealed Classes and Class Members."
    },
    {
      "Code": "CS0206",
      "Title": "A property or indexer may not be passed as an out or ref parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0206",
      "Description": "A property is not available to be passed as a ref or out parameter. For more information, see Passing Parameters."
    },
    {
      "Code": "CS0208",
      "Title": "Cannot take the address of, get the size of, or declare a pointer to a managed type ('type')",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0208",
      "Description": "Even when used with the unsafe keyword, taking the address of a managed object, getting the size of a managed object, or declaring a pointer to a managed type is not allowed. A managed type is:"
    },
    {
      "Code": "CS0209",
      "Title": "The type of local declared in a fixed statement must be a pointer type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0209",
      "Description": "The variable that you declare in a fixed statement must be a pointer. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0210",
      "Title": "You must provide an initializer in a fixed or using statement declaration",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0210",
      "Description": "You must declare and initialize the variable in a fixed statement. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0211",
      "Title": "Cannot take the address of the given expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0211",
      "Description": "You can take the address of fields, local variables, and indirection of pointers, but you cannot take, for example, the address of the sum of two local variables. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0212",
      "Title": "You can only take the address of an unfixed expression inside of a fixed statement initializer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0212",
      "Description": "For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0213",
      "Title": "You cannot use the fixed statement to take the address of an already fixed expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0213",
      "Description": "A local variable in an unsafe method or a parameter is already fixed (on the stack), so you cannot take the address of either of these two variables in a fixed expression. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0214",
      "Title": "Pointers and fixed size buffers may only be used in an unsafe context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0214",
      "Description": "Pointers can only be used with the unsafe keyword. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0215",
      "Title": "The return type of operator True or False must be bool",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0215",
      "Description": "User-defined true and false operators must have a return type of bool."
    },
    {
      "Code": "CS0216",
      "Title": "The operator 'operator' requires a matching operator 'missing_operator' to also be defined",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0216",
      "Description": "A user-defined == operator requires a user-defined != operator, and vice versa.\nThe same applies also to a user-defined true operator and a user-defined false operator."
    },
    {
      "Code": "CS0217",
      "Title": "In order to be applicable as a short circuit operator a user-defined logical operator ('operator') must have the same return type as the type of its 2 parameters.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0217",
      "Description": "If you define an operator for a user-defined type, and then try to use the operator as a short-circuit operator, the user-defined operator must have parameters and return values of the same type. For more information about short-circuit operators, see &amp;&amp; operator and || operator. For more information about user-defined short-circuit, or conditional, operators, see the User-defined conditional logical operators section of the C# language specification."
    },
    {
      "Code": "CS0218",
      "Title": "The type ('type') must contain declarations of operator true and operator false",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0218",
      "Description": "If a user-defined type overloads the &amp; operator or | operator, it must also define true and false operators, in order to make short-circuiting &amp;&amp; operator or || operator defined."
    },
    {
      "Code": "CS0220",
      "Title": "The operation overflows at compile time in checked mode",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0220",
      "Description": "An operation was detected by checked, which is the default, and a data loss resulted. Either correct the inputs to the assignment or use unchecked to resolve this error. For more information, see Checked and Unchecked."
    },
    {
      "Code": "CS0221",
      "Title": "Constant value 'value' cannot be converted to a 'type' (use 'unchecked' syntax to override)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0221",
      "Description": "An assignment operation that would result in a data loss was detected by checked, which is on by default. Either correct the assignment or use unchecked to resolve this error. For more information, see Checked and Unchecked."
    },
    {
      "Code": "CS0225",
      "Title": "The params parameter must be a single dimensional array",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0225",
      "Description": "When using the params keyword, you must specify a single-dimensional array of the data type. For more information, see Methods."
    },
    {
      "Code": "CS0226",
      "Title": "An __arglist expression may only appear inside of a call or new expression.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0226",
      "Description": "The unsupported keyword __arglist can only appear in a method call or a new expression."
    },
    {
      "Code": "CS0227",
      "Title": "Unsafe code may only appear if compiling with /unsafe",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0227",
      "Description": "If source code contains the unsafe keyword, then the AllowUnsafeBlocks compiler option must also be used. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0228",
      "Title": "'type' does not contain a definition for 'member', or it is not accessible",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0228",
      "Description": "You may have replaced the system version of System.Hashtable, System.String, or System.Array, and the replacement does not contain member."
    },
    {
      "Code": "CS0229",
      "Title": "Ambiguity between 'member1' and 'member2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0229",
      "Description": "Members of different interfaces have the same name. If you want to keep the same names, you must qualify the names. For more information, see Interfaces."
    },
    {
      "Code": "CS0230",
      "Title": "Type and identifier are both required in a foreach statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0230",
      "Description": "A foreach statement was poorly formed."
    },
    {
      "Code": "CS0231",
      "Title": "A params parameter must be the last parameter in a formal parameter list.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0231",
      "Description": "The params parameter supports a variable numbers of arguments and must be after all other parameters. For more information, see Methods."
    },
    {
      "Code": "CS0233",
      "Title": "'identifier' does not have a predefined size, therefore sizeof can only be used in an unsafe context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0233",
      "Description": "Without unsafe context, the sizeof operator can only be used for types which size is a compile-time constant. If you are getting this error, use an unsafe context."
    },
    {
      "Code": "CS0234",
      "Title": "The type or namespace name 'name' does not exist in the namespace 'namespace' (are you missing an assembly reference?)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0234",
      "Description": "A type was expected. Possible causes for this error include the following:"
    },
    {
      "Code": "CS0236",
      "Title": "A field initializer cannot reference the non-static field, method, or property 'name'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0236",
      "Description": "Instance fields cannot be used to initialize other instance fields outside a method."
    },
    {
      "Code": "CS0238",
      "Title": "'member' cannot be sealed because it is not an override",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0238",
      "Description": "sealed was used on a member that was not also marked with override. For more information, see Inheritance."
    },
    {
      "Code": "CS0239",
      "Title": "'member' : cannot override inherited member 'inherited member' because it is sealed",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0239",
      "Description": "A member cannot override a sealed inherited member. For more information, see Checked and Unchecked."
    },
    {
      "Code": "CS0241",
      "Title": "Default parameter specifiers are not permitted",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0241",
      "Description": "Method parameters cannot have default values. Use method overloads if you want to achieve the same effect. For more information, see Passing Parameters."
    },
    {
      "Code": "CS0242",
      "Title": "The operation in question is undefined on void pointers",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0242",
      "Description": "Incrementing a void pointer is not allowed. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0243",
      "Title": "The Conditional attribute is not valid on 'method' because it is an override method",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0243",
      "Description": "The ConditionalAttribute attribute is not allowed on a method that is marked with the override keyword. For more information, see Knowing When to Use Override and New Keywords."
    },
    {
      "Code": "CS0244",
      "Title": "Neither 'is' nor 'as' is valid on pointer types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0244",
      "Description": "The is and as operators are not valid for use on pointer types. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0245",
      "Title": "Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0245",
      "Description": "For more information, see Programming Essentials for Garbage Collection and Finalizers."
    },
    {
      "Code": "CS0246",
      "Title": "The type or namespace name 'type/namespace' could not be found (are you missing a using directive or an assembly reference?)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0246",
      "Description": "A type or namespace that is used in the program was not found. You might have forgotten to reference (References) the assembly that contains the type, or you might not have added the required using directive.  Or, there might be an issue with the assembly you are trying to reference."
    },
    {
      "Code": "CS0247",
      "Title": "Cannot use a negative size with stackalloc",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0247",
      "Description": "A negative number was passed to a stackalloc statement."
    },
    {
      "Code": "CS0248",
      "Title": "Cannot create an array with a negative size",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0248",
      "Description": "An array size was specified with a negative number. For more information, see Arrays."
    },
    {
      "Code": "CS0249",
      "Title": "Do not override object.Finalize. Instead, provide a destructor.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0249",
      "Description": "Use finalizer syntax to specify instructions to execute when your object is destroyed."
    },
    {
      "Code": "CS0250",
      "Title": "Do not directly call your base class Finalize method. It is called automatically from your destructor.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0250",
      "Description": "A program cannot attempt to force cleanup of base class resources."
    },
    {
      "Code": "CS0254",
      "Title": "The right hand side of a fixed statement assignment may not be a cast expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0254",
      "Description": "The right side of a fixed expression may not use a cast. For more information, see Unsafe Code and Pointers."
    },
    {
      "Code": "CS0255",
      "Title": "stackalloc may not be used in a catch or finally block",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0255",
      "Description": "You cannot use the stackalloc operator in a catch or finally block. For more information, see Exceptions and Exception Handling."
    },
    {
      "Code": "CS0260",
      "Title": "Missing partial modifier on declaration of type 'type'; another partial declaration of this type exists",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0260",
      "Description": "This error indicates that you have declared multiple classes that have the same name. In addition, at least one but not all of the declarations contains the partial modifier. If you want to define a class in several parts, you must declare each part by using the keyword partial."
    },
    {
      "Code": "CS0261",
      "Title": "Partial declarations of 'type' must be all classes, all structs, or all interfaces",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0261",
      "Description": "This error occurs if a partial type is declared as a different type of construct in various places. For more information, see Partial Classes and Methods."
    },
    {
      "Code": "CS0262",
      "Title": "Partial declarations of 'type' have conflicting accessibility modifiers",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0262",
      "Description": "This error occurs if a partial type has inconsistent modifiers such as public, private, protected, internal, or abstract. These modifiers must be consistent in all partial declarations for that type. For more information, see Partial Classes and Methods."
    },
    {
      "Code": "CS0263",
      "Title": "Partial declarations of 'type' must not specify different base classes",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0263",
      "Description": "When defining a type in partial declarations, specify the same base types in each of the partial declarations. For more information, see Partial Classes and Methods."
    },
    {
      "Code": "CS0264",
      "Title": "Partial declarations of 'type' must have the same type parameter names in the same order",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0264",
      "Description": "This error occurs if you are defining a generic type in partial declarations and the type parameters are not consistent in name or order throughout all of the partial declarations. To get rid of this error, check the type parameters for each partial declaration and make sure the same name and order of parameters is used. For more information, see Partial Classes and Methods.and Generic Type Parameters."
    },
    {
      "Code": "CS0265",
      "Title": "Partial declarations of 'type' have inconsistent constraints for type parameter 'type parameter'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0265",
      "Description": "This error happens when you define a generic class as a partial class, so that its partial definitions occur in more than one place, and the constraints on the generic type are inconsistent or different in two or more places. If you specify the constraints in more than one place, they must all be identical. The easiest solution is to specify the constraints in one place, and omit them everywhere else. For more information, see Partial Classes and Methods and Constraints on Type Parameters."
    },
    {
      "Code": "CS0266",
      "Title": "Cannot implicitly convert type 'type1' to 'type2'. An explicit conversion exists (are you missing a cast?)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0266",
      "Description": "This error occurs when your code tries to convert between two types that cannot be implicitly converted, but where an explicit conversion is available. For more information, see Casting and Type Conversions."
    },
    {
      "Code": "CS0267",
      "Title": "The partial modifier can only appear immediately before 'class', 'record', 'struct', 'interface', or a method return type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0267",
      "Description": "The placement of the partial modifier was incorrect in the declaration of the class, record, struct, interface, or method. To fix the error, reorder the modifiers. For more information, see Partial Classes and Methods."
    },
    {
      "Code": "CS0268",
      "Title": "Imported type 'type' is invalid. It contains a circular base class dependency.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0268",
      "Description": "This error occurs if a type imported from another language has a circular base class dependency. Such a type cannot be used in a C# program. To resolve this error, check types imported from other languages in any referenced assemblies or modules."
    },
    {
      "Code": "CS0269",
      "Title": "Use of unassigned out parameter 'parameter'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0269",
      "Description": "The compiler could not verify that the out parameter was assigned a value before it was used; its value may be undefined when assigned. Be sure to assign a value to out parameters in the called method before accessing the value. If you need to use the value of the variable passed in, use a ref parameter instead. For more information, see Passing Parameters."
    },
    {
      "Code": "CS0270",
      "Title": "Array size cannot be specified in a variable declaration (try initializing with a 'new' expression)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0270",
      "Description": "This error occurs when a size is specified as part of an array declaration. To resolve, use the new operator expression."
    },
    {
      "Code": "CS0271",
      "Title": "The property or indexer 'property/indexer' cannot be used in this context because the get accessor is inaccessible",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0271",
      "Description": "This error occurs when you try to access an inaccessible get accessor. To resolve this error, increase the accessibility of the accessor, or change the calling location. For more information, see Accessor Accessibility and Properties."
    },
    {
      "Code": "CS0272",
      "Title": "The property or indexer 'property/indexer' cannot be used in this context because the set accessor is inaccessible",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0272",
      "Description": "This error occurs when the set accessor is not accessible to the program code. To resolve this error, increase the accessibility of the accessor, or change the calling location. For more information, see Restricting Accessor Accessibility."
    },
    {
      "Code": "CS0273",
      "Title": "The accessibility modifier of the 'property_accessor' accessor must be more restrictive than the property or indexer 'property'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0273",
      "Description": "The accessibility modifier of the set/get accessor must be more restrictive than the property or indexer 'property/indexer'"
    },
    {
      "Code": "CS0274",
      "Title": "Cannot specify accessibility modifiers for both accessors of the property or indexer 'property/indexer'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0274",
      "Description": "This error occurs when you declare a property or indexer with access modifiers on both its accessors. To resolve this error, use an access modifier on only one of the two accessors. For more information, see Accessor Accessibility."
    },
    {
      "Code": "CS0275",
      "Title": "'accessor': accessibility modifiers may not be used on accessors in an interface",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0275",
      "Description": "This error occurs when you use an access modifier on any one of the accessors of a property or indexer in an interface. To resolve, remove the access modifier."
    },
    {
      "Code": "CS0276",
      "Title": "'property/indexer': accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0276",
      "Description": "This error occurs when you declare a property or indexer with one accessor only, and use an access modifier on the accessor. To resolve, remove the access modifier or add another accessor."
    },
    {
      "Code": "CS0277",
      "Title": "'class' does not implement interface member 'accessor'. 'class accessor' is not public",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0277",
      "Description": "This error occurs when you try to implement a property of an interface, but the implementation of the property accessor in the class is not public. Methods that implement interface members need to have public accessibility. To resolve, remove the access modifier on the property accessor."
    },
    {
      "Code": "CS0281",
      "Title": "Friend access was granted to 'AssemblyName1', but the output assembly is named 'AssemblyName2'. Try adding a reference to 'AssemblyName1' or changing the output assembly name to match.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0281",
      "Description": "Friend access is a new common language runtime (CLR) feature that enables an assembly to see another assembly's non-public types. This error occurs when the assembly granting friend access specifies the wrong name for the grantee assembly. For more information, see Friend Assemblies."
    },
    {
      "Code": "CS0283",
      "Title": "The type 'type' cannot be declared const",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0283",
      "Description": "The type specified in a constant declaration must be byte, sbyte, ushort, short, uint, int, ulong, long, char, float, double, decimal, bool, string, an enum type, or a reference type that is assigned a value of null. Each constant expression must yield a value of the target type or of a type that is implicitly convertible to the target type."
    },
    {
      "Code": "CS0304",
      "Title": "Cannot create an instance of the variable type 'type' because it does not have the new() constraint",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0304",
      "Description": "When you implement a generic class, and you want to use the new keyword to create a new instance of any type that is supplied for a type parameter T, you must apply the new() constraint to T in the class declaration, as shown in the following example."
    },
    {
      "Code": "CS0305",
      "Title": "Using the generic type 'generic type' requires 'number' type arguments",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0305",
      "Description": "This error occurs when the expected number of type arguments was not found. To resolve C0305, use the required number of type arguments."
    },
    {
      "Code": "CS0306",
      "Title": "The type 'type' may not be used as a type argument",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0306",
      "Description": "The type used as a type parameter is not allowed. This could be because the type is a pointer type."
    },
    {
      "Code": "CS0307",
      "Title": "The 'construct' 'identifier' is not a generic method. If you intended an expression list, use parentheses around the &lt; expression.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0307",
      "Description": "The construct named was not a type or a method, the only constructs that can take generic arguments. Remove the type arguments in angle brackets. If a generic is needed, declare your generic construct as a generic type or method."
    },
    {
      "Code": "CS0308",
      "Title": "The non-generic type-or-method 'identifier' cannot be used with type arguments.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0308",
      "Description": "The method or type is not generic, but it was used with type arguments. To avoid this error, remove the angled brackets and type arguments, or redeclare the method or type as a generic method or type."
    },
    {
      "Code": "CS0310",
      "Title": "The type 'typename' must be a non-abstract type with a public parameterless constructor in order to use it as parameter 'parameter' in the generic type or method 'generic'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0310",
      "Description": "The generic type or method defines the new() constraint in its where clause, so any type must have a public parameterless constructor in order to be used as a type argument for that generic type or method. To avoid this error, make sure that the type has the correct constructor, or modify the constraint clause of the generic type or method."
    },
    {
      "Code": "CS0311",
      "Title": "The type 'type1' cannot be used as type parameter 'T' in the generic type or method '&lt;name&gt;'. There is no implicit reference conversion from 'type1' to 'type2'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0311",
      "Description": "When a constraint is applied to a generic type parameter, an implicit identity or reference conversion must exist from the concrete argument to the type of the constraint."
    },
    {
      "Code": "CS0312",
      "Title": "The type 'type1' cannot be used as type parameter 'name' in the generic type or method 'name'. The nullable type 'type1' does not satisfy the constraint of 'type2'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0312",
      "Description": "A nullable value type is distinct from its non-nullable counterpart; no implicit reference conversion or identify conversion exists between them. A nullable boxing conversion does not satisfy a generic type constraint. In the example that follows, the first type parameter is a Nullable&lt;int&gt; and the second type parameter is a System.Int32."
    },
    {
      "Code": "CS0313",
      "Title": "The type 'type1' cannot be used as type parameter 'parameter name' in the generic type or method 'type2'. The nullable type 'type1' does not satisfy the constraint of 'type2'. Nullable types cannot satisfy any interface constraints.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0313",
      "Description": "A nullable value type is not equivalent to its non-nullable counterpart. In the example that follows, ImplStruct satisfies the BaseInterface constraint but ImplStruct? does not because Nullable&lt;ImplStruct&gt; does not implement BaseInterface."
    },
    {
      "Code": "CS0314",
      "Title": "The type 'type1' cannot be used as type parameter 'name' in the generic type or method 'name'. There is no boxing conversion or type parameter conversion from 'type1' to 'type2'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0314",
      "Description": "When a generic type uses a type parameter that is constrained, the new class must also satisfy those same constraints."
    },
    {
      "Code": "CS0315",
      "Title": "The type 'valueType' cannot be used as type parameter 'T' in the generic type or method 'TypeorMethod&lt;T&gt;'. There is no boxing conversion from 'valueType' to 'referenceType'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0315",
      "Description": "This error occurs when you constrain a generic type to a particular class, and try to construct an instance of that class by using a value type that cannot be implicitly boxed to it."
    },
    {
      "Code": "CS0316",
      "Title": "The parameter name 'name' conflicts with an automatically-generated parameter name.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0316",
      "Description": "Reserved words cannot be used as parameter names. In the example that follows, value is a reserved word in the context of a default property or indexer accessor."
    },
    {
      "Code": "CS0400",
      "Title": "The type or namespace name 'identifier' could not be found in the global namespace (are you missing an assembly reference?)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0400",
      "Description": "The identifier scoped with the global scope operator (::) was not found in the global namespace. You may be missing an assembly reference that contains the identifier, or the identifier may be declared in a class or namespace other than the global namespace. This error could also occur if a globally scoped identifier is not declared or is misspelled."
    },
    {
      "Code": "CS0401",
      "Title": "The new() constraint must be the last constraint specified",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0401",
      "Description": "When using multiple constraints, list all other constraints before the new() constraint."
    },
    {
      "Code": "CS0403",
      "Title": "Cannot convert null to type parameter 'name' because it could be a non-nullable value type. Consider using default('T') instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0403",
      "Description": "You cannot assign null to the unknown type named because it might be a value type, which does not allow null assignment. If your generic class is not intended to accept value types, use the class type constraint. If it can accept value types, such as the built-in types, you may be able to replace the assignment to null with the expression default(T), as shown in the following example."
    },
    {
      "Code": "CS0404",
      "Title": "'&lt;' unexpected : attributes cannot be generic",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0404",
      "Description": "Generic type parameters are not allowed in attributes. Remove the type parameter and angled brackets."
    },
    {
      "Code": "CS0405",
      "Title": "Duplicate constraint 'constraint' for type parameter 'type parameter'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0405",
      "Description": "Two of the constraints on the generic declaration are identical. To get rid of the error, remove the duplicate."
    },
    {
      "Code": "CS0406",
      "Title": "The class type constraint 'constraint' must come before any other constraints",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0406",
      "Description": "When a generic type or method has a class type constraint, that constraint must be listed first. To avoid this error, move the class type constraint to the beginning of the constraint list."
    },
    {
      "Code": "CS0407",
      "Title": "'return-type method' has the wrong return type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0407",
      "Description": "The method was not compatible with the delegate type. The argument types matched, but the return type was not the correct return type for that delegate. To avoid this error, use a different method, change the method's return type, or change the delegate's return type."
    },
    {
      "Code": "CS0409",
      "Title": "A constraint clause has already been specified for type parameter 'type parameter'. All of the constraints for a type parameter must be specified in a single where clause.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0409",
      "Description": "Multiple constraint clauses (where clauses) were found for a single type parameter. Remove the extraneous where clause, or correct the where clauses so that a unique type parameter in each clause."
    },
    {
      "Code": "CS0410",
      "Title": "No overload for 'method' has the correct parameter and return types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0410",
      "Description": "This error occurs if you try to instantiate a delegate with a function that has the wrong parameter types. The parameter types of the delegate must match the function that you are assigning to the delegate."
    },
    {
      "Code": "CS0411",
      "Title": "The type arguments for method 'method' cannot be inferred from the usage. Try specifying the type arguments explicitly.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0411",
      "Description": "This error occurs if you call a generic method without explicitly providing the type arguments and the compiler cannot infer which type arguments are intended. To avoid this error, add the intended type arguments in angle brackets."
    },
    {
      "Code": "CS0412",
      "Title": "'generic': a parameter or local variable cannot have the same name as a method type parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0412",
      "Description": "There is a name conflict between the type parameter of a generic method and a local variable in the method or one of the method's parameters. To avoid this error, rename any conflicting parameters or local variables."
    },
    {
      "Code": "CS0413",
      "Title": "The type parameter 'type parameter' cannot be used with the 'as' operator because it does not have a class type constraint nor a 'class' constraint",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0413",
      "Description": "This error occurs if a generic type uses the as operator, but that generic type does not have a class type constraint. The as operator is only allowed with reference and nullable value types, so the type parameter must be constrained to guarantee that it is not a value type. To avoid this error, use a class type constraint or a reference type constraint."
    },
    {
      "Code": "CS0415",
      "Title": "The 'IndexerName' attribute is valid only on an indexer that is not an explicit interface member declaration",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0415",
      "Description": "This error occurs if you use an IndexerName attribute on an indexer that was an explicit implementation of an interface. This error may be avoided by removing the interface name from the declaration of the indexer, if possible. For more information, see the IndexerNameAttribute Class."
    },
    {
      "Code": "CS0416",
      "Title": "'type parameter': an attribute argument cannot use type parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0416",
      "Description": "A type parameter was used as an attribute argument, which is not allowed. Use a non-generic type."
    },
    {
      "Code": "CS0417",
      "Title": "'identifier': cannot provide arguments when creating an instance of a variable type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0417",
      "Description": "This error occurs if a call to the new operator on a type parameter has arguments. The only constructor that can be called by using the new operator on an unknown parameter type is a constructor that has no arguments. If you need to call another constructor, consider using a class type constraint or interface constraint."
    },
    {
      "Code": "CS0418",
      "Title": "'class name': an abstract class cannot be sealed or static",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0418",
      "Description": "An abstract class cannot be used to create objects unless it is derived from, so it makes no sense to be sealed. An abstract class cannot meaningfully be static either; abstract classes are designed to support an object hierarchy that will use the abstract class as a base."
    },
    {
      "Code": "CS0423",
      "Title": "Since 'class' has the ComImport attribute, 'method' must be extern or abstract",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0423",
      "Description": "Specifying the ComImport attribute implies that the implementation for the class is to be imported from a COM module. Additional methods may not be defined."
    },
    {
      "Code": "CS0424",
      "Title": "'class': a class with the ComImport attribute cannot specify a base class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0424",
      "Description": "Specifying the ComImportAttribute attribute implies that the implementation for the class is to be imported from a COM module. Additional methods or fields inherited from the base class are not allowed to be added to the implementation defined in the COM module."
    },
    {
      "Code": "CS0425",
      "Title": "The constraints for type parameter 'type parameter' of method 'method' must match the constraints for type parameter 'type parameter' of interface method 'method'. Consider using an explicit interface implementation instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0425",
      "Description": "This error occurs if a virtual generic method is overridden in a derived class and the constraints on the method in the derived class do not match the constraints on the method in the base class. To avoid this error, make sure the where clause is identical in both declarations, or implement the interface explicitly."
    },
    {
      "Code": "CS0426",
      "Title": "The type name 'identifier' does not exist in the type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0426",
      "Description": "This error occurs when you reference a type nested within another type, but no such nested type exists. This can occur if you mistype the name of the nested type. Check the spelling of the names used, and verify that the enclosing type has the expected member."
    },
    {
      "Code": "CS0428",
      "Title": "Cannot convert method group 'Identifier' to non-delegate type 'type'.  Did you  intend to invoke the method?",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0428",
      "Description": "This error occurs when converting a method group to a non-delegate type, or attempting to invoke a method without using parentheses."
    },
    {
      "Code": "CS0430",
      "Title": "The extern alias 'alias' was not specified in a /reference option",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0430",
      "Description": "This error occurs when extern Alias is encountered but Alias was not specified as a reference on the command line. To resolve CS0430, compile with /reference."
    },
    {
      "Code": "CS0431",
      "Title": "Cannot use alias 'identifier' with '::' since the alias references a type. Use '.' instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0431",
      "Description": "You used &quot;::&quot; with an alias that references a type. To resolve this error, use the &quot;.&quot; operator."
    },
    {
      "Code": "CS0432",
      "Title": "Alias 'identifier' not found",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0432",
      "Description": "This error occurs when you use &quot;::&quot; to the right of an identifier that is not an alias. To resolve the error, use &quot;.&quot; instead."
    },
    {
      "Code": "CS0433",
      "Title": "The type TypeName1 exists in both TypeName2 and TypeName3",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0433",
      "Description": "Two different assemblies referenced in your application contain the same namespace and type, which produces ambiguity."
    },
    {
      "Code": "CS0434",
      "Title": "The namespace NamespaceName1 in NamespaceName2 conflicts with the type TypeName1 in NamespaceName3",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0434",
      "Description": "This error occurs when an imported type and an imported nested namespace have the same fully qualified name. When that name is referenced, the compiler is unable to distinguish between the two. If you can change the imported source code, you can resolve the error by changing the name of either the type or the namespace so that both are unique within the assembly."
    },
    {
      "Code": "CS0438",
      "Title": "The type 'type' in 'module_1' conflicts with the namespace 'namespace' in 'module_2'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0438",
      "Description": "This error occurs when a type in a source file conflicts with a namespace in another source file. This typically happens when one or both come from an added module. To resolve, rename the type or the namespace that caused the conflict."
    },
    {
      "Code": "CS0439",
      "Title": "An extern alias declaration must precede all other elements defined in the namespace",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0439",
      "Description": "This error occurs when an extern declaration comes after something else, such as a using declaration, in the same namespace. The extern declarations must come before all other namespace elements."
    },
    {
      "Code": "CS0441",
      "Title": "'class': a class cannot be both static and sealed",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0441",
      "Description": "This error occurs when you declare a class that is both static and sealed. Static classes are inherently sealed, so the sealed modifier is not necessary. To resolve, use one modifier only."
    },
    {
      "Code": "CS0442",
      "Title": "'Property': abstract properties cannot have private accessors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0442",
      "Description": "This error occurs when you use the access modifier &quot;private&quot; to modify an abstract accessor. To resolve, use a different access modifier, or make the property non-abstract."
    },
    {
      "Code": "CS0443",
      "Title": "Syntax error, value expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0443",
      "Description": "This error occurs when you reference an array without specifying a value for the array index."
    },
    {
      "Code": "CS0445",
      "Title": "Cannot modify the result of an unboxing conversion",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0445",
      "Description": "The result of an unboxing conversion is a temporary variable. The compiler prevents you from modifying such variables because any modification would go away when the temporary variable goes away. To fix this, declare a new value-type variable to store the intermediate expression, and assign the result of the unboxing conversion to that variable."
    },
    {
      "Code": "CS0446",
      "Title": "Foreach cannot operate on a 'Method or Delegate'. Did you intend to invoke the 'Method or Delegate'?",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0446",
      "Description": "This error is caused by specifying a method without parentheses or an anonymous method without parentheses in the part of the foreach statement where you would normally put a collection class. Note that it is valid, though unusual, to put a method call in that location, if the method returns a collection class."
    },
    {
      "Code": "CS0447",
      "Title": "Attributes cannot be used on type arguments, only on type parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0447",
      "Description": "This error occurs when you apply an attribute to a type argument that occurs in an invocation statement. It is acceptable to apply an attribute to a type parameter in a class or method declaration statement such as the following:"
    },
    {
      "Code": "CS0448",
      "Title": "The return type for ++ or -- operator must be the containing type or derived from the containing type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0448",
      "Description": "When you override the ++ or -- operators, they must return the same type as the containing type, or return a type that is derived from the containing type."
    },
    {
      "Code": "CS0449",
      "Title": "The 'class' or 'struct' constraint must come before any other constraints",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0449",
      "Description": "The constraints on the type parameter of a generic type or method must occur in a specific order: class or struct must be first, if present, then any interface constraints, and finally any constructor constraints. This error is caused by the class or struct constraint not appearing first. To resolve this error, reorder the constraint clauses."
    },
    {
      "Code": "CS0450",
      "Title": "'Type Parameter Name': cannot specify both a constraint class and the 'class' or 'struct' constraint",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0450",
      "Description": "If a type parameter is constrained by the struct type constraint, it is logically contradictory for it to also be constrained by a specific class type, since struct and class are mutually exclusive categories. If a type parameter is constrained by a specific class type constraint, then it is by definition constrained by the class type constraint, and so specifying the class type constraint is redundant."
    },
    {
      "Code": "CS0451",
      "Title": "The 'new()' constraint cannot be used with the 'struct' constraint",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0451",
      "Description": "When specifying constraints on the type of a generic, the new() constraint may only be used with class type constraints, interface type constraints, reference type constraints, and type parameter constraints, but not with value type constraints."
    },
    {
      "Code": "CS0452",
      "Title": "The type 'type name' must be a reference type in order to use it as parameter 'parameter name' in the generic type or method 'identifier of generic'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0452",
      "Description": "This error occurs when you pass a value type such as a struct or int as a parameter to a generic type or method that has a reference type constraint."
    },
    {
      "Code": "CS0453",
      "Title": "The type 'Type Name' must be a non-nullable value type in order to use it as parameter 'Parameter Name' in the generic type or method 'Generic Identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0453",
      "Description": "This error occurs when you use a non-value type argument in instantiating a generic type or method that has the value constraint on it. It can also occur when you use a nullable value type argument. See the last two lines of code in the following example."
    },
    {
      "Code": "CS0454",
      "Title": "Circular constraint dependency involving 'Type Parameter 1' and 'Type Parameter 2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0454",
      "Description": "This error arises because at some point one type parameter refers to another, and the second refers back to the first. To fix this error, break the circular dependency by removing one of the constraints. Note that the circular constraint dependency can be indirect."
    },
    {
      "Code": "CS0455",
      "Title": "Type parameter 'Type Parameter Name' inherits conflicting constraints 'Constraint Name 1' and 'Constraint Name 2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0455",
      "Description": "Two common ways to get this error are to set up constraints so that the type parameter derives from two non-related classes, or so that it derives from a class type or reference type constraint and a struct type or value type constraint. To resolve this error, remove the conflict from your inheritance hierarchy."
    },
    {
      "Code": "CS0456",
      "Title": "Type parameter 'Type Parameter Name 1' has the 'struct' constraint so 'Type Parameter Name 1' cannot be used as a constraint for 'Type Parameter Name 2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0456",
      "Description": "Value type constraints are implicitly sealed so those constraints cannot be used as constraints on a second type parameter. This is because value types cannot be overridden. To resolve this error, put a value type constraint directly on the second type parameter, instead of doing so indirectly by means of the first type parameter."
    },
    {
      "Code": "CS0457",
      "Title": "Ambiguous user defined conversions 'Conversion method name 1' and 'Conversion method name 2' when converting from 'type name 1' to 'type name 2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0457",
      "Description": "Two conversion methods are applicable, and the compiler is unable to decide which one to use."
    },
    {
      "Code": "CS0459",
      "Title": "Cannot take the address of a read-only local variable",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0459",
      "Description": "There are three common scenarios in the C# language that generate read-only local variables: foreach, using, and fixed. In each of these cases, you are not allowed to write to the read-only local variable, or to take its address. This error is generated when the compiler realizes you are trying to take the address of a read-only local variable."
    },
    {
      "Code": "CS0460",
      "Title": "Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0460",
      "Description": "When a generic method that is part of a derived class overrides a method in the base class, you may not specify constraints on the overridden method. The override method in the derived class inherits its constraints from the method in the base class."
    },
    {
      "Code": "CS0462",
      "Title": "The inherited members 'member1' and 'member2' have the same signature in type 'type', so they cannot be overridden",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0462",
      "Description": "This error arises with the introduction of generics. Normally, you cannot have two versions of a method in a class with the same signature. But with generics, you can specify a generic method that might duplicate another method if it is instantiated with a particular type."
    },
    {
      "Code": "CS0463",
      "Title": "Evaluation of the decimal constant expression failed with error: 'error'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0463",
      "Description": "This errors occurs when a constant decimal expression overflows at compile time."
    },
    {
      "Code": "CS0466",
      "Title": "'method1' should not have a params parameter since 'method2' does not",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0466",
      "Description": "You cannot use params parameter on a class member if the implemented interface doesn't use it."
    },
    {
      "Code": "CS0468",
      "Title": "Ambiguity between type 'type1' and type 'type2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0468",
      "Description": "This error is generated when there are two types in the assembly being compiled that have the same fully qualified name. This could occur if they are both in added modules or one is in an added module and one in source."
    },
    {
      "Code": "CS0470",
      "Title": "Method 'method' cannot implement interface accessor 'accessor' for type 'type'. Use an explicit interface implementation.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0470",
      "Description": "This error is generated when an accessor is trying to implement an interface. Explicit interface implementation must be used."
    },
    {
      "Code": "CS0471",
      "Title": "The method 'name' is not a generic method. If you intended an expression list, use parentheses around the &lt; expression.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0471",
      "Description": "This error is generated when your code contains an expression list without parentheses."
    },
    {
      "Code": "CS0473",
      "Title": "Explicit interface implementation 'method name' matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0473",
      "Description": "In some cases a generic method might acquire the same signature as a non-generic method. The problem is that there is no way in the common language infrastructure (CLI) metadata system to unambiguously state which method binds to which slot. It is up to the CLI to make that determination."
    },
    {
      "Code": "CS0500",
      "Title": "'class member' cannot declare a body because it is marked abstract",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0500",
      "Description": "An abstract method cannot contain its implementation."
    },
    {
      "Code": "CS0501",
      "Title": "'member function' must declare a body because it is not marked abstract, extern, or partial",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0501",
      "Description": "Nonabstract methods must have implementations."
    },
    {
      "Code": "CS0502",
      "Title": "'member' cannot be both abstract and sealed",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0502",
      "Description": "A class member cannot be both abstract and sealed."
    },
    {
      "Code": "CS0503",
      "Title": "The abstract method 'method' cannot be marked virtual",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0503",
      "Description": "It is redundant to mark a member method as both abstract and virtual because abstract implies virtual."
    },
    {
      "Code": "CS0504",
      "Title": "The constant 'variable' cannot be marked static",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0504",
      "Description": "If a variable is const, it is also static. If you want a const and static variable, just declare that variable as const; if all you want is a static variable, just mark it static."
    },
    {
      "Code": "CS0505",
      "Title": "'member1': cannot override because 'member2' is not a function",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0505",
      "Description": "A class declaration attempted to override a non-method in a base class. Overrides must match the member type. If a method with the same name as a method in a base class is desired, use new (and not override) on the method declaration in the base class."
    },
    {
      "Code": "CS0506",
      "Title": "'function1' : cannot override inherited member 'function2' because it is not marked &quot;virtual&quot;, &quot;abstract&quot;, or &quot;override&quot;",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0506",
      "Description": "A method was overridden that was not explicitly marked as virtual, abstract, or override."
    },
    {
      "Code": "CS0507",
      "Title": "'function1' : cannot change access modifiers when overriding 'access' inherited member 'function2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0507",
      "Description": "An attempt was made to change the access specification in a method override."
    },
    {
      "Code": "CS0508",
      "Title": "'Type 1': return type must be 'Type 2' to match overridden member 'Member Name'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0508",
      "Description": "An attempt was made to change the return type in a method override. To resolve this error, make sure both methods declare the same return type."
    },
    {
      "Code": "CS0509",
      "Title": "'class1' : cannot derive from sealed type 'class2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0509",
      "Description": "A sealed class cannot act as a base class. Structs are sealed by default."
    },
    {
      "Code": "CS0513",
      "Title": "'function' is abstract but it is contained in nonabstract class 'class'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0513",
      "Description": "A method cannot be an abstract member of a nonabstract class."
    },
    {
      "Code": "CS0514",
      "Title": "'constructor' : static constructor cannot have an explicit 'this' or 'base' constructor call",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0514",
      "Description": "Calling this in the static constructor is not allowed because the static constructor is called automatically before creating any instance of the class. Also, static constructors are not inherited, and cannot be called directly."
    },
    {
      "Code": "CS0515",
      "Title": "'function' : access modifiers are not allowed on static constructors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0515",
      "Description": "A static constructor cannot have an access modifier."
    },
    {
      "Code": "CS0516",
      "Title": "Constructor 'constructor' can not call itself",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0516",
      "Description": "A program cannot recursively call constructors."
    },
    {
      "Code": "CS0517",
      "Title": "'class' has no base class and cannot call a base constructor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0517",
      "Description": "CS0517 can occur only when the .NET runtime compiles the source code for the object class, which is the only class that has no base class."
    },
    {
      "Code": "CS0518",
      "Title": "Predefined type 'type' is not defined or imported",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0518",
      "Description": "The main cause for this problem is that the project is not importing mscorlib.dll, which defines the entire System namespace. This can be caused by one of the following:"
    },
    {
      "Code": "CS0520",
      "Title": "Predefined type 'name' is declared incorrectly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0520",
      "Description": "One or more files needed by the compiler were not found. Reinstall the .NET runtime."
    },
    {
      "Code": "CS0522",
      "Title": "'constructor' : structs cannot call base class constructors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0522",
      "Description": "A struct cannot call a base class constructor; remove the call to the base class constructor."
    },
    {
      "Code": "CS0523",
      "Title": "Struct member 'struct2 field' of type 'struct1' causes a cycle in the struct layout",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0523",
      "Description": "The definitions of two structs include recursive references. Change the struct definitions such that each does not define itself on the other. This limitation applies only to structs, since structs are value types. If using recursive references, declare your types as classes."
    },
    {
      "Code": "CS0524",
      "Title": "'type' : interfaces cannot declare types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0524",
      "Description": "An interface cannot contain a user-defined type; it should contain only methods and properties."
    },
    {
      "Code": "CS0525",
      "Title": "Interfaces cannot contain fields",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0525",
      "Description": "An interface can contain methods and properties but not fields."
    },
    {
      "Code": "CS0526",
      "Title": "Interfaces cannot contain constructors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0526",
      "Description": "Constructors cannot be defined for interfaces. A method is considered a constructor if it has the same name as the class and no return type."
    },
    {
      "Code": "CS0527",
      "Title": "Type 'type' in interface list is not an interface",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0527",
      "Description": "It is possible for a struct or interface to inherit from another interface but not from any other type."
    },
    {
      "Code": "CS0528",
      "Title": "'interface' is already listed in interface list",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0528",
      "Description": "An interface-inheritance list includes a duplicate. An interface can only be specified once in the inheritance list."
    },
    {
      "Code": "CS0529",
      "Title": "Inherited interface 'interface1' causes a cycle in the interface hierarchy of 'interface2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0529",
      "Description": "The inheritance list for an interface includes a direct or indirect reference to itself. An interface cannot inherit from itself."
    },
    {
      "Code": "CS0531",
      "Title": "'member' : interface members cannot have a definition",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0531",
      "Description": "Methods that are declared in an interface must be implemented in a class that inherits from it and not in the interface itself."
    },
    {
      "Code": "CS0533",
      "Title": "'derived-class member' hides inherited abstract member 'base-class member'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0533",
      "Description": "A base class method is hidden. Check the syntax of your declaration to see if it is correct."
    },
    {
      "Code": "CS0534",
      "Title": "'function1' does not implement inherited abstract member 'function2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0534",
      "Description": "A class is required to implement all the abstract members in the base class, unless the class is also abstract."
    },
    {
      "Code": "CS0535",
      "Title": "'class' does not implement interface member 'member'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0535",
      "Description": "A class derived from an interface, but the class did not implement one or more of the interface's members. A class must implement all members of interfaces from which it derives or else be declared abstract."
    },
    {
      "Code": "CS0537",
      "Title": "The class System.Object cannot have a base class or implement an interface",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0537",
      "Description": "CS0537 occurs when rebuilding the System class libraries, and where Object derives from another class. You are very unlikely to encounter this error. If you do, do not derive Object from a class or interface: it is the root of the entire .NET class hierarchy, and as such, does not derive from anything else."
    },
    {
      "Code": "CS0538",
      "Title": "'name' in explicit interface declaration is not an interface",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0538",
      "Description": "An attempt was made to explicitly declare an interface, but an interface was not specified."
    },
    {
      "Code": "CS0539",
      "Title": "'member' in explicit interface declaration is not a member of interface",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0539",
      "Description": "An attempt was made to explicitly declare an interface member that does not exist. You should either delete the declaration or change it so that it refers to a valid interface member."
    },
    {
      "Code": "CS0540",
      "Title": "'interface member' : containing type does not implement interface 'interface'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0540",
      "Description": "You attempted to implement an interface member in a class that does not derive from the interface. You should either delete the implementation of the interface member or add the interface to the base-class list of the class."
    },
    {
      "Code": "CS0541",
      "Title": "'declaration' : explicit interface declaration can only be declared in a class or struct",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0541",
      "Description": "An explicit interface declaration was found outside a class or struct."
    },
    {
      "Code": "CS0542",
      "Title": "'user-defined type' : member names cannot be the same as their enclosing type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0542",
      "Description": "The members of a class or struct cannot have the same name as the class or struct, unless the member is a constructor."
    },
    {
      "Code": "CS0543",
      "Title": "'enumeration' : the enumerator value is too large to fit in its type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0543",
      "Description": "A value that was assigned to an element in an enumeration is outside the range of the data type."
    },
    {
      "Code": "CS0544",
      "Title": "'property override': cannot override because 'non-property' is not a property",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0544",
      "Description": "An attempt was made to override a nonproperty data type as a property, which is not allowed."
    },
    {
      "Code": "CS0545",
      "Title": "'function' : cannot override because 'property' does not have an overridable get accessor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0545",
      "Description": "A try was made to define an override for a property accessor when the base class has no such definition to override. You can resolve this error by:"
    },
    {
      "Code": "CS0546",
      "Title": "'accessor' : cannot override because 'property' does not have an overridable set accessor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0546",
      "Description": "An attempt to override one of the accessor methods for a property failed because the accessor cannot be overridden. This error can occur if:"
    },
    {
      "Code": "CS0547",
      "Title": "'property' : property or indexer cannot have void type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0547",
      "Description": "void is invalid as a return value for a property."
    },
    {
      "Code": "CS0548",
      "Title": "'property' : property or indexer must have at least one accessor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0548",
      "Description": "A property must have at least one accessor (get or set) method."
    },
    {
      "Code": "CS0549",
      "Title": "'function' is a new virtual member in sealed class 'class'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0549",
      "Description": "A sealedclass cannot be used as a base class.  Therefore, it is useless to have a virtual method in sealed class."
    },
    {
      "Code": "CS0550",
      "Title": "'accessor' adds an accessor not found in interface member 'property'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0550",
      "Description": "The implementation of a property in a derived class contains an accessor that was not specified in the base interface."
    },
    {
      "Code": "CS0551",
      "Title": "Explicit interface implementation 'implementation' is missing accessor 'accessor'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0551",
      "Description": "A class that explicitly implements an interface's property must implement all the accessors that the interface defines."
    },
    {
      "Code": "CS0552",
      "Title": "'conversion routine' : user defined conversion to/from interface",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0552",
      "Description": "You cannot create a user-defined conversion to or from an interface. If you need the conversion routine, resolve this error by making the interface a class or derive a class from the interface."
    },
    {
      "Code": "CS0553",
      "Title": "'conversion routine' : user defined conversion to/from base class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0553",
      "Description": "User-defined conversions to values of a base class are not allowed; you do not need such an operator."
    },
    {
      "Code": "CS0554",
      "Title": "'conversion routine' : user defined conversion to/from derived class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0554",
      "Description": "User-defined conversions to values of a derived class are not allowed; you do not need such an operator."
    },
    {
      "Code": "CS0555",
      "Title": "User-defined operator cannot take an object of the enclosing type and convert to an object of the enclosing type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0555",
      "Description": "User-defined conversions to values of the enclosing class are not allowed; you do not need such an operator."
    },
    {
      "Code": "CS0556",
      "Title": "User-defined conversion must convert to or from the enclosing type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0556",
      "Description": "A user-defined conversion routine must convert to or from the class that contains the routine."
    },
    {
      "Code": "CS0557",
      "Title": "Duplicate user-defined conversion in type 'class'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0557",
      "Description": "Duplicate conversion routines are not allowed in a class."
    },
    {
      "Code": "CS0558",
      "Title": "User-defined operator 'operator' must be declared static and public",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0558",
      "Description": "Both the static and public access modifiers must be specified on user-defined operators."
    },
    {
      "Code": "CS0559",
      "Title": "The parameter type for ++ or -- operator must be the containing type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0559",
      "Description": "The method declaration for an operator overload must follow certain guidelines. For the ++ and -- operators, it is required that the parameter be of the same type as the type in which the operator is being overloaded."
    },
    {
      "Code": "CS0562",
      "Title": "The parameter of a unary operator must be the containing type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0562",
      "Description": "The method declaration for an operator overload must follow certain guidelines. For more information, see Operator overloading."
    },
    {
      "Code": "CS0563",
      "Title": "One of the parameters of a binary operator must be the containing type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0563",
      "Description": "The method declaration for an operator overload must follow certain guidelines."
    },
    {
      "Code": "CS0564",
      "Title": "The first operand of an overloaded shift operator must have the same type as the containing type, and the type of the second operand must be int",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0564",
      "Description": "You attempted to overload a shift operator (&lt;&lt; or &gt;&gt;) with incorrectly typed operands. The first operand must be the type and the second operand must be of the type int."
    },
    {
      "Code": "CS0567",
      "Title": "Interfaces cannot contain operators",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0567",
      "Description": "Operators are not permitted in interface definitions."
    },
    {
      "Code": "CS0568",
      "Title": "Structs cannot contain explicit parameterless constructors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0568",
      "Description": "Each struct already has a parameterless constructor that initializes the object to zero. Therefore, the constructors that you can create for a struct must take one or more parameters."
    },
    {
      "Code": "CS0569",
      "Title": "'method2' : cannot override 'method1' because it is not supported by the language",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0569",
      "Description": "This error occurs when you derive from a base class that was written in another language and when the compiler does not support the method that you are attempting to override."
    },
    {
      "Code": "CS0570",
      "Title": "Property, indexer, or event 'name' is not supported by the language; try directly calling accessor method 'name!'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0570",
      "Description": "This error occurs when using imported metadata that was generated by another compiler. Your code attempted to use a class member that the compiler cannot process."
    },
    {
      "Code": "CS0571",
      "Title": "'function' : cannot explicitly call operator or accessor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0571",
      "Description": "Certain operators have internal names. For example, op_Increment is the internal name of the ++ operator. You should not use or explicitly call such method names."
    },
    {
      "Code": "CS0572",
      "Title": "'type' : cannot reference a type through an expression; try 'path_to_type' instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0572",
      "Description": "An attempt was made to access a member of a class through an identifier, which is not permitted in this situation."
    },
    {
      "Code": "CS0573",
      "Title": "'field declaration' : cannot have instance field initializers in structs",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0573",
      "Description": "You cannot initialize an instance field of a struct. Fields of value types will be initialized to their default values, and reference-type fields will be initialized to null."
    },
    {
      "Code": "CS0574",
      "Title": "Name of destructor must match name of class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0574",
      "Description": "The name of a finalizer must be the class name preceded by a tilde (~)."
    },
    {
      "Code": "CS0575",
      "Title": "Only class types can contain destructors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0575",
      "Description": "A struct cannot contain a finalizer."
    },
    {
      "Code": "CS0576",
      "Title": "Namespace 'namespace' contains a definition conflicting with alias 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0576",
      "Description": "An attempt was made to use the same namespace twice."
    },
    {
      "Code": "CS0577",
      "Title": "The Conditional attribute is not valid on 'function' because it is a constructor, destructor, operator, or explicit interface implementation",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0577",
      "Description": "Conditional cannot be applied to the specified methods."
    },
    {
      "Code": "CS0578",
      "Title": "The Conditional attribute is not valid on 'function' because its return type is not void",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0578",
      "Description": "ConditionalAttribute cannot be applied to a method that has a return type other than void. The reason for this is that any other return type for a method may be needed by another part of your program."
    },
    {
      "Code": "CS0579",
      "Title": "Duplicate 'attribute' attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0579",
      "Description": "It is not possible to specify the same attribute more than once unless the attribute specifies AllowMultiple=true in its AttributeUsage."
    },
    {
      "Code": "CS0582",
      "Title": "The Conditional not valid on interface members",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0582",
      "Description": "ConditionalAttribute is not valid on an interface member."
    },
    {
      "Code": "CS0583",
      "Title": "Internal Compiler Error. An internal error has occurred in the compiler. To work around this problem, try simplifying or changing the program near the locations listed below. Locations at the top of the list are closer to the point at which the internal error occurred.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0583",
      "Description": "Note"
    },
    {
      "Code": "CS0584",
      "Title": "Internal Compiler Error: stage 'stage' symbol 'symbol'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0584",
      "Description": "Try to determine whether the compiler is failing because of its inability to parse unexpected syntax. If that is not the case, see Visual Studio feedback options."
    },
    {
      "Code": "CS0585",
      "Title": "Internal Compiler Error: stage 'stage'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0585",
      "Description": "Try to determine if the compiler is failing due to its inability to parse unexpected syntax. If that is not the case, see Visual Studio feedback options."
    },
    {
      "Code": "CS0586",
      "Title": "Internal Compiler Error: stage 'stage'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0586",
      "Description": "Try to determine if the compiler is failing due to its inability to parse unexpected syntax. If that is not the case, see Visual Studio feedback options."
    },
    {
      "Code": "CS0587",
      "Title": "Internal Compiler Error: stage 'stage'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0587",
      "Description": "Try to determine if the compiler is failing due to its inability to parse unexpected syntax. If this is not the case, see Visual Studio feedback options."
    },
    {
      "Code": "CS0588",
      "Title": "Internal Compiler Error: stage 'LEX'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0588",
      "Description": "Try to determine whether the compiler is failing because of its inability to parse unexpected syntax. If this is not the case, see Visual Studio feedback options."
    },
    {
      "Code": "CS0589",
      "Title": "Internal Compiler Error: stage 'PARSE'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0589",
      "Description": "Try to determine if the compiler is failing due to its inability to parse unexpected syntax. If that is not the case, see Visual Studio feedback options."
    },
    {
      "Code": "CS0590",
      "Title": "User-defined operators cannot return void",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0590",
      "Description": "The purpose of a user-defined operator is to return an object."
    },
    {
      "Code": "CS0591",
      "Title": "Invalid value for argument to 'attribute' attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0591",
      "Description": "An attribute was passed either an invalid argument or two mutually exclusive arguments."
    },
    {
      "Code": "CS0592",
      "Title": "Attribute 'attribute' is not valid on this declaration type. It is valid on 'type' declarations only.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0592",
      "Description": "When you define an attribute, you define what constructs it can be applied to by specifying an AttributeTargets value. In the following example, the MyAttribute attribute can be applied to interfaces only, because the AttributeUsage attribute specifies AttributeTargets.Interface. The error is generated because the attribute is applied to a class (class A)."
    },
    {
      "Code": "CS0594",
      "Title": "Floating-point constant is outside the range of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0594",
      "Description": "A value was assigned to a floating-point variable that is too large for the variables of this data type. See Integral Types Table for information about the range of values allowed in data types."
    },
    {
      "Code": "CS0596",
      "Title": "The Guid attribute must be specified with the ComImport attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0596",
      "Description": "The Guid attribute must be present when using the ComImport attribute."
    },
    {
      "Code": "CS0599",
      "Title": "Invalid value for named attribute argument 'argument'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0599",
      "Description": "An invalid argument was passed to an attribute."
    },
    {
      "Code": "CS0601",
      "Title": "The DllImport attribute must be specified on a method marked 'static' and 'extern'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0601",
      "Description": "The DllImport attribute was used on a method that did not have the correct access keywords."
    },
    {
      "Code": "CS0609",
      "Title": "Cannot set the IndexerName attribute on an indexer marked override",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0609",
      "Description": "The name attribute (IndexerNameAttribute) cannot be applied to an indexed property that is an override. For more information, see Indexers."
    },
    {
      "Code": "CS0610",
      "Title": "Field or property cannot be of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0610",
      "Description": "There are some types that cannot be used as fields or properties. These types include System.ArgIterator and System.TypedReference."
    },
    {
      "Code": "CS0611",
      "Title": "Array elements cannot be of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0611",
      "Description": "There are some types that cannot be used as the type of an array. These types include System.TypedReference and System.ArgIterator."
    },
    {
      "Code": "CS0616",
      "Title": "'class' is not an attribute class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0616",
      "Description": "An attempt was made to use a non-attribute class in an attribute block. All the attribute types need to be inherited from System.Attribute."
    },
    {
      "Code": "CS0617",
      "Title": "'reference' is not a valid named attribute argument because it is not a valid attribute parameter type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0617",
      "Description": "An attempt was made to access a private member of an attribute class."
    },
    {
      "Code": "CS0619",
      "Title": "'member' is obsolete: 'text'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0619",
      "Description": "A class member was marked with the Obsolete attribute, such that an error will be issued when the class member is referenced."
    },
    {
      "Code": "CS0620",
      "Title": "Indexers cannot have void type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0620",
      "Description": "The return type of an indexer cannot be void. An indexer must return a value."
    },
    {
      "Code": "CS0621",
      "Title": "'member' : virtual or abstract members cannot be private",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0621",
      "Description": "Private virtual or abstract members are not allowed."
    },
    {
      "Code": "CS0622",
      "Title": "Can only use array initializer expressions to assign to array types. Try using a new expression instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0622",
      "Description": "Syntax that is appropriate to initialize an array was used in the declaration of a non-array."
    },
    {
      "Code": "CS0623",
      "Title": "Array initializers can only be used in a variable or field initializer. Try using a new expression instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0623",
      "Description": "An attempt was made to initialize an array by using an array initializer in a context where it is not allowed."
    },
    {
      "Code": "CS0625",
      "Title": "'field': instance field types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0625",
      "Description": "When a struct is marked with an explicit StructLayout attribute, all fields in the struct must have the FieldOffset attribute. For more information, see StructLayoutAttribute Class."
    },
    {
      "Code": "CS0629",
      "Title": "Conditional member 'member' cannot implement interface member 'base class member' in type 'Type Name'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0629",
      "Description": "The Conditional attribute cannot be used on the implementation of an interface."
    },
    {
      "Code": "CS0631",
      "Title": "ref and out are not valid in this context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0631",
      "Description": "The declaration for an indexer cannot include the use of ref or out parameters."
    },
    {
      "Code": "CS0633",
      "Title": "The argument to the 'attribute' attribute must be a valid identifier",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0633",
      "Description": "Any argument that you pass to the ConditionalAttribute or IndexerNameAttribute attributes must be a valid identifier. This means that it may not contain characters such as &quot;+&quot; that are illegal when they occur in identifiers."
    },
    {
      "Code": "CS0635",
      "Title": "'attribute' : System.Interop.UnmanagedType.CustomMarshaller requires named arguments ComType and Marshal",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0635",
      "Description": "The ComType and Marshal arguments must be specified when the marshal format is System.Interop.UnmanagedType.CustomMarshaller."
    },
    {
      "Code": "CS0636",
      "Title": "The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0636",
      "Description": "You must use the StructLayout(LayoutKind.Explicit) attribute on the struct declaration, if it contains any members marked with the FieldOffset attribute. For more information, see FieldOffset."
    },
    {
      "Code": "CS0637",
      "Title": "The FieldOffset attribute is not allowed on static or const fields.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0637",
      "Description": "The FieldOffset attribute cannot be used on fields marked with static or const."
    },
    {
      "Code": "CS0641",
      "Title": "'attribute' : attribute is only valid on classes derived from System.Attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0641",
      "Description": "An attribute was used that can only be used on a class that derives from System.Attribute."
    },
    {
      "Code": "CS0643",
      "Title": "'arg' duplicate named attribute argument",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0643",
      "Description": "A parameter, arg, on a user-defined attribute was specified twice. For more information, see Attributes."
    },
    {
      "Code": "CS0644",
      "Title": "'class1' cannot derive from special class 'class2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0644",
      "Description": "Classes cannot explicitly inherit from any of the following base classes:"
    },
    {
      "Code": "CS0645",
      "Title": "Identifier too long",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0645",
      "Description": "A class name or other identifier can be no longer than 512 characters."
    },
    {
      "Code": "CS0646",
      "Title": "Cannot specify the DefaultMember attribute on a type containing an indexer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0646",
      "Description": "If a class or other type specifies System.Reflection.DefaultMemberAttribute, it cannot contain an indexer. For more information, see Properties."
    },
    {
      "Code": "CS0647",
      "Title": "Error emitting 'attribute' attribute -- 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0647",
      "Description": "The following sample generates CS0647:"
    },
    {
      "Code": "CS0648",
      "Title": "'type' is a type not supported by the language",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0648",
      "Description": "Metadata that was generated from another language, possibly C++, contained a type that was not marked as managed. Information about this type is included in the metadata, but the type is not available to programs written in C#."
    },
    {
      "Code": "CS0650",
      "Title": "Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0650",
      "Description": "An array was declared incorrectly. In C#, unlike in C and C++, the square brackets follow the type, not the variable name. Also, realize that the syntax for a fixed size buffer differs from that of an array."
    },
    {
      "Code": "CS0653",
      "Title": "Cannot apply attribute class 'class' because it is abstract",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0653",
      "Description": "An abstract custom attribute class cannot be used as an attribute."
    },
    {
      "Code": "CS0655",
      "Title": "'parameter' is not a valid named attribute argument because it is not a valid attribute parameter type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0655",
      "Description": "See Attributes for a discussion of valid parameter types for an attribute."
    },
    {
      "Code": "CS0656",
      "Title": "Missing compiler required member 'object.member'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0656",
      "Description": "One of the following problems exists:"
    },
    {
      "Code": "CS0662",
      "Title": "'method' cannot specify only Out attribute on a ref parameter. Use both In and Out attributes, or neither.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0662",
      "Description": "An interface method has a parameter that uses ref with just the Out attribute. A ref parameter that uses the Out attribute must also use the In attribute."
    },
    {
      "Code": "CS0663",
      "Title": "Cannot define overloaded methods that differ only on ref and out.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0663",
      "Description": "Methods that differ only on their use of in, ref and out on a parameter are not allowed."
    },
    {
      "Code": "CS0664",
      "Title": "Literal of type double cannot be implicitly converted to type 'type'; use an 'suffix' suffix to create a literal of this type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0664",
      "Description": "An assignment could not be completed; use a suffix to correct the instruction. The documentation for each type identifies the corresponding suffix for the type. For more information on conversions, see Casting and Type Conversions."
    },
    {
      "Code": "CS0666",
      "Title": "'member' : new protected member declared in struct",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0666",
      "Description": "A struct cannot be abstract and is always implicitly sealed. Because structs do not support inheritance, the concept of a protected member in a struct makes no sense. For more information, see Inheritance."
    },
    {
      "Code": "CS0667",
      "Title": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0667",
      "Description": "The feature you are attempting to use is now deprecated. Update your code to use the valid feature instead."
    },
    {
      "Code": "CS0668",
      "Title": "Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0668",
      "Description": "The values passed to the IndexerName attribute must be the same for all indexers in a type. For more information on the IndexerName attribute, see IndexerNameAttribute Class."
    },
    {
      "Code": "CS0669",
      "Title": "A class with the ComImport attribute cannot have a user-defined constructor.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0669",
      "Description": "The COM interop layer in the common language runtime supplies the constructor for ComImport classes. Consequently, a COM object can be used as a managed object in the runtime."
    },
    {
      "Code": "CS0670",
      "Title": "Field cannot have void type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0670",
      "Description": "A field was declared to be of type void."
    },
    {
      "Code": "CS0673",
      "Title": "System.Void cannot be used from C# -- use typeof(void) to get the void type object.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0673",
      "Description": "System.Void cannot be used in C#."
    },
    {
      "Code": "CS0674",
      "Title": "Do not use 'System.ParamArrayAttribute'. Use the 'params' keyword instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0674",
      "Description": "The C# compiler does not allow for the use of System.ParamArrayAttribute; use params instead."
    },
    {
      "Code": "CS0677",
      "Title": "'variable': a volatile field cannot be of the type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0677",
      "Description": "Fields declared with the volatile keyword must be one of the following types:"
    },
    {
      "Code": "CS0678",
      "Title": "'variable': a field can not be both volatile and readonly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0678",
      "Description": "Use of the volatile and readonly keywords is mutually exclusive."
    },
    {
      "Code": "CS0681",
      "Title": "The modifier 'abstract' is not valid on fields. Try using a property instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0681",
      "Description": "You cannot make a field abstract. You can, however, have an abstract property that accesses the field."
    },
    {
      "Code": "CS0682",
      "Title": "'type1' cannot implement 'type2' because it is not supported by the language",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0682",
      "Description": "This error occurs when you try to implement an interface written in another language and the compiler does not support the interface."
    },
    {
      "Code": "CS0683",
      "Title": "'explicitmethod' explicit method implementation cannot implement 'method' because it is an accessor",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0683",
      "Description": "The following sample generates CS0683:"
    },
    {
      "Code": "CS0685",
      "Title": "Conditional member 'member' cannot have an out parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0685",
      "Description": "When using the ConditionalAttribute attribute on a method, that method may not have an out parameter. This is because the value of the variable used for the out parameter would not be defined in the case that the method call is compiled to nothing. To avoid this error, remove the out parameter from the conditional method declaration, or don't use the Conditional Attribute."
    },
    {
      "Code": "CS0686",
      "Title": "Accessor 'accessor' cannot implement interface member 'member' for type 'type'. Use an explicit interface implementation.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0686",
      "Description": "Suggested: This error can occur when implementing an interface that contains method names which conflict with the auto-generated methods associated with a property or event. The get/set methods for properties are generated as get_property and set_property, and the add/remove methods for events are generated as add_event and remove_event. If an interface contains either of these methods, a conflict occurs. To avoid this error, implement the methods using an explicit interface implementation. To do this, specify the function as:"
    },
    {
      "Code": "CS0687",
      "Title": "The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0687",
      "Description": "This error occurs if you used something which the parser interpreted as a type in an unexpected place. A type or namespace name is valid only in a member access expression, using the member access (.) operator. This could occur if you used the global scope operator (::) in another context."
    },
    {
      "Code": "CS0689",
      "Title": "Cannot derive from 'identifier' because it is a type parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0689",
      "Description": "Base classes or interfaces for generic classes cannot be specified by a type parameter. Derive from a specific class or interface, or a specific generic class instead, or include the unknown type as a member."
    },
    {
      "Code": "CS0690",
      "Title": "Input file 'file' contains invalid metadata.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0690",
      "Description": "You are able to open the metadata file, but due to some localization problem, the metadata was corrupted. This is similar to error CS0009, except that you are able to open the metadata file."
    },
    {
      "Code": "CS0692",
      "Title": "Duplicate type parameter 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0692",
      "Description": "The same name may not be used more than once in a type parameter list. Rename or remove the duplicate type parameter(s)."
    },
    {
      "Code": "CS0694",
      "Title": "Type parameter 'identifier' has the same name as the containing type, or method",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0694",
      "Description": "You must use a different name for the type parameter since the type parameter's name cannot be identical to the type or method name that contains the type parameter."
    },
    {
      "Code": "CS0695",
      "Title": "'generic type' cannot implement both 'generic interface' and 'generic interface' because they may unify for some type parameter substitutions",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0695",
      "Description": "This error occurs when a generic class implements more than one parameterization of the same generic interface, and there exists a type parameter substitution which would make the two interfaces identical. To avoid this error, implement only one of the interfaces, or change the type parameters to avoid the conflict."
    },
    {
      "Code": "CS0698",
      "Title": "A generic type cannot derive from 'class' because it is an attribute class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0698",
      "Description": "Any class that derives from an attribute class is an attribute. Attributes are not allowed to be generic types."
    },
    {
      "Code": "CS0699",
      "Title": "'generic' does not define type parameter 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0699",
      "Description": "A type parameter was used in a generic definition that was not found in the declaration list of the type parameters for that generic. This can happen if the name used for the type parameter was inconsistent."
    },
    {
      "Code": "CS0701",
      "Title": "'identifier' is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0701",
      "Description": "This error occurs if a sealed type is used as a constraint. To resolve this error, use only non-sealed types as constraints."
    },
    {
      "Code": "CS0702",
      "Title": "Constraint cannot be special class 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0702",
      "Description": "The following types may not be used as constraints:  Object, Array, or ValueType."
    },
    {
      "Code": "CS0703",
      "Title": "Inconsistent accessibility: constraint type 'identifier' is less accessible than 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0703",
      "Description": "A constraint may not force the generic parameter to be less accessible than the generic class itself. In the following example, while the generic class C&lt;T&gt; is declared public, the constraint attempts to force T to implement an internal interface. Even if this were allowed, only clients with internal access would be able to create the parameter for the class, so in effect, the class could be used only by clients with internal access."
    },
    {
      "Code": "CS0704",
      "Title": "Cannot do member lookup in 'type' because it is a type parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0704",
      "Description": "An inner type cannot be specified through a type parameter. Try using the desired type explicitly."
    },
    {
      "Code": "CS0706",
      "Title": "Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0706",
      "Description": "This error occurs when an invalid construct is used in a constraint clause. To avoid this error, use an interface or non-sealed class instead of the construct that caused the error."
    },
    {
      "Code": "CS0708",
      "Title": "'field': cannot declare instance members in a static class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0708",
      "Description": "This error occurs if you declare a non-static member in a class that is declared static. It is not possible to create instances of static classes, so instance variables would not be meaningful. The static keyword should be applied to all members of static classes."
    },
    {
      "Code": "CS0709",
      "Title": "'derived class': cannot derive from static class 'base class'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0709",
      "Description": "A static class cannot be instantiated or derived from. That is, a static class cannot be a base class of any other class."
    },
    {
      "Code": "CS0710",
      "Title": "Static classes cannot have instance constructors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0710",
      "Description": "A static class cannot be instantiated, hence it has no need for constructors. To avoid this error, remove any constructors from static classes, or if you really want to construct instances, make the class non-static."
    },
    {
      "Code": "CS0711",
      "Title": "Static classes cannot contain destructors",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0711",
      "Description": "A static class cannot be instantiated, hence it has no need for constructors or finalizer. To avoid this error, remove finalizer from static classes, or, if you really want to construct and destroy instances, make the class non-static."
    },
    {
      "Code": "CS0712",
      "Title": "Cannot create an instance of the static class 'static class'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0712",
      "Description": "It is not possible to create instances of static classes. Static classes are designed to contain static fields and methods, but may not be instantiated."
    },
    {
      "Code": "CS0713",
      "Title": "Static class 'static type' cannot derive from type 'type'. Static classes must derive from object.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0713",
      "Description": "If this were allowed, the static class would inherit methods and non-static members from the base class, so it would not be static. Therefore, it is not allowed."
    },
    {
      "Code": "CS0714",
      "Title": "'static type' : static classes cannot implement interfaces",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0714",
      "Description": "Interfaces may define non-static methods on objects and hence may not be implemented by static classes. To resolve this error, make sure your class does not attempt to implement any interfaces."
    },
    {
      "Code": "CS0715",
      "Title": "'static class' : static classes cannot contain user defined operators",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0715",
      "Description": "User defined operators operate on instances of classes. Static classes cannot be instantiated, so it is not possible to create instances for operators to act upon. Hence, user defined operators are not allowed for static classes."
    },
    {
      "Code": "CS0716",
      "Title": "Cannot convert to static type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0716",
      "Description": "This error occurs if your code uses a cast to convert to a static type. Since it is not possible for an object to be an instance of a static type, casting to a static type can never be a meaningful cast."
    },
    {
      "Code": "CS0717",
      "Title": "'static class': static classes cannot be used as constraints",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0717",
      "Description": "Static classes cannot be extended as they only contain static members and not instance members. Because they cannot be extended, this makes them useless as type parameters and constraints, as no type can exist that is a specialization of a static class."
    },
    {
      "Code": "CS0718",
      "Title": "'type': static types cannot be used as type arguments",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0718",
      "Description": "Because a static type cannot be instantiated, it cannot be used as a generic argument. To resolve this error, remove the static type from the generic argument."
    },
    {
      "Code": "CS0719",
      "Title": "'type': array elements cannot be of static type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0719",
      "Description": "An array of static type does not make sense since array elements are instances, but it is not possible to create instances of static types."
    },
    {
      "Code": "CS0720",
      "Title": "'static class': cannot declare indexers in a static class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0720",
      "Description": "Indexers are not meaningful in static classes, since they can only be used with instances, and it is not possible to create instances of a static type."
    },
    {
      "Code": "CS0721",
      "Title": "'type': static types cannot be used as parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0721",
      "Description": "A static type is not meaningful as a parameter. Since no instances of static types may be created, no instance could ever be passed as a parameter."
    },
    {
      "Code": "CS0722",
      "Title": "'type': static types cannot be used as return types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0722",
      "Description": "A static type as a return type is not meaningful since instances of static types cannot be created."
    },
    {
      "Code": "CS0723",
      "Title": "Cannot declare variable of static type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0723",
      "Description": "Instances of static types cannot be created."
    },
    {
      "Code": "CS0724",
      "Title": "A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0724",
      "Description": "The following example generates CS0724 because of the throw statement inside the finally clause block:"
    },
    {
      "Code": "CS0726",
      "Title": "'format specifier' is not a valid format specifier",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0726",
      "Description": "This error occurs in the debugger. When you type a variable name into one of the debugger windows, you can follow it with a comma, and then a format specifier. Examples are: myInt, h or myString,nq. This error arises when the compiler does not recognize the Format Specifiers in C#."
    },
    {
      "Code": "CS0727",
      "Title": "Invalid format specifier",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0727",
      "Description": "This error occurs in the debugger. When you type a variable name into one of the debugger windows, you can follow it with a comma, and then a format specifier. Examples are: myInt, h; or myString,nq. This error arises when the compiler is completely unable to parse what you typed in. To resolve this error, retype the variable name, optionally followed by a comma and a valid Format Specifier."
    },
    {
      "Code": "CS0729",
      "Title": "Type 'type' is defined in this assembly, but a type forwarder is specified for it",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0729",
      "Description": "You cannot use a type forwarder for a type defined in the same assembly."
    },
    {
      "Code": "CS0730",
      "Title": "Cannot forward type 'type' because it is a nested type of 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0730",
      "Description": "This error is generated when you try to forward a nested class."
    },
    {
      "Code": "CS0731",
      "Title": "The type forwarder for type 'type' in assembly 'assembly' causes a cycle",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0731",
      "Description": "This error can only occur with improperly formed imported metadata. It cannot occur with only C# source."
    },
    {
      "Code": "CS0733",
      "Title": "Cannot forward generic type, 'GenericType&lt;&gt;'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0733",
      "Description": "The following example generates CS0733. Compile the first file as a library, and then reference it when you compile the second file."
    },
    {
      "Code": "CS0734",
      "Title": "The /moduleassemblyname option may only be specified when building a target type of 'module'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0734",
      "Description": "The compiler option ModuleAssemblyName should only be used when building a .netmodule. See ModuleAssemblyName (C# Compiler Option) for more information."
    },
    {
      "Code": "CS0735",
      "Title": "Invalid type specified as an argument for TypeForwardedTo attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0735",
      "Description": "The following sample generates CS0735."
    },
    {
      "Code": "CS0736",
      "Title": "'type name' does not implement interface member 'member name'. 'method name' cannot implement an interface member because it is static.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0736",
      "Description": "This error is generated when a static method is either implicitly or explicitly declared as an implementation of an interface member."
    },
    {
      "Code": "CS0737",
      "Title": "'type name' does not implement interface member 'member name'. 'method name' cannot implement an interface member because it is not public.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0737",
      "Description": "A method that implements an interface member must have public accessibility. All interface members are public."
    },
    {
      "Code": "CS0738",
      "Title": "'type name' does not implement interface member 'member name'. 'method name' cannot implement 'interface member' because it does not have the matching return type of ' type name'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0738",
      "Description": "The return value of an implementing method in a class must match the return value of the interface member that it implements."
    },
    {
      "Code": "CS0739",
      "Title": "'type name' duplicate TypeForwardedToAttribute.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0739",
      "Description": "An assembly can have no more than one TypeForwardedToAttribute to an external type."
    },
    {
      "Code": "CS0742",
      "Title": "A query body must end with a select clause or a group clause",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0742",
      "Description": "A query expression must terminate with either a select clause or a group clause without a continuation."
    },
    {
      "Code": "CS0743",
      "Title": "Expected contextual keyword 'on'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0743",
      "Description": "The pattern for a join clause is join...in...on...equals, as shown in this example:"
    },
    {
      "Code": "CS0744",
      "Title": "Expected contextual keyword 'equals'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0744",
      "Description": "The pattern for a join clause is join...in...on...equals, as shown in this example:"
    },
    {
      "Code": "CS0745",
      "Title": "Expected contextual keyword 'by'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0745",
      "Description": "The pattern for the group clause is group...by followed by an optional into, as shown in the following example:"
    },
    {
      "Code": "CS0746",
      "Title": "Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0746",
      "Description": "An anonymous type must be declared with a member assignment, simple name, or member access."
    },
    {
      "Code": "CS0747",
      "Title": "Invalid initializer member declarator.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0747",
      "Description": "An object initializer is used to assign values to properties or fields. Any expression which is not an assignment to a property or field is a compile-time error."
    },
    {
      "Code": "CS0748",
      "Title": "Inconsistent lambda parameter usage; parameter types must be all explicit or all implicit.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0748",
      "Description": "If a lambda expression has multiple input parameters, some parameters cannot use implicit typing while others use explicit typing."
    },
    {
      "Code": "CS0750",
      "Title": "A partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0750",
      "Description": "Because of their special behavior, partial methods are subject to restrictions as to the modifiers they can accept."
    },
    {
      "Code": "CS0751",
      "Title": "A partial method must be declared in a partial class or partial struct",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0751",
      "Description": "It is not possible to declare a partial method unless it is encapsulated inside a partial class or partial struct."
    },
    {
      "Code": "CS0752",
      "Title": "A partial method cannot have out parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0752",
      "Description": "A partial method cannot have an out parameter. Out parameters are not allowed because if the partial method is removed by the compiler then there is no guarantee that the out parameter is ever assigned."
    },
    {
      "Code": "CS0753",
      "Title": "Only methods, classes, structs, or interfaces may be partial.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0753",
      "Description": "The partial modifier can only be used with classes, structs, interfaces, and methods."
    },
    {
      "Code": "CS0754",
      "Title": "A partial method may not explicitly implement an interface method.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0754",
      "Description": "A partial method cannot be declared as an explicit implementation of a method defined in an interface."
    },
    {
      "Code": "CS0755",
      "Title": "Both partial method declarations must be extension methods or neither may be an extension method.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0755",
      "Description": "A partial method consists of a defining declaration (signature) and an optional implementing declaration (body). If the defining declaration is an extension method, the implementing declaration, if one is defined, must also be an extension method. And if the defining method is not an extension method, the implementing must not be one either."
    },
    {
      "Code": "CS0756",
      "Title": "A partial method may not have multiple defining declarations.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0756",
      "Description": "The defining declaration of a partial method is the part that specifies the method signature, but not the implementation (method body). A partial method must have exactly one defining declaration for each unique signature. Each overloaded version of a partial method must have its own defining declaration."
    },
    {
      "Code": "CS0757",
      "Title": "A partial method may not have multiple implementing declarations.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0757",
      "Description": "A partial method consists of exactly one defining declaration (signature) and one or zero implementing declarations (body). Multiple implementing declarations for the same identical defining declarations are not allowed. Partial methods may be overloaded, and each overloaded version may have one or zero implementing declarations."
    },
    {
      "Code": "CS0758",
      "Title": "Both partial method declarations must use a params parameter or neither may use a params parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0758",
      "Description": "If one part of a partial method specifies a params parameter, the other part must specify one also."
    },
    {
      "Code": "CS0759",
      "Title": "No defining declaration found for implementing declaration of partial method 'method'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0759",
      "Description": "A partial method must have a defining declaration that defines the signature (name, return type and parameters) of the method. The implementation or method body is optional."
    },
    {
      "Code": "CS0761",
      "Title": "Partial method declarations of 'method&lt;T&gt;' have inconsistent type parameter constraints.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0761",
      "Description": "If a partial method has an implementation, the generic type constraint must be identical to the constraint defined on the method signature."
    },
    {
      "Code": "CS0762",
      "Title": "Cannot create delegate from method 'method' because it is a partial method without an implementing declaration",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0762",
      "Description": "A partial method is not required to have an implementing declaration. However, a delegate does require that its encapsulated method have an implementation."
    },
    {
      "Code": "CS0763",
      "Title": "Both partial method declarations must be static or neither may be static.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0763",
      "Description": "A partial method declaration cannot have one part static and the other part not static."
    },
    {
      "Code": "CS0764",
      "Title": "Both partial method declarations must be unsafe or neither may be unsafe",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0764",
      "Description": "A partial method consists of a defining declaration (signature) and an optional implementing declaration (body). If the defining declaration has the unsafe modifier, the implementing declaration must also have it. Conversely, if the implementing declaration has the unsafe modifier, the defining declaration must also."
    },
    {
      "Code": "CS0765",
      "Title": "Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0765",
      "Description": "Although a call to a removed partial method is an expression, it is not an acceptable expression in an expression tree."
    },
    {
      "Code": "CS0766",
      "Title": "Partial methods must have a void return type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0766",
      "Description": "A partial method cannot return a value. Its return type must be void."
    },
    {
      "Code": "CS0811",
      "Title": "The fully qualified name for 'name' is too long for debug information. Compile without '/debug' option.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0811",
      "Description": "There are size constraints on variable and type names in debug information."
    },
    {
      "Code": "CS0815",
      "Title": "Cannot assign 'expression' to an implicitly typed local",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0815",
      "Description": "An expression that is used as the initializer for an implicitly typed variable must have a type. Because anonymous function expressions, method group expressions, and the null literal expression do not have a type, they are not appropriate initializers. An implicitly typed variable cannot be initialized with a null value in its declaration, although it can later be assigned a value of null.\nWith C# version 10 Lambda expressions and method groups with natural types can be used as initializers in var declarations."
    },
    {
      "Code": "CS0818",
      "Title": "Implicitly typed locals must be initialized",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0818",
      "Description": "An implicitly typed local variable must be initialized with a value at the same time that it is declared."
    },
    {
      "Code": "CS0819",
      "Title": "Implicitly-typed variables cannot have multiple declarators.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0819",
      "Description": "Multiple declarators are allowed in explicit type declarations, but not with implicitly typed variables."
    },
    {
      "Code": "CS0820",
      "Title": "Cannot assign array initializer to an implicitly typed local",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0820",
      "Description": "An implicitly typed array is an array whose element type is inferred by the compiler. It must be initialized by using the new[] modifier as shown in the example code."
    },
    {
      "Code": "CS0821",
      "Title": "Implicitly typed locals cannot be fixed",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0821",
      "Description": "Implicitly typed local variables and anonymous types are not supported in the fixed context."
    },
    {
      "Code": "CS0822",
      "Title": "Implicitly typed locals cannot be const",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0822",
      "Description": "Implicitly typed local variables are only necessary for storing anonymous types. In all other cases they are just a convenience. If the value of the variable never changes, just give it an explicit type. Attempting to use the readonly modifier with an implicitly typed local will generate CS0106."
    },
    {
      "Code": "CS0825",
      "Title": "The contextual keyword 'var' may only appear within a local variable declaration.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0825",
      "Description": "The following code generates CS0825 because var is used on a class field:"
    },
    {
      "Code": "CS0826",
      "Title": "No best type found for implicitly typed array.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0826",
      "Description": "Array elements must all be the same type or implicitly convertible to the same type according to the type inference rules used by the compiler. The best type must be one of the types present in the array expression. Elements will not be converted to a new type such as object. For an implicitly typed array, the compiler must infer the array type based on the type of elements assigned to it."
    },
    {
      "Code": "CS0828",
      "Title": "Cannot assign 'expression' to anonymous type property.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0828",
      "Description": "An anonymous type cannot be initialized with a null value or an unsafe type, or a method group or anonymous function."
    },
    {
      "Code": "CS0831",
      "Title": "An expression tree may not contain a base access.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0831",
      "Description": "A base access means to make a function call that would ordinarily be a virtual function call as a non-virtual function call on the base class method. This is not allowed in the expression tree itself, but you can invoke a helper method in your class that invokes the base class method."
    },
    {
      "Code": "CS0832",
      "Title": "An expression tree may not contain an assignment operator.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0832",
      "Description": "An expression tree does not preserve variable state or have any concept of a storage location."
    },
    {
      "Code": "CS0833",
      "Title": "An anonymous type cannot have multiple properties with the same name.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0833",
      "Description": "An anonymous type, just like any type, cannot have two properties that have the same name."
    },
    {
      "Code": "CS0834",
      "Title": "A lambda expression must have an expression body to be converted to an expression tree.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0834",
      "Description": "Lambdas that are translated to expression trees must be expression lambdas; statement lambdas and anonymous methods can only be converted to delegate types."
    },
    {
      "Code": "CS0835",
      "Title": "Cannot convert lambda to an expression tree whose type argument 'type' is not a delegate type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0835",
      "Description": "If a lambda expression is converted to an expression tree, the expression tree must have a delegate type for its argument. Furthermore, the lambda expression must be convertible to the delegate type."
    },
    {
      "Code": "CS0836",
      "Title": "Cannot use anonymous type in a constant expression.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0836",
      "Description": "The only things allowed in a constant expression are named constants, literals, and mathematical expressions that combine constant expressions."
    },
    {
      "Code": "CS0837",
      "Title": "The first operand of an 'is' or 'as' operator may not be a lambda expression, anonymous method, or method group.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0837",
      "Description": "Lambda expressions, anonymous methods and method groups may not be used on the left side of is or as."
    },
    {
      "Code": "CS0838",
      "Title": "An expression tree may not contain a multidimensional array initializer.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0838",
      "Description": "Multidimensional arrays in expression trees cannot be initialized by using an array initializer."
    },
    {
      "Code": "CS0839",
      "Title": "Argument missing.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0839",
      "Description": "An argument is missing in the method call."
    },
    {
      "Code": "CS0840",
      "Title": "'Property name' must declare a body because it is not marked abstract or extern. Automatically implemented properties must define both get and set accessors.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0840",
      "Description": "Unless a regular property is marked as abstract or extern, or is a member of a partial type, it must supply a body. Auto-implemented properties do not provide accessor bodies, but they must specify both accessors. To create a read-only auto-implemented property, make the set accessor private."
    },
    {
      "Code": "CS0841",
      "Title": "Cannot use local variable 'name' before it is declared.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0841",
      "Description": "A variable must be declared before it is used."
    },
    {
      "Code": "CS0842",
      "Title": "Automatically implemented properties cannot be used inside a type marked with StructLayout(LayoutKind.Explicit).",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0842",
      "Description": "Auto-implemented properties have their backing fields provided by the compiler and the field is not accessible to source code. Therefore, they are not compatible with LayoutKind.Explicit."
    },
    {
      "Code": "CS0843",
      "Title": "Backing field for automatically implemented property 'name' must be fully assigned before control is returned to the caller. Consider calling the parameterless constructor from a constructor initializer.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0843",
      "Description": "To assign a value to an automatically-implemented property from a constructor, you must first invoke the parameterless constructor to create the object."
    },
    {
      "Code": "CS0844",
      "Title": "Cannot use local variable 'name' before it is declared. The declaration of the local variable hides the field 'name'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0844",
      "Description": "An identifier can have only one meaning in a given block. Local variables that have the same name as class fields can hide the field by introducing a second meaning for the identifier. Therefore the compiler generates an error when you refer to a class field in a method, and then declare a local variable by the same name."
    },
    {
      "Code": "CS0845",
      "Title": "An expression tree lambda may not contain a coalescing operator with a null literal left-hand side.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0845",
      "Description": "Because null by itself does not have a type, the null coalescing operator cannot operate on it."
    },
    {
      "Code": "CS1001",
      "Title": "Identifier expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1001",
      "Description": "You did not supply an identifier. An identifier is the name of a class, struct, namespace, method, variable and so on that you provide."
    },
    {
      "Code": "CS1002",
      "Title": "; expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1002",
      "Description": "The compiler detected a missing semicolon. A semicolon is required at the end of every statement in C#. A statement may span more than one line."
    },
    {
      "Code": "CS1003",
      "Title": "Syntax error, 'char' expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1003",
      "Description": "The compiler will generate this error for any one of several error conditions. Review your code to find the syntax error."
    },
    {
      "Code": "CS1004",
      "Title": "Duplicate 'modifier' modifier",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1004",
      "Description": "A duplicate modifier, such as an access modifier, was detected."
    },
    {
      "Code": "CS1007",
      "Title": "Property accessor already defined",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1007",
      "Description": "When you declare a property, you must also declare its accessor methods. However, a property cannot have more than one get accessor method or more than one set accessor method."
    },
    {
      "Code": "CS1008",
      "Title": "Type byte, sbyte, short, ushort, int, uint, long, or ulong expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1008",
      "Description": "Certain data types, such as enums, can only be declared to hold data of specified types."
    },
    {
      "Code": "CS1009",
      "Title": "Unrecognized escape sequence",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1009",
      "Description": "An unexpected character follows a backslash (\\) in a string. The compiler expects one of the valid escape characters. For more information, see Character Escapes."
    },
    {
      "Code": "CS1010",
      "Title": "Newline in constant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1010",
      "Description": "A string was not properly delimited."
    },
    {
      "Code": "CS1011",
      "Title": "Empty character literal",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1011",
      "Description": "A char was declared and initialized to a null. The initialization of a char must specify a character."
    },
    {
      "Code": "CS1012",
      "Title": "Too many characters in character literal",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1012",
      "Description": "An attempt was made to initialize a char constant with more than one character."
    },
    {
      "Code": "CS1013",
      "Title": "Invalid number",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1013",
      "Description": "The compiler detected a malformed number. For more information on integral types, see the Integral Types Table."
    },
    {
      "Code": "CS1014",
      "Title": "A get or set accessor expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1014",
      "Description": "A method declaration was found in a property declaration. You can only declare get and set methods in a property."
    },
    {
      "Code": "CS1015",
      "Title": "An object, string, or class type expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1015",
      "Description": "An attempt was made to pass a predefined data type into a catch block. Only data types that derive from System.Exception can be passed into a catch block. For more information on exceptions, see Exceptions and Exception Handling."
    },
    {
      "Code": "CS1016",
      "Title": "Named attribute argument expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1016",
      "Description": "Unnamed attribute arguments must appear before the named arguments."
    },
    {
      "Code": "CS1017",
      "Title": "Catch clauses cannot follow the general catch clause of a try statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1017",
      "Description": "A catch block that does not take any parameters must be the last in a series of catch blocks. For more information on exceptions, see Exceptions and Exception Handling."
    },
    {
      "Code": "CS1018",
      "Title": "Keyword 'this' or 'base' expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1018",
      "Description": "The compiler encountered an incomplete constructor declaration."
    },
    {
      "Code": "CS1019",
      "Title": "Overloadable unary operator expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1019",
      "Description": "Something that looks like an overloaded unary operator has been declared, but the operator is missing or is in the wrong location in the signature."
    },
    {
      "Code": "CS1020",
      "Title": "Overloadable binary operator expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1020",
      "Description": "An attempt was made to define an operator overload, but the operator was not an overloadable binary operator, which takes two parameters. For the list of overloadable operators, see the Overloadable operators section of the Operator overloading article."
    },
    {
      "Code": "CS1021",
      "Title": "Integral constant is too large",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1021",
      "Description": "A value represented by an integer literal is greater than UInt64.MaxValue."
    },
    {
      "Code": "CS1022",
      "Title": "Type or namespace definition, or end-of-file expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1022",
      "Description": "A source-code file does not have a matching set of braces."
    },
    {
      "Code": "CS1023",
      "Title": "Embedded statement cannot be a declaration or labeled statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1023",
      "Description": "An embedded statement, such as the statements following an if statement, can contain neither declarations nor labeled statements."
    },
    {
      "Code": "CS1024",
      "Title": "Preprocessor directive expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1024",
      "Description": "A line began with the pound symbol (#), but the subsequent string was not a valid preprocessor directive."
    },
    {
      "Code": "CS1025",
      "Title": "Single-line comment or end-of-line expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1025",
      "Description": "A line with a preprocessor directive cannot have a multiline comment."
    },
    {
      "Code": "CS1026",
      "Title": ") expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1026",
      "Description": "An incomplete statement was found."
    },
    {
      "Code": "CS1027",
      "Title": "#endif directive expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1027",
      "Description": "A matching #endif preprocessor directive was not found for a specified #if directive. Or, the compiler may have found a #endregion directive when there was no matching #region directive inside a #if block."
    },
    {
      "Code": "CS1028",
      "Title": "Unexpected preprocessor directive",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1028",
      "Description": "A preprocessor directive was found but not expected."
    },
    {
      "Code": "CS1029",
      "Title": "#error: 'text'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1029",
      "Description": "Displays the text of an error defined with the #error directive."
    },
    {
      "Code": "CS1031",
      "Title": "Type expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1031",
      "Description": "A type parameter is expected."
    },
    {
      "Code": "CS1032",
      "Title": "Cannot define/undefine preprocessor symbols after first token in file",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1032",
      "Description": "The #define and #undef preprocessor directives must be used at the beginning of a program, before any other keywords, such as those used in the namespace declaration."
    },
    {
      "Code": "CS1033",
      "Title": "Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1033",
      "Description": "A source-code file exceeded the maximum allowable number of lines that the compiler can process. To resolve this error, create two or more source-code files from the original file. The maximum number of lines is 268,435,454 lines. If you are using /debug, using more than 16,707,566 will result in corrupted debug information."
    },
    {
      "Code": "CS1034",
      "Title": "Compiler limit exceeded: Line cannot exceed 'number' characters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1034",
      "Description": "The limit for the number of characters allowed on a line is 16,777,214."
    },
    {
      "Code": "CS1035",
      "Title": "End-of-file found, '*/' expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1035",
      "Description": "An opening comment delimiter was not matched with a closing delimiter."
    },
    {
      "Code": "CS1036",
      "Title": "( or . expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1036",
      "Description": "The XML in a DocumentationFile comment was badly formed."
    },
    {
      "Code": "CS1037",
      "Title": "Overloadable operator expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1037",
      "Description": "When specifying a comment with DocumentationFile, the compiler encountered an invalid link."
    },
    {
      "Code": "CS1038",
      "Title": "#endregion directive expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1038",
      "Description": "A #region directive did not have a matching #endregion directive."
    },
    {
      "Code": "CS1039",
      "Title": "Unterminated string literal",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1039",
      "Description": "The compiler detected an ill-formed string literal."
    },
    {
      "Code": "CS1040",
      "Title": "Preprocessor directives must appear as the first non-white-space character on a line",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1040",
      "Description": "A preprocessor directive was found on a line and was not the first token on the line. A directive must be the first token on the line."
    },
    {
      "Code": "CS1041",
      "Title": "Identifier expected, 'keyword' is a keyword",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1041",
      "Description": "A reserved word for the C# language was found where an identifier was expected. Replace the keyword with a user-specified identifier."
    },
    {
      "Code": "CS1043",
      "Title": "{ or ; expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1043",
      "Description": "A property accessor was declared incorrectly. For more information, see Using Properties."
    },
    {
      "Code": "CS1044",
      "Title": "Cannot use more than one type in a for, using, fixed, or declaration statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1044",
      "Description": "The compiler found an invalid statement."
    },
    {
      "Code": "CS1055",
      "Title": "An add or remove accessor expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1055",
      "Description": "If your event is not declared as a field, it must define both add and remove accessor functions."
    },
    {
      "Code": "CS1056",
      "Title": "Unexpected character 'character'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1056",
      "Description": "The C# compiler encountered an unexpected character, and is unable to identify the token currently being processed. For example, if the compiler encounters a Euro-character in the middle of processing an identifier, it will be unable to classify the identifier, since a Euro-character would only be valid inside a string, and the compiler knows it is not processing a string."
    },
    {
      "Code": "CS1057",
      "Title": "'member': static classes cannot contain protected members",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1057",
      "Description": "This error is generated by declaring a protected member inside a static class."
    },
    {
      "Code": "CS1059",
      "Title": "The operand of an increment or decrement operator must be a variable, property or indexer.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1059",
      "Description": "This error is raised when you try to increment or decrement a constant value. It can also occur if you try to increment an expression such as (a+b)++."
    },
    {
      "Code": "CS1061",
      "Title": "'type' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'type' could be found (are you missing a using directive or an assembly reference?).",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1061",
      "Description": "This error occurs when you try to call a method or access a class member that does not exist."
    },
    {
      "Code": "CS1100",
      "Title": "Method 'name' has a parameter modifier 'this' which is not on the first parameter.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1100",
      "Description": "The this modifier is allowed only on the first parameter of a method, which indicates to the compiler that the method is an extension method."
    },
    {
      "Code": "CS1101",
      "Title": "The parameter modifier 'ref' cannot be used with 'this'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1101",
      "Description": "When the this keyword modifies the first parameter of a static method, it signals to the compiler that the method is an extension method. No other modifiers are needed or allowed on the first parameter of an extension method."
    },
    {
      "Code": "CS1102",
      "Title": "The parameter modifier 'out' cannot be used with 'this'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1102",
      "Description": "When the this keyword modifies the first parameter of a static method, it signals to the compiler that the method is an extension method. No other modifiers are needed or allowed on the first parameter of an extension method."
    },
    {
      "Code": "CS1103",
      "Title": "The first parameter of an extension method cannot be of type 'type'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1103",
      "Description": "The first parameter of an extension method cannot be a pointer type."
    },
    {
      "Code": "CS1104",
      "Title": "A parameter array cannot be used with 'this' modifier on an extension method.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1104",
      "Description": "The first parameter of an extension method cannot be a params array."
    },
    {
      "Code": "CS1105",
      "Title": "Extension methods must be static.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1105",
      "Description": "Extension methods must be declared as static methods in a non-generic static class."
    },
    {
      "Code": "CS1106",
      "Title": "Extension methods must be defined in a non generic static class.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1106",
      "Description": "Extension methods must be defined as static methods in a non-generic static class."
    },
    {
      "Code": "CS1107",
      "Title": "A parameter can only have one 'modifier name' modifier.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1107",
      "Description": "It is an error for parameter modifiers such as this, ref, in, and out to appear more than one time in a parameter definition."
    },
    {
      "Code": "CS1108",
      "Title": "A parameter cannot have all the specified modifiers; there are too many modifiers on the parameter.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1108",
      "Description": "Certain combinations of parameter modifiers, such as in, ref, and out, are not allowed because they have mutually exclusive meanings for the compiler."
    },
    {
      "Code": "CS1109",
      "Title": "Extension Methods must be defined on top level static classes, 'name' is a nested class.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1109",
      "Description": "Extension methods cannot be defined in nested classes."
    },
    {
      "Code": "CS1110",
      "Title": "Cannot use 'this' modifier on first parameter of method declaration without a reference to System.Core.dll. Add a reference to System.Core.dll or remove 'this' modifier from the method declaration.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1110",
      "Description": "Extension methods are supported on version 3.5 and later of .NET Framework. Extension methods generate metadata which marks the method with an attribute. The attribute class is in system.core.dll."
    },
    {
      "Code": "CS1112",
      "Title": "Do not use 'System.Runtime.CompilerServices.ExtensionAttribute'. Use the 'this' keyword instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1112",
      "Description": "This error is generated when the ExtensionAttribute is used on a non-static class that contains extension methods. If this attribute is used on a static class, another error, such as CS0708: &quot;Cannot declare instance members in a static class,&quot; might occur."
    },
    {
      "Code": "CS1113",
      "Title": "Extension methods 'name' defined on value type 'name' cannot be used to create delegates.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1113",
      "Description": "Extension methods that are defined for class types can be used to create delegates. Extension methods that are defined for value types cannot."
    },
    {
      "Code": "CS1501",
      "Title": "No overload for method 'method' takes 'number' arguments",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1501",
      "Description": "A call was made to a class method, but no definition of the method takes the specified number of arguments."
    },
    {
      "Code": "CS1502",
      "Title": "The best overloaded method match for 'name' has some invalid arguments",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1502",
      "Description": "This error occurs when the argument types being passed to the method do not match the parameter types of that method. If the called method is overloaded, then none of the overloaded versions has a signature that matches the argument types being passed."
    },
    {
      "Code": "CS1503",
      "Title": "Argument 'number' cannot convert from TypeA to TypeB",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1503",
      "Description": "The type of one argument in a method does not match the type that was passed when the class was instantiated. This error typically appears along with CS1502. See CS1502 for a discussion of how to resolve this error."
    },
    {
      "Code": "CS1504",
      "Title": "Source file 'file' could not be opened ('reason')",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1504",
      "Description": "A source file could not be opened or read by the compiler. The file may be locked by another application, or there could be some other operating system problem. The message includes the operating system's reason for why the compiler could not open or read the file."
    },
    {
      "Code": "CS1507",
      "Title": "Cannot link resource file 'file' when building a module",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1507",
      "Description": "LinkResources was used in the same compilation with the module option on the TargetType, which is not allowed. For example, the following options would generate CS1507:"
    },
    {
      "Code": "CS1508",
      "Title": "Resource identifier 'identifier' has already been used in this assembly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1508",
      "Description": "In a compilation, the same identifier (identifier) was passed to two or more Resources or LinkResources compiler options."
    },
    {
      "Code": "CS1509",
      "Title": "Referenced file 'file' is not an assembly; use AddModules option instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1509",
      "Description": "An output file (output file 1), produced in a compilation that used the module element of the TargetType (does not have an assembly manifest), was specified to References. So, rather than appending an assembly to the assembly for the current program, the metadata information in output file 1 will be added to the assembly for the current program."
    },
    {
      "Code": "CS1510",
      "Title": "A ref or out argument must be an assignable variable",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1510",
      "Description": "Only a variable can be passed as a ref parameter in a method call. A ref value is like passing a pointer."
    },
    {
      "Code": "CS1511",
      "Title": "Keyword 'base' is not available in a static method",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1511",
      "Description": "The base keyword was used in a static method. base can only be called in an instance constructor, instance method, or instance accessor."
    },
    {
      "Code": "CS1512",
      "Title": "Keyword 'base' is not available in the current context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1512",
      "Description": "The base keyword was used outside of a method, property, or constructor."
    },
    {
      "Code": "CS1513",
      "Title": "} expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1513",
      "Description": "The compiler expected a closing curly brace (}) that was not found."
    },
    {
      "Code": "CS1514",
      "Title": "{ expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1514",
      "Description": "The compiler expected an opening curly brace ({) that was not found."
    },
    {
      "Code": "CS1515",
      "Title": "'in' expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1515",
      "Description": "In a foreach, in statement, the &quot;in&quot; part is missing."
    },
    {
      "Code": "CS1517",
      "Title": "Invalid preprocessor expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1517",
      "Description": "The compiler encountered an invalid preprocessor expression."
    },
    {
      "Code": "CS1518",
      "Title": "Expected class, delegate, enum, interface, or struct",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1518",
      "Description": "A declaration was found that is not supported in a namespace. Inside a namespace, the compiler accepts only classes, structs, enums, interfaces, namespaces, and delegates."
    },
    {
      "Code": "CS1519",
      "Title": "Invalid token 'token' in class, struct, or interface member declaration",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1519",
      "Description": "This error is generated whenever a token is encountered in a location where it does not belong. A token is a keyword; an identifier (the name of a class, struct, method, and so on); a string, character, or numeric literal value such as 108, &quot;Hello&quot;, or 'A'; or an operator or punctuator such as == or ;."
    },
    {
      "Code": "CS1520",
      "Title": "Method must have a return type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1520",
      "Description": "A method that is declared in a class, struct, or interface must have an explicit return type. In the following example, the Square method has a return value of string:"
    },
    {
      "Code": "CS1521",
      "Title": "Invalid base type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1521",
      "Description": "A base class specification was ill formed."
    },
    {
      "Code": "CS1524",
      "Title": "Expected catch or finally",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1524",
      "Description": "A try block must be followed by a catch or finally block."
    },
    {
      "Code": "CS1525",
      "Title": "Invalid expression term 'character'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1525",
      "Description": "The compiler detected an invalid character in an expression."
    },
    {
      "Code": "CS1526",
      "Title": "A new expression requires (), [], or {} after type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1526",
      "Description": "The new operator, used to dynamically allocate memory for an object, was not specified correctly."
    },
    {
      "Code": "CS1527",
      "Title": "Elements defined in a namespace cannot be explicitly declared as private, protected, protected internal or private protected.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1527",
      "Description": "Type declarations in a namespace can have either public or internal access. If no accessibility is specified, internal is the default."
    },
    {
      "Code": "CS1528",
      "Title": "Expected ; or = (cannot specify constructor arguments in declaration)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1528",
      "Description": "A reference to a class was formed as if an object to the class was being created. For example, there was an attempt to pass a variable to a constructor. Use the new operator to create an object of a class."
    },
    {
      "Code": "CS1529",
      "Title": "A using clause must precede all other elements defined in the namespace except extern alias declarations",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1529",
      "Description": "A using clause must appear first in a namespace."
    },
    {
      "Code": "CS1530",
      "Title": "Keyword 'new' is not allowed on elements defined in a namespace",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1530",
      "Description": "It is not necessary to specify the new keyword on any construct that is in a namespace."
    },
    {
      "Code": "CS1534",
      "Title": "Overloaded binary operator 'operator' takes two parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1534",
      "Description": "The definition of a binary operator must take two parameters."
    },
    {
      "Code": "CS1535",
      "Title": "Overloaded unary operator 'operator' takes one parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1535",
      "Description": "The definition of a unary operator must take one parameter."
    },
    {
      "Code": "CS1536",
      "Title": "Invalid parameter type void",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1536",
      "Description": "It is not necessary or valid to specify a void parameter other than a void pointer."
    },
    {
      "Code": "CS1537",
      "Title": "The using alias 'alias' appeared previously in this namespace",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1537",
      "Description": "You defined a symbol twice as an alias for a namespace. A symbol can only be defined once."
    },
    {
      "Code": "CS1540",
      "Title": "Cannot access protected member 'member' via a qualifier of type 'type1'; the qualifier must be of type 'type2' (or derived from it)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1540",
      "Description": "A derived class cannot access protected members of its base class through an instance of the base class. An instance of the base class declared in the derived class might, at run time, be an instance of another type that is derived from the same base but is not otherwise related to the derived class. Because protected members can be accessed only by derived types, any attempts to access protected members that might not be valid at run time are marked by the compiler as not valid."
    },
    {
      "Code": "CS1541",
      "Title": "Invalid reference option: 'symbol' — cannot reference directories",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1541",
      "Description": "The compiler detected an attempt to specify a directory rather than a specific file. For example, when you use the References compiler option, you must specify a file; it is not possible to specify a directory."
    },
    {
      "Code": "CS1542",
      "Title": "'dll' cannot be added to this assembly because it already is an assembly; use '/R' option instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1542",
      "Description": "The file that was referenced with the AddModules compiler option was not built with module element of the TargetType compiler option; use References to reference the file in this compilation."
    },
    {
      "Code": "CS1545",
      "Title": "Property, indexer, or event 'property' is not supported by the language; try directly calling accessor methods 'set accessor' or 'get accessor'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1545",
      "Description": "The code is consuming an object that has a non-default indexer and tried to use the indexed syntax. To resolve this error, call the property's get or set accessor method."
    },
    {
      "Code": "CS1546",
      "Title": "Property, indexer, or event 'property' is not supported by the language; try directly calling accessor method 'accessor'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1546",
      "Description": "Your code is consuming an object that has a default indexed property and tried to use the indexed syntax. To resolve this error, call the property's accessor method. For more information on indexers and properties, see Indexers."
    },
    {
      "Code": "CS1547",
      "Title": "Keyword 'void' cannot be used in this context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1547",
      "Description": "The compiler detected an invalid use of the void keyword."
    },
    {
      "Code": "CS1548",
      "Title": "Cryptographic failure while signing assembly 'assembly' — 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1548",
      "Description": "CS1548 occurs when assembly signing fails. This is usually due to an invalid key file name, an invalid key file path, or a corrupt key file."
    },
    {
      "Code": "CS1551",
      "Title": "Indexers must have at least one parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1551",
      "Description": "An indexer that takes no arguments was declared."
    },
    {
      "Code": "CS1552",
      "Title": "Array type specifier, [], must appear before parameter name",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1552",
      "Description": "The position of the array type specifier is after the variable name in the array declaration."
    },
    {
      "Code": "CS1553",
      "Title": "Declaration is not valid; use 'modifier operator &lt;dest-type&gt; (...' instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1553",
      "Description": "The return type for a conversion operator must immediately precede the parameter list, and modifier is either implicit or explicit."
    },
    {
      "Code": "CS1554",
      "Title": "Declaration is not valid; use '&lt;type&gt; operator op (...' instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1554",
      "Description": "The return type of an overloaded operator must appear before the operator keyword."
    },
    {
      "Code": "CS1555",
      "Title": "Could not find 'class' specified for Main method",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1555",
      "Description": "A class was specified to the MainEntryPoint compiler option, but the class name was not found in the source code."
    },
    {
      "Code": "CS1556",
      "Title": "'construct' specified for Main method must be a valid class or struct",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1556",
      "Description": "The MainEntryPoint compiler option was passed an identifier that was not a class name."
    },
    {
      "Code": "CS1557",
      "Title": "Cannot use 'class' for Main method because it is in a different output file",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1557",
      "Description": "The MainEntryPoint compiler option was specified for one output file in a multi-output file compilation. However, the class was not found in the source code for the /main compilation; it was found in a source code file for one of the other output files in the compilation."
    },
    {
      "Code": "CS1558",
      "Title": "'class' does not have a suitable static Main method",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1558",
      "Description": "The MainEntryPoint compiler option specified a class in which to look for a Main method. However, the Main method was not defined correctly."
    },
    {
      "Code": "CS1559",
      "Title": "Cannot use 'object' for Main method because it is imported",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1559",
      "Description": "An invalid class was specified to the StartupObject compiler option; the class cannot be used as a location for the Main method."
    },
    {
      "Code": "CS1560",
      "Title": "Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1560",
      "Description": "The file name that was specified with #line exceeded _MAX_PATH (256 characters) or the line on which #line was found exceeded 2000 characters."
    },
    {
      "Code": "CS1561",
      "Title": "Output filename is too long or invalid",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1561",
      "Description": "The output file name cannot be longer than 256 characters, and may not contain invalid characters, such as the Euro symbol, a question mark, or a backslash, among others."
    },
    {
      "Code": "CS1562",
      "Title": "Outputs without source must have the /out option specified",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1562",
      "Description": "The compilation could create an output file, but there was no source code file as input from which the name of the output file could be implied. For example, you may be trying to compile a metadata- or resource-only file."
    },
    {
      "Code": "CS1563",
      "Title": "Output 'output file' does not have any source files",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1563",
      "Description": "The OutputAssembly compiler option was specified, but no source code files follow. You should either not use OutputAssembly, or you should specify the source code files following OutputAssembly."
    },
    {
      "Code": "CS1564",
      "Title": "Conflicting options specified: Win32 resource file; Win32 manifest.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1564",
      "Description": "If you use the /Win32res compiler option, you must include the custom Win32 manifest (if it is required) in the resource file. You cannot provide a custom Win32 manifest separately from a Win32 resource file. Use the /win32manifest option only if you are not specifying a win32 resource file."
    },
    {
      "Code": "CS1565",
      "Title": "Conflicting options specified: Win32 resource file; Win32 icon",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1565",
      "Description": "It is not valid to specify both the Win32Resource compiler option and the Win32Icon compiler option in the same compilation."
    },
    {
      "Code": "CS1566",
      "Title": "Error reading resource file 'file' — 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1566",
      "Description": "The compiler had trouble with the file name passed to the Resources compiler option."
    },
    {
      "Code": "CS1567",
      "Title": "Error generating Win32 resource: 'file'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1567",
      "Description": "Your compilation either used the Win32Icon compiler option or did not use Win32Resource, which causes the compiler to generate a file that contains resource information, but the compiler was unable to create the file due to insufficient disk space or some other error."
    },
    {
      "Code": "CS1569",
      "Title": "Error generating XML documentation file 'Filename' ('reason')",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1569",
      "Description": "When attempting to write the XML documentation to the file named in the message, an error occurred for the reason specified. The reason may be something like &quot;network drive not found,&quot; or &quot;access denied.&quot; Often, the reason will suggest what needs to be done to correct the error. For example, if the error says &quot;access denied,&quot; you would verify that you have write permission on the file."
    },
    {
      "Code": "CS1575",
      "Title": "A stackalloc expression requires [] after type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1575",
      "Description": "The size of the requested allocation, with stackalloc, must be specified in square brackets."
    },
    {
      "Code": "CS1576",
      "Title": "The line number specified for #line directive is missing or invalid",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1576",
      "Description": "The compiler detected an error with the value passed to the #line directive."
    },
    {
      "Code": "CS1577",
      "Title": "Assembly generation failed —reason",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1577",
      "Description": "The assembly-generation part of the compilation failed after the C# compiler successfully compiled the source code. See the errors documentation for the ALink utility (Al.exe Tool Errors and Warnings) for more information."
    },
    {
      "Code": "CS1578",
      "Title": "Filename, single-line comment or end-of-line expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1578",
      "Description": "After a #line directive, only a file name (in double quotation marks) or a single-line comment is allowed."
    },
    {
      "Code": "CS1579",
      "Title": "foreach statement cannot operate on variables of type 'type1' because 'type2' does not contain a public definition for 'identifier'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1579",
      "Description": "To iterate through a collection using the foreach statement, the collection must meet the following requirements:"
    },
    {
      "Code": "CS1583",
      "Title": "'file' is not a valid Win32 resource file",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1583",
      "Description": "This error occurs when you specify a filename with the Win32Resource compiler option that is not a valid or correctly formatted Win32 resource file. In Visual Studio, the filename is specified in the Application pane of the Project Designer."
    },
    {
      "Code": "CS1585",
      "Title": "Member modifier 'keyword' must precede the member type and name",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1585",
      "Description": "The access specifier in a method signature did not occur in the correct location."
    },
    {
      "Code": "CS1586",
      "Title": "Array creation must have array size or array initializer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1586",
      "Description": "An array was declared incorrectly."
    },
    {
      "Code": "CS1588",
      "Title": "Cannot determine common language runtime directory -- 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1588",
      "Description": "The compiler cannot retrieve the directory that the .NET runtime is installed in. This error indicates that the common language runtime is improperly installed."
    },
    {
      "Code": "CS1593",
      "Title": "Delegate 'del' does not take 'number' arguments",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1593",
      "Description": "The number of arguments passed to a delegate invocation does not agree with the number of parameters in the delegate declaration."
    },
    {
      "Code": "CS1594",
      "Title": "Delegate 'delegate' has some invalid arguments",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1594",
      "Description": "The type of an argument passed to a delegate invocation does not agree with the type of the parameter in the delegate declaration."
    },
    {
      "Code": "CS1597",
      "Title": "Semicolon after method or accessor block is not valid",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1597",
      "Description": "Semicolons are not needed (or allowed) to end a method or accessor block."
    },
    {
      "Code": "CS1599",
      "Title": "Method or delegate cannot return type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1599",
      "Description": "Some types in the .NET class library, for example, TypedReference, RuntimeArgumentHandle and ArgIterator cannot be used as return types because they can potentially be used to perform unsafe operations."
    },
    {
      "Code": "CS1600",
      "Title": "Compilation cancelled by user",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1600",
      "Description": "A compilation with the C# compiler was cancelled while using the Visual Studio IDE."
    },
    {
      "Code": "CS1601",
      "Title": "Method or delegate parameter cannot be of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1601",
      "Description": "Some types in the .NET class library, for example, TypedReference, RuntimeArgumentHandle and ArgIterator cannot be used as in, ref or out parameters because they could potentially be used to perform unsafe operations."
    },
    {
      "Code": "CS1604",
      "Title": "Cannot assign to 'variable' because it is read-only",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1604",
      "Description": "An assignment was made to a read-only variable. To avoid this error, do not assign or attempt to modify  to this variable in this context."
    },
    {
      "Code": "CS1605",
      "Title": "Cannot pass 'var' as a ref or out argument because it is read-only",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1605",
      "Description": "A variable passed as a ref or out parameter is expected to be modified in the called method. Therefore, it is not possible to pass a read-only parameter as ref or out."
    },
    {
      "Code": "CS1606",
      "Title": "Assembly signing failed; output may not be signed -- reason",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1606",
      "Description": "The assembly was produced, but when the compiler attempted to finish signing it, there was a failure."
    },
    {
      "Code": "CS1608",
      "Title": "The Required attribute is not permitted on C# types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1608",
      "Description": "RequiredAttributeAttribute is not allowed on types defined in C# code."
    },
    {
      "Code": "CS1609",
      "Title": "Modifiers cannot be placed on event accessor declarations",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1609",
      "Description": "Modifiers can only be placed on event declarations and not on the event accessor declarations. For more information, see Using Properties."
    },
    {
      "Code": "CS1611",
      "Title": "The params parameter cannot be declared as in ref or out",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1611",
      "Description": "The keywords in, ref or out cannot be used with the params keyword."
    },
    {
      "Code": "CS1612",
      "Title": "Cannot modify the return value of 'expression' because it is not a variable",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1612",
      "Description": "An attempt was made to modify a value type that is produced as the result of an intermediate expression but is not stored in a variable. This error can occur when you attempt to directly modify a struct in a generic collection, as shown in the following example:"
    },
    {
      "Code": "CS1613",
      "Title": "The managed coclass wrapper class 'class' for interface 'interface' cannot be found (are you missing an assembly reference?)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1613",
      "Description": "An attempt was made to instantiate a COM object from an interface. The interface has the ComImport and CoClass attributes, but the compiler cannot find the type given for the CoClass attribute."
    },
    {
      "Code": "CS1614",
      "Title": "'name' is ambiguous between 'name' and 'nameAttribute'; use either '@name' or 'nameAttribute'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1614",
      "Description": "The compiler has encountered an ambiguous attribute specification."
    },
    {
      "Code": "CS1615",
      "Title": "Argument 'number' should not be passed with the 'keyword' keyword",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1615",
      "Description": "One of the keywords ref or out was used when the function did not take a ref or out parameter for that argument. To resolve this error, remove the incorrect keyword and use the appropriate keyword that matches the function declaration, if any."
    },
    {
      "Code": "CS1617",
      "Title": "Invalid option 'option' for LangVersion. Use &lt;LangVersion&gt;?&lt;/LangVersion&gt; to list supported values.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1617",
      "Description": "This error occurs if you used the LangVersion command line switch or project setting but didn't specify a valid language option. To resolve this error, check the command line syntax or project setting and change it to one of the listed options."
    },
    {
      "Code": "CS1618",
      "Title": "Cannot create delegate with 'method' because it has a Conditional attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1618",
      "Description": "You cannot create a delegate with a conditional method because the method might not exist in some builds."
    },
    {
      "Code": "CS1619",
      "Title": "Cannot create temporary file 'filename' -- reason",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1619",
      "Description": "The compiler was unable to create a temporary file for the given reason (for example, the disk is full)."
    },
    {
      "Code": "CS1620",
      "Title": "Argument 'number' must be passed with the 'keyword' keyword",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1620",
      "Description": "This error occurs if you are passing an argument to a function that takes a ref or out parameter and you don't include the ref or out keyword at the point of call, or you include the wrong keyword. The error text indicates the appropriate keyword to use and which argument caused the failure."
    },
    {
      "Code": "CS1621",
      "Title": "The yield statement cannot be used inside an anonymous method or lambda expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1621",
      "Description": "You cannot use the yield statement in an anonymous method or a lambda expression."
    },
    {
      "Code": "CS1622",
      "Title": "Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1622",
      "Description": "An iterator is a special function that returns a value via the yield statement rather than the return statement. For more information, see iterators."
    },
    {
      "Code": "CS1623",
      "Title": "Iterators cannot have in ref or out parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1623",
      "Description": "This error occurs if an iterator method takes an in, ref, or out parameter. To avoid this error, remove the in, ref, or out keyword from the method signature."
    },
    {
      "Code": "CS1624",
      "Title": "The body of 'accessor' cannot be an iterator block because 'type' is not an iterator interface type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1624",
      "Description": "This error occurs if an iterator accessor is used but the return type is not one of the iterator interface types: IEnumerable, IEnumerable&lt;T&gt;, IEnumerator, IEnumerator&lt;T&gt;. To avoid this error, use one of the iterator interface types as a return type."
    },
    {
      "Code": "CS1625",
      "Title": "Cannot yield in the body of a finally clause",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1625",
      "Description": "A yield statement is not allowed in the body of a finally clause. To avoid this error, move the yield statement out of the finally clause."
    },
    {
      "Code": "CS1626",
      "Title": "Cannot yield a value in the body of a try block with a catch clause",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1626",
      "Description": "A yield statement is not allowed in a try block if there is a catch clause associated with the try block. To avoid this error, either move the yield statement out of the try/catch/finally block, or remove the catch block."
    },
    {
      "Code": "CS1627",
      "Title": "Expression expected after yield return",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1627",
      "Description": "This error occurs if yield is used without an expression. To avoid this error, insert the appropriate expression in the statement."
    },
    {
      "Code": "CS1628",
      "Title": "Cannot use in ref or out parameter 'parameter' inside an anonymous method, lambda expression, or query expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1628",
      "Description": "This error occurs if you use an in, ref, or out parameter inside an anonymous method block. To avoid this error, use a local variable or some other construct."
    },
    {
      "Code": "CS1629",
      "Title": "Unsafe code may not appear in iterators",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1629",
      "Description": "The C# language specification does not allow unsafe code in iterators."
    },
    {
      "Code": "CS1630",
      "Title": "Invalid option 'option' for ErrorReport; must be prompt, send, queue, or none",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1630",
      "Description": "The command line option ErrorReport must be followed by prompt, send, queue, or none, specifying what action you want taken when an internal compiler error occurs."
    },
    {
      "Code": "CS1631",
      "Title": "Cannot yield a value in the body of a catch clause",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1631",
      "Description": "The yield statement is not allowed from within the body of a catch clause. To avoid this error, move the yield statement outside the body of the catch clause."
    },
    {
      "Code": "CS1632",
      "Title": "Control cannot leave the body of an anonymous method or lambda expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1632",
      "Description": "This error occurs if a jump statement (break, goto, continue, etc.) attempts to move control out of an anonymous method block. An anonymous method block is a function body and can only be exited by a return statement or by reaching the end of the block."
    },
    {
      "Code": "CS1637",
      "Title": "Iterators cannot have unsafe parameters or yield types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1637",
      "Description": "Check the argument list of the iterator and the type of any yield statements to verify that you are not using any unsafe types."
    },
    {
      "Code": "CS1638",
      "Title": "'identifier' is a reserved identifier and cannot be used when ISO language version mode is used",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1638",
      "Description": "When the ISO language compatibility option is specified by the /langversion compiler switch, any identifier with double underscores anywhere in the identifier will produce this error. To avoid this error, eliminate any identifiers with double underscores, or do not use the ISO-1 language version option."
    },
    {
      "Code": "CS1639",
      "Title": "The managed coclass wrapper class signature 'signature' for interface 'interface' is not a valid class name signature",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1639",
      "Description": "This error occurs if the metadata for the interface is invalid. This should never occur if the interface was generated using C# or a supported .NET language. Check with the vendor of the interface or verify that the interface assembly was generated successfully."
    },
    {
      "Code": "CS1640",
      "Title": "foreach statement cannot operate on variables of type 'type' because it implements multiple instantiations of 'interface', try casting to a specific interface instantiation",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1640",
      "Description": "The type inherits from two or more instances of IEnumerator&lt;T&gt;, which means there is not a unique enumeration of the type that foreach could use. Specify the type of IEnumerator&lt;T&gt; or use another looping construct."
    },
    {
      "Code": "CS1641",
      "Title": "A fixed size buffer field must have the array size specifier after the field name",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1641",
      "Description": "Unlike regular arrays, fixed size buffers require a constant size to be specified at the declaration point. To resolve this error, add a positive integer literal or a constant positive integer and put the square brackets after the identifier."
    },
    {
      "Code": "CS1642",
      "Title": "Fixed size buffer fields may only be members of structs.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1642",
      "Description": "This error occurs if you use a fixed size buffer field in a class, instead of a struct. To resolve this error, change the class to a struct or declare the field as an ordinary array."
    },
    {
      "Code": "CS1643",
      "Title": "Not all code paths return a value in method of type 'type!'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1643",
      "Description": "This error occurs if a delegate body does not have a return statement, or has a return statement that the compiler is unable to verify will be reached. In the example below, the compiler does not attempt to predict the result of the branching condition in order to verify that the anonymous method block always returns a value."
    },
    {
      "Code": "CS1644",
      "Title": "Feature 'feature' is not part of the standardized ISO C# language specification, and may not be accepted by other compilers",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1644",
      "Description": "This error occurs if you specified the LangVersion option ISO-1 and the code you are compiling uses features that are not part of the ISO 1.0 standard. To resolve this error, do not use any of the C# 2.0 compiler features such as generics or anonymous methods with the ISO-1 compatibility option."
    },
    {
      "Code": "CS1646",
      "Title": "Keyword, identifier, or string expected after verbatim specifier: @",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1646",
      "Description": "See string literals for the usage of the verbatim specifier '@'. The verbatim specifier is only allowed before a string, keyword or identifier. To resolve this error, remove the @ symbol from any inappropriate place or add the intended string, keyword or identifier."
    },
    {
      "Code": "CS1647",
      "Title": "An expression is too long or complex to compile near 'code'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1647",
      "Description": "There was a stack overflow in the compiler processing your code. To resolve this error, simplify your code. If your code is valid, get help at the Developer Community site or StackOverflow."
    },
    {
      "Code": "CS1648",
      "Title": "Members of readonly field 'identifier' cannot be modified (except in a constructor or a variable initializer)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1648",
      "Description": "This error occurs when you attempt to modify a member of a field which is readonly where it is not allowed to be modified. To resolve this error, limit assignments to readonly fields to the constructor or variable initializer, or remove the readonly keyword from the declaration of the field."
    },
    {
      "Code": "CS1649",
      "Title": "Members of readonly field 'identifier' cannot be passed ref or out (except in a constructor)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1649",
      "Description": "This error occurs if you pass a variable to a function that is a member of a readonly field as a ref or out argument. Since ref and out parameters may be modified by the function, this is not allowed. To resolve this error, remove the readonly keyword on the field, or do not pass the members of the readonly field to the function. For example, you might try creating a temporary variable which can be modified and passing the temporary as a ref argument, as shown in the following example."
    },
    {
      "Code": "CS1650",
      "Title": "Fields of static readonly field 'identifier' cannot be assigned to (except in a static constructor or a variable initializer)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1650",
      "Description": "This error occurs when you attempt to modify a member of a field which is readonly and static where it is not allowed to be modified. To resolve this error, limit assignments to readonly fields to the constructor or variable initializer, or remove the readonly keyword from the declaration of the field."
    },
    {
      "Code": "CS1651",
      "Title": "Fields of static readonly field 'identifier' cannot be passed ref or out (except in a static constructor)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1651",
      "Description": "This error occurs if you pass a variable to a function that is a member of a static readonly field as a ref argument. Since ref parameters may be modified by the function, this is not allowed. To resolve this error, remove the readonly keyword on the field, or do not pass the members of the readonly field to the function. For example, you might try creating a temporary variable which can be modified and passing the temporary as a ref argument, as shown in the following example."
    },
    {
      "Code": "CS1654",
      "Title": "Cannot modify members of 'variable' because it is a 'read-only variable type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1654",
      "Description": "This error occurs when you try to modify members of a variable which is read-only because it is in a special construct."
    },
    {
      "Code": "CS1655",
      "Title": "Cannot pass fields of 'variable' as a ref or out argument because it is a 'readonly variable type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1655",
      "Description": "This error occurs if you are attempting to pass a member of a foreach variable, a using variable, or a fixed variable to a function as a ref or out argument. Because these variables are considered read-only in these contexts, this is not allowed."
    },
    {
      "Code": "CS1656",
      "Title": "Cannot assign to 'variable' because it is a 'read-only variable type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1656",
      "Description": "This error occurs when an assignment to variable occurs in a read-only context. Read-only contexts include foreach iteration variables, using variables, and fixed variables. To resolve this error, avoid assignments to a statement variable in using blocks, foreach statements, and fixed statements."
    },
    {
      "Code": "CS1657",
      "Title": "Cannot pass 'parameter' as a ref or out argument because 'reason''",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1657",
      "Description": "This error occurs when a variable is passed as a ref or out argument in a context in which that variable is readonly. Readonly contexts include foreach iteration variables, using variables, and fixed variables. To resolve this error, do not call functions that take the foreach, using or fixed variable as a ref or out parameter in using blocks, foreach statements, and fixed statements."
    },
    {
      "Code": "CS1660",
      "Title": "Cannot convert anonymous method block to type 'type' because it is not a delegate type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1660",
      "Description": "This error occurs if you try to assign or otherwise convert an anonymous method block to a type which is not a delegate type."
    },
    {
      "Code": "CS1661",
      "Title": "Cannot convert anonymous method block to delegate type 'delegate type' because the specified block's parameter types do not match the delegate parameter types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1661",
      "Description": "This error occurs if, in an anonymous method definition, the parameter types of the anonymous method do not match the delegate parameter types. Check the number of parameters, the parameter types, and any ref or out parameters and verify an exact match."
    },
    {
      "Code": "CS1662",
      "Title": "Cannot convert anonymous method block to delegate type 'delegate type' because some of the return types in the block are not implicitly convertible to the delegate return type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1662",
      "Description": "This error occurs if the anonymous method block's return statement had a type that was not implicitly convertible to the return type of the delegate."
    },
    {
      "Code": "CS1663",
      "Title": "Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1663",
      "Description": "A fixed sized buffer may not be any type other than those listed. To avoid this error, use another type or do not use a fixed array."
    },
    {
      "Code": "CS1664",
      "Title": "Fixed size buffer of length 'length' and type 'type' is too big",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1664",
      "Description": "The maximum size of a fixed-size buffer (as determined by the length multiplied by the element size) is 2^31 = 268435455."
    },
    {
      "Code": "CS1665",
      "Title": "Fixed size buffers must have a length greater than zero",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1665",
      "Description": "This error occurs if a fixed size buffer is declared with a zero or negative size. The length of a fixed size buffer must be a positive integer."
    },
    {
      "Code": "CS1666",
      "Title": "You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1666",
      "Description": "This error occurs if you use the fixed sized buffer in an expression involving a class that is not itself fixed. The runtime is free to move the unfixed class around to optimize memory access, which could lead to errors when using the fixed sized buffer. To avoid this error, use the fixed keyword on the statement."
    },
    {
      "Code": "CS1667",
      "Title": "Attribute 'attribute' is not valid on property or event accessors. It is valid on 'declaration type' declarations only.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1667",
      "Description": "This error occurs if you use an attribute on a property or event accessor, when it should be on the property or event itself. This error could occur with the attributes CLSCompliantAttribute, ConditionalAttribute, and ObsoleteAttribute."
    },
    {
      "Code": "CS1670",
      "Title": "params is not valid in this context",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1670",
      "Description": "A number of C# features are incompatible with variable argument lists, and do not allow the params keyword, including the following:"
    },
    {
      "Code": "CS1671",
      "Title": "A namespace declaration cannot have modifiers or attributes",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1671",
      "Description": "Modifiers are not meaningful when applied to a namespace, so they are not allowed."
    },
    {
      "Code": "CS1672",
      "Title": "Invalid option 'option' for /platform; must be anycpu, x86, Itanium or x64",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1672",
      "Description": "The options specify the processor type; use one of the forms listed."
    },
    {
      "Code": "CS1673",
      "Title": "Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1673",
      "Description": "The following sample generates CS1673:"
    },
    {
      "Code": "CS1674",
      "Title": "'T': type used in a using statement must be implicitly convertible to 'System.IDisposable'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1674",
      "Description": "The using Statement is intended to be used to ensure the disposal of an object at the end of the using block, thus, only types which are disposable may be used in such a statement. For example, value types are not disposable, and type parameters which are not constrained to be classes may not be assumed to be disposable."
    },
    {
      "Code": "CS1675",
      "Title": "Enums cannot have type parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1675",
      "Description": "To resolve this error, remove the type parameter from the enum declaration."
    },
    {
      "Code": "CS1676",
      "Title": "Parameter 'number' must be declared with the 'keyword' keyword",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1676",
      "Description": "This error occurs when the parameter type modifier in an anonymous method is different from that used in the declaration of the delegate you are casting the method to."
    },
    {
      "Code": "CS1677",
      "Title": "Parameter 'number' should not be declared with the 'keyword' keyword",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1677",
      "Description": "This error occurs when the parameter type modifier in an anonymous method does not match that used in the declaration of the delegate, to which you are casting the method."
    },
    {
      "Code": "CS1678",
      "Title": "Parameter 'number' is declared as type 'type1' but should be 'type2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1678",
      "Description": "This error occurs when the parameter type in an anonymous method is different from the declaration of the delegate you are casting the method to."
    },
    {
      "Code": "CS1679",
      "Title": "Invalid extern alias for '/reference'; 'identifier' is not a valid identifier",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1679",
      "Description": "When using the external assembly alias feature of the /reference option, the text that follows /reference: and that precedes the '=' must be a valid C# identifier or keyword according to the C# Language Specification."
    },
    {
      "Code": "CS1680",
      "Title": "Invalid reference alias option: 'alias=' -- missing filename.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1680",
      "Description": "This error occurs when you use the alias feature with the /reference compiler option without specifying a valid file name."
    },
    {
      "Code": "CS1681",
      "Title": "You cannot redefine the global extern alias",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1681",
      "Description": "The global alias is already defined to include all unaliased references and therefore cannot be redefined."
    },
    {
      "Code": "CS1686",
      "Title": "Local 'variable' or its members cannot have their address taken and be used inside an anonymous method or lambda expression",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1686",
      "Description": "This error is generated when you use a variable, and attempt to take its address, and one of these actions is done inside an anonymous method."
    },
    {
      "Code": "CS1688",
      "Title": "Cannot convert anonymous method block without a parameter list to delegate type 'delegate' because it has one or more out parameters",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1688",
      "Description": "The compiler allows parameters to be omitted from an anonymous method block in most cases. This error arises when the anonymous method block does not have a parameter list, but the delegate has an out parameter. The compiler does not allow this situation because it would need to ignore the presence of the out parameter, which is unlikely to be the correct behavior."
    },
    {
      "Code": "CS1689",
      "Title": "Attribute 'Attribute Name' is only valid on methods or attribute classes",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1689",
      "Description": "This error only occurs with the ConditionalAttribute attribute. As the message states, this attribute can only be used on methods or attribute classes. For example, trying to apply this attribute to a class will generate this error."
    },
    {
      "Code": "CS1703",
      "Title": "An assembly with the same simple name 'name' has already been imported. Try removing one of the references or sign them to enable side-by-side.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1703",
      "Description": "The compiler removes references that have the same path and file name, but it is possible that the same file exists in two places, or that you forgot to change the version number. This error points out that two references have the same assembly identity and thus the compiler has no way of distinguishing between them in metadata. Either remove one of the redundant references, or make the references unique somehow, such as by incrementing the assembly version number."
    },
    {
      "Code": "CS1704",
      "Title": "An assembly with the same simple name 'Assembly Name' has already been imported. Try removing one of the references or sign them to enable side-by-side.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1704",
      "Description": "This error points out that two references have the same assembly identity because the assemblies in question lack strong names, they were not signed, and thus the compiler has no way of distinguishing between them in metadata. Thus, the run time ignores the version and culture assembly name properties. The user should remove the redundant reference, rename one of the references, or provide a strong name for them."
    },
    {
      "Code": "CS1705",
      "Title": "Assembly 'AssemblyName1' uses 'TypeName' which has a higher version than referenced assembly 'AssemblyName2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1705",
      "Description": "You are accessing a type that has a higher version number than the version number in a referenced assembly. Typically, this error is caused by the accidental use of two versions of the same assembly."
    },
    {
      "Code": "CS1706",
      "Title": "Expression cannot contain anonymous methods  or lambda expressions",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1706",
      "Description": "You cannot insert an anonymous method inside an expression."
    },
    {
      "Code": "CS1708",
      "Title": "Fixed size buffers can only be accessed through locals or fields",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1708",
      "Description": "A new feature in C# 2.0 is the ability to define an in-line array inside of a struct. Such arrays can only be accessed via local variables or fields, and may not be referenced as intermediate values on the left-hand side of an expression. Also, the arrays cannot be accessed by fields that are static or readonly."
    },
    {
      "Code": "CS1713",
      "Title": "Unexpected error building metadata name for type Typename1—'Reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1713",
      "Description": "This error is often caused by an internal compiler error. Making some minor changes to your code, such as shortening the length of the name, and then recompiling, may resolve this error."
    },
    {
      "Code": "CS1714",
      "Title": "The base class or interface of TypeName1 could not be resolved or is invalid",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1714",
      "Description": "You are implementing TypeName1 from a class or interface that either could not be resolved, for example, the compiler was unable to locate it, or is invalid. The solution is to determine which of these two cases it is, and either more correctly specify the location of the type, or fix any compiler errors in the base class."
    },
    {
      "Code": "CS1715",
      "Title": "'Type1': type must be 'Type2' to match overridden member 'MemberName'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1715",
      "Description": "This error is the same as Compiler Error CS0508, except that CS0508 now only applies to methods that have return types, while CS1715 applies to properties and indexers that only have 'types' instead of 'return types'."
    },
    {
      "Code": "CS1716",
      "Title": "Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute. Use the 'fixed' field modifier instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1716",
      "Description": "This error arises in an unsafe code section that contains a fixed-size array declaration similar to a field declaration. Do not use this attribute. Instead, use the keyword fixed."
    },
    {
      "Code": "CS1719",
      "Title": "Error reading Win32 resource file 'File Name' -- 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1719",
      "Description": "An attempt to read the Win32 resource file failed for the reason given in the error, typically something like &quot;file not found&quot; or &quot;access denied.&quot; This error is resolved by correcting the problem described by the reason."
    },
    {
      "Code": "CS1721",
      "Title": "Class 'class' cannot have multiple base classes: 'class_1' and 'class_2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1721",
      "Description": "The most common cause of this error message is attempting to use multiple inheritance. A class in C# may only inherit directly from one class. However, a class can implement any number of interfaces."
    },
    {
      "Code": "CS1722",
      "Title": "Base class 'class' must come before any interfaces",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1722",
      "Description": "When specifying a class to inherit from and interfaces to implement, the class name must be specified first."
    },
    {
      "Code": "CS1724",
      "Title": "Value specified for the argument to 'System.Runtime.InteropServices.DefaultCharSetAttribute' is not valid",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1724",
      "Description": "This error is generated by an invalid argument to the DefaultCharSetAttribute class."
    },
    {
      "Code": "CS1725",
      "Title": "Friend assembly reference 'reference' is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1725",
      "Description": "You cannot add a version culture in a friend assembly reference. Partial classes should be visible to friend assemblies."
    },
    {
      "Code": "CS1726",
      "Title": "Friend assembly reference 'reference' is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1726",
      "Description": "A strong name signed assembly can only grant friend assembly access, made with the InternalsVisibleToAttribute, to other strongly signed assemblies."
    },
    {
      "Code": "CS1727",
      "Title": "Cannot send error report automatically without authorization. Please visit '' to authorize sending error report.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1727",
      "Description": "The Web site listed in the error text explains how to enable automatic error reporting for Visual Studio 2005 command line tools."
    },
    {
      "Code": "CS1728",
      "Title": "Cannot bind delegate to 'member' because it is a member of 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1728",
      "Description": "You cannot bind delegates to members of Nullable value types."
    },
    {
      "Code": "CS1729",
      "Title": "'type' does not contain a constructor that takes 'number' arguments.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1729",
      "Description": "This error occurs when you either directly or indirectly invoke the constructor of a class but the compiler cannot find any constructors with the same number of parameters. In the following example, the test class has no constructors that take any arguments. It therefore has only a parameterless constructor that takes zero arguments. Because in the second line in which the error is generated, the derived class declares no constructors of its own, the compiler provides a parameterless constructor. That constructor invokes a parameterless constructor in the base class. Because the base class has no such constructor, CS1729 is generated."
    },
    {
      "Code": "CS1730",
      "Title": "Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1730",
      "Description": "An attribute applied at the assembly level cannot appear after any type definitions."
    },
    {
      "Code": "CS1731",
      "Title": "Cannot convert 'expression' to delegate because some of the return types in the block are not implicitly convertible to the delegate return type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1731",
      "Description": "This error is generated when a lambda expression or anonymous method has a return type that is not compatible with the delegate's return type."
    },
    {
      "Code": "CS1732",
      "Title": "Expected parameter.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1732",
      "Description": "This error is produced when a lambda expression contains a comma following an input parameter but does not specify the following parameter."
    },
    {
      "Code": "CS1733",
      "Title": "Expected expression.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1733",
      "Description": "This error is produced whenever the compiler is expecting an expression on the line where the error occurred. In the following example, the trailing comma in the initializer indicates to the compiler that another expression will follow."
    },
    {
      "Code": "CS1900",
      "Title": "Warning level must be in the range 0-4",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1900",
      "Description": "The WarningLevel compiler option can only take one of six possible values (0, 1, 2, 3, or 4). Any other value passed to /warn will result in CS1900."
    },
    {
      "Code": "CS1902",
      "Title": "Invalid option 'option' for /debug; must be full or pdbonly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1902",
      "Description": "An invalid option was passed to the DebugType compiler option."
    },
    {
      "Code": "CS1906",
      "Title": "Invalid option 'option'; Resource visibility must be either 'public' or 'private'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1906",
      "Description": "This error indicates an invalid Resources (Embed Resource File to Output) or LinkResources (Link to .NET Framework Resource) command line option. Check the syntax of the /resource or /linkresource command line option, and make sure that the accessibility modifier used is either public or private."
    },
    {
      "Code": "CS1908",
      "Title": "The type of the argument to the DefaultValue attribute must match the parameter type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1908",
      "Description": "This error is generated when you use the wrong argument for the DefaultValueAttribute attribute value. Use a value that matches the parameter type."
    },
    {
      "Code": "CS1909",
      "Title": "The DefaultValue attribute is not applicable on parameters of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1909",
      "Description": "CS1909 is generated when you use a DefaultValue attribute that is not applicable on the parameter type."
    },
    {
      "Code": "CS1910",
      "Title": "Argument of type 'type' is not applicable for the DefaultValue attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1910",
      "Description": "For parameters whose type is object, the argument of the DefaultParameterValueAttribute must be null, an integral type, a floating point, bool, string, enum, or char. The argument can not be of type Type or any array type."
    },
    {
      "Code": "CS1912",
      "Title": "Duplicate initialization of member 'name'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1912",
      "Description": "An object initializer can initialize each member only one time."
    },
    {
      "Code": "CS1913",
      "Title": "Member 'name' cannot be initialized. It is not a field or property.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1913",
      "Description": "Object initializers can only be used to initialize accessible fields or properties."
    },
    {
      "Code": "CS1914",
      "Title": "Static field 'name' cannot be assigned in an object initializer",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1914",
      "Description": "Object initializers by definition initialize objects, or instances, of classes. They cannot be used to initialize a static field of a type. No matter how many instances of a class are created, there is only one copy of a static field."
    },
    {
      "Code": "CS1917",
      "Title": "Members of read-only field 'name' of type 'struct name' cannot be assigned with an object initializer because it is of a value type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1917",
      "Description": "Read-only fields that are value types can only be assigned in a constructor."
    },
    {
      "Code": "CS1918",
      "Title": "Members of property 'name' of type 'type' cannot be assigned with an object initializer because it is of a value type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1918",
      "Description": "This error occurs when you try to use an object initializer to initialize the properties of a struct type that is itself a property of the class that is being initialized."
    },
    {
      "Code": "CS1919",
      "Title": "Unsafe type 'type name' cannot be used in object creation.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1919",
      "Description": "The new operator creates objects only on the managed heap. However, you can create objects in unmanaged memory indirectly by using the interoperability capabilities of the language to call native methods that return pointers."
    },
    {
      "Code": "CS1920",
      "Title": "Element initializer cannot be empty.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1920",
      "Description": "A collection initializer consists of a sequence of element initializers. The element initializers do not have to be enclosed in braces unless they contain an assignment expression. However, if you do supply braces, they cannot be empty. If the element initializer is an object initializer, the braces may be empty as long as the initializer contains a new object creation expression."
    },
    {
      "Code": "CS1921",
      "Title": "The best overloaded method match for 'method' has wrong signature for the initializer element. The initializable Add must be an accessible instance method.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1921",
      "Description": "This error is generated when you try to use a collection initializer with a class that has no public non-static Add method. If the Add method is not accessible because of its protection level (private, protected, internal) then you will get CS0122, so that this error probably means that the method is defined as static."
    },
    {
      "Code": "CS1922",
      "Title": "Collection initializer requires its type 'type' to implement System.Collections.IEnumerable.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1922",
      "Description": "In order to use a collection initializer with a type, the type must implement IEnumerable. This error can occur if you accidentally use collection initializer syntax when you meant to use an object initializer."
    },
    {
      "Code": "CS1925",
      "Title": "Cannot initialize object of type 'type' with a collection initializer.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1925",
      "Description": "Collection initializers are only allowed for collection classes that meet certain criteria. For more information, see Object and Collection Initializers. This error is also produced when you try to use the short form of an array initializer nested inside a collection initializer."
    },
    {
      "Code": "CS1926",
      "Title": "Error reading Win32 manifest file 'filename' -- 'error'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1926",
      "Description": "This error is generated when the following conditions are true:"
    },
    {
      "Code": "CS1928",
      "Title": "'Type' does not contain a definition for 'method' and the best extension method overload 'method' has some invalid arguments.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1928",
      "Description": "This error is produced when the compiler cannot find a class member with the name of the method you have called. It can find an extension method with that name, but not with a signature that matches the types you passed in with your method call."
    },
    {
      "Code": "CS1929",
      "Title": "Instance argument: cannot convert from 'typeA' to 'typeB'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1929",
      "Description": "This error is generated when you try to invoke an extension method from a class that it does not extend. In the example shown here, the extension method is defined for the derived class A, but not for the base class B."
    },
    {
      "Code": "CS1930",
      "Title": "The range variable 'name' has already been declared",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1930",
      "Description": "The range variable in a query expression is in scope until the query expression terminates. It must therefore have a unique identifier."
    },
    {
      "Code": "CS1931",
      "Title": "The range variable 'variable' conflicts with a previous declaration of 'variable'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1931",
      "Description": "The declaration of a range variable, just like every other declaration, must have an identifier which is unique within the variable's declaration space."
    },
    {
      "Code": "CS1932",
      "Title": "Cannot assign 'expression' to a range variable.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1932",
      "Description": "The compiler must be able to infer the type of a range variable, whether it is introduced in a from clause or a let clause. It cannot be null because null is not a type, and it cannot be assigned with an expression of an unsafe type."
    },
    {
      "Code": "CS1933",
      "Title": "Expression cannot contain query expressions",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1933",
      "Description": "Some variables cannot be initialized with a query expression. Constants cannot be initialized with query expressions because constants may only be initialized with some combination of literals, named constants, and mathematical operators."
    },
    {
      "Code": "CS1934",
      "Title": "Could not find an implementation of the query pattern for source type 'type'. 'method' not found. Consider explicitly specifying the type of the range variable 'name'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1934",
      "Description": "This error is produced if a query expression specifies a data source for which no standard query operators are implemented. One way to produce this error is to specify an ArrayList without giving an explicit type for the range variable."
    },
    {
      "Code": "CS1935",
      "Title": "Could not find an implementation of the query pattern for source type 'type'. 'method' not found. Are you missing a using directive for 'System.Linq'?",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1935",
      "Description": "The source type in a query must be IEnumerable, IEnumerable&lt;T&gt;, or a derived type, or a type for which you or someone else has implemented the standard query operators. If the source type is an IEnumerable or IEnumerable&lt;T&gt;, you must add a using directive for the System.Linq namespace in order to bring the standard query operator extension methods into scope. Custom implementations of the standard query operators must be brought into scope in the same way, with a using directive and, if necessary, a reference to the assembly."
    },
    {
      "Code": "CS1936",
      "Title": "Could not find an implementation of the query pattern for source type 'type'.  'method' not found.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1936",
      "Description": "In order to query a source type, that type must implement the standard query operator methods that you are invoking in the query. The implementation can be either in the form of class members or extension methods that are brought into scope with the appropriate using directive."
    },
    {
      "Code": "CS1937",
      "Title": "The name 'name' is not in scope on the left side of 'equals'. Consider swapping the expressions on either side of 'equals'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1937",
      "Description": "The equals keyword is a special operator that is used in a join clause to determine equality between two expressions. The range variable for the left side source sequence is in scope on the left side of equals, and the range variable for the right side source is only in scope on the left side of equals. You can verify this by experimenting with IntelliSense in the following code example."
    },
    {
      "Code": "CS1938",
      "Title": "The name 'name' is not in scope on the right side of 'equals'. Consider swapping the expressions on either side of 'equals'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1938",
      "Description": "The equals keyword is a special operator that is used in a join clause to determine equality between two expressions. The range variable for the left side source sequence is in scope on the left side of equals, and the range variable for the right side source is only in scope on the left side of equals. You can verify this by experimenting with IntelliSense in the following code example."
    },
    {
      "Code": "CS1939",
      "Title": "Cannot pass the range variable 'name' as an out or ref parameter.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1939",
      "Description": "A range variable is a read-only variable that is introduced in a query expression and serves as an identifier for each successive element in a source sequence. Because it cannot be modified in any way, there is no point in passing it by ref or out. Therefore, both operations are not valid."
    },
    {
      "Code": "CS1940",
      "Title": "Multiple implementations of the query pattern were found for source type 'type'. Ambiguous call to 'method'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1940",
      "Description": "This error is generated when multiple implementations of a query method are defined and the compiler cannot disambiguate which one is best to use for the query. In the following example, both versions of Select have the same signature, because they both accept one int as an input parameter and have int as a return value."
    },
    {
      "Code": "CS1941",
      "Title": "The type of one of the expressions in the 'clause' clause is incorrect. Type inference failed in the call to 'method'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1941",
      "Description": "Type inference in query expressions flows from the type of the elements in the data source(s)."
    },
    {
      "Code": "CS1942",
      "Title": "The type of the expression in the 'clause' clause is incorrect. Type inference failed in the call to 'method'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1942",
      "Description": "This error is typically generated when the range variable has been given an incorrect explicit type."
    },
    {
      "Code": "CS1943",
      "Title": "An expression of type 'type' is not allowed in a subsequent from clause in a query expression with source type 'type'. Type inference failed in the call to 'method'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1943",
      "Description": "All range variables must represent queryable types."
    },
    {
      "Code": "CS1944",
      "Title": "An expression tree may not contain an unsafe pointer operation",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1944",
      "Description": "Expression trees do not support pointer types because the Expression&lt;TDelegate&gt;.Compile method is only allowed to produce verifiable code. See comments."
    },
    {
      "Code": "CS1945",
      "Title": "An expression tree may not contain an anonymous method expression.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1945",
      "Description": "Expression trees can only contain expressions. Anonymous methods can only represent statements."
    },
    {
      "Code": "CS1946",
      "Title": "An anonymous method expression cannot be converted to an expression tree.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1946",
      "Description": "An anonymous method represents a set of statements but an expression tree must not contain a statement. Therefore an anonymous method cannot be represented by an expression tree."
    },
    {
      "Code": "CS1947",
      "Title": "Range variable 'variable name' cannot be assigned to -- it is read only.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1947",
      "Description": "A range variable is like an iteration variable in a foreach statement. It cannot be assigned to in a query expression."
    },
    {
      "Code": "CS1948",
      "Title": "The range variable 'name' cannot have the same name as a method type parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1948",
      "Description": "The same declaration space cannot contain two declarations of the same identifier."
    },
    {
      "Code": "CS1949",
      "Title": "The contextual keyword 'var' cannot be used in a range variable declaration.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1949",
      "Description": "A range variable is implicitly typed by the compiler. There is no need to use var with a range variable."
    },
    {
      "Code": "CS1950",
      "Title": "The best overloaded Add method 'name' for the collection initializer has some invalid arguments.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1950",
      "Description": "To support collection initializers, a class must implement IEnumerable and have a public Add method. To initialize the type by using a collection initializer, the input parameter of the Add method must be compatible with the type of the object you are trying to add."
    },
    {
      "Code": "CS1951",
      "Title": "An expression tree lambda may not contain an in, out, or ref parameter.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1951",
      "Description": "An expression tree just represents expressions as data structures. There is no way to represent specific memory locations as is required when you pass a parameter by reference."
    },
    {
      "Code": "CS1952",
      "Title": "An expression tree lambda may not contain a method with variable arguments",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1952",
      "Description": "The unsupported __arglist keyword is not allowed in lambda expressions that compile to expression trees."
    },
    {
      "Code": "CS1953",
      "Title": "An expression tree lambda may not contain a method group.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1953",
      "Description": "A method call requires the () operator. The method name without that operator refers to the method group, which is the set of all the overloaded methods with that name."
    },
    {
      "Code": "CS1954",
      "Title": "The best overloaded method match 'method' for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1954",
      "Description": "For a collection class to be initialized by using a collection initializer, the class must have a public Add method that is not a ref or out parameter."
    },
    {
      "Code": "CS1955",
      "Title": "Non-invocable member 'name' cannot be used like a method.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1955",
      "Description": "Only methods and delegates can be invoked. This error is generated when you try to use empty parentheses to call something other than a method or delegate."
    },
    {
      "Code": "CS1958",
      "Title": "Object and collection initializer expressions may not be applied to a delegate creation expression,",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1958",
      "Description": "A delegate has no members like a class or struct has, and so there is nothing for an object initializer to initialize. If you encounter this error, it is probably because there are braces after the delegate creation expression. Just remove the braces and this error will disappear."
    },
    {
      "Code": "CS1959",
      "Title": "'name' is of type 'type'. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1959",
      "Description": "The types permitted in a const declaration are limited to those described in this message."
    },
    {
      "Code": "CS2001",
      "Title": "Source file 'file' could not be found",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2001",
      "Description": "A source file name was passed to the compiler, but could not be located. Check the spelling of the file name and the location of the file."
    },
    {
      "Code": "CS2003",
      "Title": "Response file 'file' included multiple times",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2003",
      "Description": "A response file was passed to the compiler more than once. A response file can only be passed to the compiler once per output file."
    },
    {
      "Code": "CS2005",
      "Title": "Missing file specification for 'option' option",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2005",
      "Description": "A compiler option was only partially specified."
    },
    {
      "Code": "CS2006",
      "Title": "Command-line syntax error: Missing 'text' for 'option' option",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2006",
      "Description": "The syntax for option requires additional text. For information, see Compiler Options."
    },
    {
      "Code": "CS2007",
      "Title": "Unrecognized command-line option: 'option'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2007",
      "Description": "The compiler was passed a string that was not a compiler option, even though it began with a forward slash (/)."
    },
    {
      "Code": "CS2008",
      "Title": "No inputs specified",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2008",
      "Description": "The compiler was invoked and compiler options were specified, but no source-code files were passed."
    },
    {
      "Code": "CS2011",
      "Title": "Unable to open response file 'file'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2011",
      "Description": "A response file was specified in a compilation, but the compiler was unable to locate and open the file."
    },
    {
      "Code": "CS2012",
      "Title": "Cannot open 'file' for writing",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2012",
      "Description": "While using the -bugreport:, file compiler option, the file could not be opened for writing. Make sure you specified a valid file name and that the file is not read-only."
    },
    {
      "Code": "CS2013",
      "Title": "Invalid image base number 'value'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2013",
      "Description": "An invalid value (not a number) was passed to the BaseAddress compiler option."
    },
    {
      "Code": "CS2015",
      "Title": "'file' is a binary file instead of a text file",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2015",
      "Description": "A file was passed to the compiler that was a binary file. The compiler expects a source code file."
    },
    {
      "Code": "CS2016",
      "Title": "Code page 'codepage' is invalid or not installed",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2016",
      "Description": "The CodePage compiler option was passed an invalid value."
    },
    {
      "Code": "CS2017",
      "Title": "Cannot specify /main if building a module or library",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2017",
      "Description": "You cannot specify a main entry point when you are building a library TargetType."
    },
    {
      "Code": "CS2018",
      "Title": "Unable to find messages file 'cscmsgs.dll'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2018",
      "Description": "The .dll file that contains the compiler's error and warning messages was not found. This file must be present in the same directory as the other compiler support files."
    },
    {
      "Code": "CS2019",
      "Title": "Invalid target type for /target: must specify 'exe', 'winexe', 'library', or 'module'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2019",
      "Description": "The TargetType compiler option was used, but an invalid parameter was passed. To resolve this error, recompile the program using the form of the /target option that is appropriate to your output file."
    },
    {
      "Code": "CS2020",
      "Title": "Only the first set of input files can build a target other than 'module'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2020",
      "Description": "In a multi-output compilation, the first output file must be built with -target:exe, -target:winexe, or -target:library. Any subsequent output files must be built with -target:module."
    },
    {
      "Code": "CS2021",
      "Title": "File name 'file' is too long or invalid",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2021",
      "Description": "All file names passed to the C# compiler must be no longer than _MAX_PATH (defined in a Windows header file). the compiler will give this error in the following situations:"
    },
    {
      "Code": "CS2022",
      "Title": "Options '/out' and '/target' must appear before source file names",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2022",
      "Description": "The **-out **(Set Output Filename) and -target (Specify Output File Format) compiler options, when specified on the command line, must precede the source code files."
    },
    {
      "Code": "CS2024",
      "Title": "Invalid file section alignment number '#'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2024",
      "Description": "An invalid value was passed to the FileAlignment compiler option."
    },
    {
      "Code": "CS2032",
      "Title": "Character 'character' is not allowed on the command-line or in response files",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs2032",
      "Description": "Response files and the command line options for csc.exe cannot contain ASCII control characters in the range 0-31 or the pipe (|) character."
    },
    {
      "Code": "CS2033",
      "Title": "Cannot create short filename 'filename' when a long filename with the same short filename already exists",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2033",
      "Description": "Compile any C# file with a name longer than eight characters. Then compile another file with the short version of the preceding file name, such as the first six characters of the name plus &quot;~1.&quot; The second compile will generate this error."
    },
    {
      "Code": "CS2034",
      "Title": "A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2034",
      "Description": "To specify two aliases and/or file names, use two /reference options, like this:"
    },
    {
      "Code": "CS2035",
      "Title": "Command-line syntax error:  Missing ':&lt;number&gt;' for 'compiler_option' option",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2035",
      "Description": "Some compiler options require a value."
    },
    {
      "Code": "CS2036",
      "Title": "The /pdb option requires that the /debug option also be used.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2036",
      "Description": "Program database files are only generated for debug builds. The /pdb option is therefore meaningless in a retail build."
    },
    {
      "Code": "CS4009",
      "Title": "'Type.Method': an entry point cannot be marked with the async modifier.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs4009",
      "Description": "You cannot use the async keyword in the application entry point (typically the Main method)."
    },
    {
      "Code": "CS5001",
      "Title": "Program does not contain a static 'Main' method suitable for an entry point",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs5001",
      "Description": "This error occurs when no static Main method with a correct signature is found in the code that produces an executable file. It also occurs if the entry point function, Main, is defined with the wrong case, such as lower-case main. For information about the rules that apply to the Main method, see Main() and Command-Line Arguments."
    },
    {
      "Code": "CS7003",
      "Title": "Unexpected use of an unbound generic name",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs7003",
      "Description": "This error occurs if you use a generic type needing one parameter type without passing any generic parameter type name between the angle brackets. This use may be a variable declaration, or an object instantiation."
    },
    {
      "Code": "CS8400",
      "Title": "Feature 'feature' is not available in C# 8.0. Please use language version &lt;version&gt; or greater.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8400",
      "Description": "Upgrade your project to at least the version mentioned in the error."
    },
    {
      "Code": "CS8401",
      "Title": "To use '@$' instead of '$@' for an interpolated verbatim string, please use language version '8.0' or greater.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8401",
      "Description": "In older versions before C# 8.0, verbatim interpolated strings were only allowed using $@. Starting with C# 8.0, you can use $@ or @$."
    },
    {
      "Code": "CS8403",
      "Title": "Method 'method' with an iterator block must be 'async' to return '{IAsyncEnumerable&lt;T&gt;|IAsyncEnumerator&lt;T&gt;}'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8403",
      "Description": "Mark your method with the async modifier."
    },
    {
      "Code": "CS8410",
      "Title": "'type': type used in an asynchronous using statement must be implicitly convertible to 'System.IAsyncDisposable' or implement a suitable 'DisposeAsync' method.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8410",
      "Description": "The expression inside an await using statement must have a DisposeAsync method."
    },
    {
      "Code": "CS8411",
      "Title": "Asynchronous foreach statement cannot operate on variables of type 'type' because 'type' does not contain a suitable public instance definition for 'GetAsyncEnumerator'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8411",
      "Description": "await foreach statement operates only on types having a definition of GetAsyncEnumerator, such as IAsyncEnumerable&lt;T&gt;."
    },
    {
      "Code": "CS0183",
      "Title": "The given expression is always of the provided ('type') type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0183",
      "Description": "If a conditional statement always evaluates to true, then you do not need a conditional statement. This warning occurs when you try to evaluate a type using the is operator. If the evaluation is a value type, then the check is unnecessary."
    },
    {
      "Code": "CS0184",
      "Title": "The given expression is never of the provided ('type') type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0184",
      "Description": "The expression can never be true because the variable you are testing is neither declared as type nor derived from type."
    },
    {
      "Code": "CS0197",
      "Title": "Passing 'argument' as ref or out or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0197",
      "Description": "Any class that derives, directly or indirectly, from MarshalByRefObject is a marshal-by-reference class. Such a class can be marshaled by reference across process and machine boundaries. Thus, instances of this class could be proxies to remote objects. You cannot pass a field of a proxy object as ref or out. So, you cannot pass fields of such a class as ref or out, unless the instance is this, which can not be a proxy object."
    },
    {
      "Code": "CS0420",
      "Title": "'identifier': a reference to a volatile field will not be treated as volatile",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0420",
      "Description": "A volatile field should not normally be passed using a ref or out parameter, since it will not be treated as volatile within the scope of the function. There are exceptions to this, such as when calling an interlocked API. As with any warning, you may use the #pragma warning to disable this warning in those rare cases where you are intentionally using a volatile field as a reference parameter."
    },
    {
      "Code": "CS0465",
      "Title": "Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0465",
      "Description": "This warning occurs when you create a class with a method whose signature is public virtual void Finalize."
    },
    {
      "Code": "CS0602",
      "Title": "The feature 'old_feature' is deprecated. Please use 'new_feature' instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0602",
      "Description": "A language feature used in your code (old_feature) is still supported, but that support may be removed in a future release. Instead, you should use the recommended syntax (new_feature)."
    },
    {
      "Code": "CS0612",
      "Title": "'member' is obsolete",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0612",
      "Description": "The class designer marked a member with the Obsolete attribute. This means that the member might not be supported in a future version of the class."
    },
    {
      "Code": "CS0626",
      "Title": "Method, operator, or accessor 'method' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0626",
      "Description": "A method marked extern should also be marked with an attribute, for example, the DllImport attribute."
    },
    {
      "Code": "CS0657",
      "Title": "'attribute modifier' is not a valid attribute location for this declaration. Valid attribute locations for this declaration are 'locations'. All attributes in this block will be ignored.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0657",
      "Description": "The compiler found an attribute modifier in an invalid location. See Attribute Targets for more information."
    },
    {
      "Code": "CS0658",
      "Title": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0658",
      "Description": "An invalid attribute modifier was specified. See Attribute Targets for more information."
    },
    {
      "Code": "CS0672",
      "Title": "Member 'member1' overrides obsolete member 'member2. Add the Obsolete attribute to 'member1'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0672",
      "Description": "The compiler found an override to a method marked as obsolete. However, the overriding method was not itself marked as obsolete. The overriding method will still generate CS0612, if called."
    },
    {
      "Code": "CS0684",
      "Title": "'interface' interface marked with 'CoClassAttribute' not marked with 'ComImportAttribute'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0684",
      "Description": "If you specify CoClassAttribute on an interface, you must also specify ComImportAttribute."
    },
    {
      "Code": "CS0688",
      "Title": "'method1' has a link demand, but overrides or implements 'method2' which does not have a link demand. A security hole may exist.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0688",
      "Description": "The link demand set up on the derived class method can easily be circumvented by calling the base class method. To close the security hole, the base class method needs to also use the link demand. For more information, see Demand vs. LinkDemand."
    },
    {
      "Code": "CS0809",
      "Title": "Obsolete member 'memberA' overrides non-obsolete member 'memberB'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0809",
      "Description": "Typically, a member that is marked as obsolete should not override a member that is not marked as obsolete. This warning is generated in Visual Studio 2008 but not in Visual Studio 2005."
    },
    {
      "Code": "CS0824",
      "Title": "Constructor 'name' is marked external.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0824",
      "Description": "A constructor may be marked as extern. However, the compiler cannot verify that the constructor actually exists. Therefore the warning is generated."
    },
    {
      "Code": "CS1030",
      "Title": "#warning: 'text'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1030",
      "Description": "Displays the text of a warning defined with the #warning directive."
    },
    {
      "Code": "CS1058",
      "Title": "A previous catch clause already catches all exceptions. All exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1058",
      "Description": "This attribute causes CS1058 if a catch() block has no specified exception type after a catch (System.Exception e) block. The warning advises that the catch() block will not catch any exceptions."
    },
    {
      "Code": "CS1060",
      "Title": "Use of possibly unassigned field 'name'. Struct instance variables are initially unassigned if struct is unassigned.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1060",
      "Description": "Struct members are initialized to their default value if you do not explicitly initialize them. The default value for class types (and other reference types) is null. If the class is not initialized before any attempt to access it, a NullReferenceException will be thrown at run time. The compiler cannot determine definitively whether the class member will be initialized or not, and so CS1060 is a warning and not an error."
    },
    {
      "Code": "CS1200",
      "Title": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1200",
      "Description": "The feature you are attempting to use is now deprecated. Update your code to use the valid feature instead."
    },
    {
      "Code": "CS1201",
      "Title": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1201",
      "Description": "The feature you are attempting to use is now deprecated. Update your code to use the valid feature instead."
    },
    {
      "Code": "CS1202",
      "Title": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1202",
      "Description": "The feature you are attempting to use is now deprecated. Update your code to use the valid feature instead."
    },
    {
      "Code": "CS1203",
      "Title": "The feature 'feature' is deprecated. Please use 'feature' instead'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1203",
      "Description": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead'."
    },
    {
      "Code": "CS1522",
      "Title": "Empty switch block",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1522",
      "Description": "The compiler detected a switch block with no case or default statement. A switch block must have one or more case or default statements."
    },
    {
      "Code": "CS1570",
      "Title": "XML comment on 'construct' has badly formed XML — 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1570",
      "Description": "When using DocumentationFile, any comments in the source code must be in XML. Any error with your XML markup will generate CS1570. For example:"
    },
    {
      "Code": "CS1574",
      "Title": "XML comment on 'construct' has syntactically incorrect cref attribute 'name'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1574",
      "Description": "A string passed to a cref tag, for example, within an &lt;exception&gt; tag, referred to a member that is not available within the current build environment. The string that you pass to a cref tag must be the syntactically correct name of a member or field."
    },
    {
      "Code": "CS1580",
      "Title": "Invalid type for parameter 'parameter number' in XML comment cref attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1580",
      "Description": "When attempting to reference an overload form of a method, the compiler detected a syntax error. Typically, this indicates that the parameter name, and not the type, was specified. A malformed line will appear in the generated XML file."
    },
    {
      "Code": "CS1581",
      "Title": "Invalid return type in XML comment cref attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1581",
      "Description": "When attempting to reference a method, the compiler detected an error due to an invalid return type."
    },
    {
      "Code": "CS1584",
      "Title": "XML comment on 'member' has syntactically incorrect cref attribute 'invalid_syntax'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1584",
      "Description": "One of the parameters passed to a tag for documentation comments has invalid syntax. For more information, see Recommended Tags for Documentation Comments."
    },
    {
      "Code": "CS1589",
      "Title": "Unable to include XML fragment 'fragment' of file 'file' -- reason",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1589",
      "Description": "The syntax (fragment) of a &lt;include&gt; tag, which referenced a file (file), was incorrect for the specified reason."
    },
    {
      "Code": "CS1590",
      "Title": "Invalid XML include element -- Missing file attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1590",
      "Description": "A path or doc attribute, passed to the &lt;include&gt; tag, was missing or incomplete."
    },
    {
      "Code": "CS1592",
      "Title": "Badly formed XML in included comments file -- 'reason'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1592",
      "Description": "A problem, reported as reason, was found in the file specified by the &lt;include&gt; tag."
    },
    {
      "Code": "CS1598",
      "Title": "XML parser could not be loaded for the following reason: 'reason'. The XML documentation file 'file' will not be generated.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1598",
      "Description": "The DocumentationFile option was specified, but the compiler could not find and load msxml3.dll. Make sure that the file msxml3.dll is installed and registered."
    },
    {
      "Code": "CS1607",
      "Title": "Assembly generation -- reason",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1607",
      "Description": "A warning was generated from the assembly-creation phase of the compilation."
    },
    {
      "Code": "CS1616",
      "Title": "Option 'option' overrides attribute 'attribute' given in a source file or added module",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1616",
      "Description": "This warning occurs if the assembly attributes AssemblyKeyFileAttribute or AssemblyKeyNameAttribute found in source conflict with the KeyFile or KeyContainer command line option or key file name or key container specified in the Project Properties."
    },
    {
      "Code": "CS1633",
      "Title": "Unrecognized #pragma directive",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1633",
      "Description": "The pragma used was not one of the known pragmas supported by the C# compiler. To resolve this error, use only pragmas supported."
    },
    {
      "Code": "CS1634",
      "Title": "Expected disable or restore",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1634",
      "Description": "This error occurs if a #pragma warning clause is badly formed, such as if disable or restore was omitted. For more information, see the #pragma warning topic."
    },
    {
      "Code": "CS1635",
      "Title": "Cannot restore warning 'warning code' because it was disabled globally",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1635",
      "Description": "This warning occurs if you use the /nowarn command line option or project setting to disable a warning for the entire compilation unit, but you use #pragma warning restore to attempt to restore that warning. To resolve this error, remove the /nowarn command line option or project setting, or remove the #pragma warning restore for any warnings you are disabling via the command line or project settings. For more information, see #pragma warning."
    },
    {
      "Code": "CS1645",
      "Title": "Feature 'feature' is not part of the standardized ISO C# language specification, and may not be accepted by other compilers",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1645",
      "Description": "The feature you are using is not part of the ISO standard. Code using this feature may not compile on other compilers."
    },
    {
      "Code": "CS1658",
      "Title": "'warning text'. See also error 'error code'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1658",
      "Description": "The compiler emits this warning when it overrides an error with a warning. For information about the problem, refer to the error mentioned. To find the appropriate error from within the Visual Studio IDE, use the index. For example, if the text above reads &quot;See also error 'CS1037',&quot; look for CS1037 in the index."
    },
    {
      "Code": "CS1682",
      "Title": "Reference to type 'type' claims it is nested within 'nested type', but it could not be found",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1682",
      "Description": "This error arises when you import references that do not agree with other references or with code you have written. A common way to get this error is to write code that refers to a class in metadata, and then you either delete that class or modify its definition."
    },
    {
      "Code": "CS1683",
      "Title": "Reference to type 'Type Name' claims it is defined in this assembly, but it is not defined in source or any added modules",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1683",
      "Description": "This error can occur when you are importing an assembly that contains a reference back to the assembly you are currently compiling, but the assembly being compiled contains nothing matching the reference. One way to get to this situation is to compile your assembly, which initially does contain the member that the assembly being imported is referencing. Then you update your assembly, mistakenly removing the members that the imported assembly is referencing."
    },
    {
      "Code": "CS1684",
      "Title": "Reference to type 'Type Name' claims it is defined in 'Namespace', but it could not be found",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1684",
      "Description": "This error can be caused by a reference inside one namespace referring to a type that it says exists inside a second namespace, but the type does not exist. For example, mydll.dll says that type A exists inside yourdll.dll, but no such type exists inside yourdll.dll. One possible cause of this error is that the version of yourdll.dll you are using is too old and A has not yet been defined."
    },
    {
      "Code": "CS1685",
      "Title": "The predefined type 'System.type name' is defined in multiple assemblies in the global alias; using definition from 'File Name'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1685",
      "Description": "This error occurs when a predefined system type such as System.int32 is found in two assemblies. One way this can happen is if you are referencing mscorlib from two different places, such as trying to run the .NET Framework versions 1.0 and 1.1 side-by-side."
    },
    {
      "Code": "CS1687",
      "Title": "Source file has exceeded the limit of 16,707,565 lines representable in the PDB, debug information will be incorrect",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1687",
      "Description": "The PDB and debugger have some limitations about how big a file can be. If the source file is too big, the debugger will not behave properly beyond that limit. The user should either not emit debug information for that file by possibly using #line hidden, or they should find a way to shrink the file, possibly by splitting the file into multiple files. They might want to use the partial keyword to split up a large class."
    },
    {
      "Code": "CS1690",
      "Title": "Accessing a member on 'member' may cause a runtime exception because it is a field of a marshal-by-reference class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1690",
      "Description": "This warning occurs when you try to call a method, property, or indexer on a member of a class that derives from MarshalByRefObject, and the member is a value type. Objects that inherit from MarshalByRefObject are typically intended to be marshaled by reference across an application domain. If any code ever attempts to directly access the value-type member of such an object across an application domain, a runtime InvalidOperationException will occur. To resolve the warning, first copy the member into a local variable and call the method on that variable."
    },
    {
      "Code": "CS1691",
      "Title": "'number' is not a valid warning number",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1691",
      "Description": "A number that was passed to the #pragma warning preprocessor directive was not a valid warning number. Verify that the number represents a warning, not an error or another sequence of characters."
    },
    {
      "Code": "CS1692",
      "Title": "Invalid number",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1692",
      "Description": "A number of preprocessor directives, such as #pragma and #line, use numbers as parameters. One of these numbers is invalid because it is too big, in the wrong format, contains illegal characters, and so on. To correct this error, correct the number."
    },
    {
      "Code": "CS1694",
      "Title": "Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1694",
      "Description": "This warning occurs when using the #pragma checksum preprocessor directive. The file name specified is longer than 256 characters. To resolve this warning, use a shorter file name."
    },
    {
      "Code": "CS1695",
      "Title": "Invalid #pragma checksum syntax; should be #pragma checksum &quot;filename&quot; &quot;{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}&quot; &quot;XXXX...&quot;",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1695",
      "Description": "You should rarely encounter this error since the checksum is generally inserted at run time if you are generating code by means of the Code Dom API."
    },
    {
      "Code": "CS1696",
      "Title": "Single-line comment or end-of-line expected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1696",
      "Description": "The compiler requires a preprocessor directive to be followed by an end-of-line terminator or by a single-line comment. The compiler has finished processing a valid preprocessor directive, and has encountered something that violates this syntax constraint."
    },
    {
      "Code": "CS1697",
      "Title": "Different checksum values given for 'file name'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1697",
      "Description": "You have specified more than one checksum for a given file. The debugger uses the checksum value to determine which file to debug when there is more than one file in a project with the same name. Most users will not encounter this error, but if you are writing an application that generates code, you may run into it. To resolve this error, ensure that you generate the checksum only once for any given code file."
    },
    {
      "Code": "CS1699",
      "Title": "Use command line option &quot;compiler_option&quot; or appropriate project settings instead of &quot;attribute_name&quot;",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1699",
      "Description": "In order to sign an assembly, it is necessary to specify a key file. Prior to C# 2.0, you specified the key file using CLR attributes in source code. These attributes are now deprecated."
    },
    {
      "Code": "CS1707",
      "Title": "Delegate 'DelegateName' bound to 'MethodName1' instead of 'MethodName2' because of new language rules",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1707",
      "Description": "C# 2.0 implements new rules for binding a delegate to a method. Additional information is considered that was not looked at in the past. This warning indicates that the delegate is now bound to a different overload of the method than it was previously bound to. You may wish to verify that the delegate really should be bound to 'MethodName1' instead of 'MethodName2'."
    },
    {
      "Code": "CS1709",
      "Title": "Filename specified for preprocessor directive is empty",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1709",
      "Description": "You have specified a preprocessor directive that includes a file name, but that file is empty. To resolve this warning, put the needed content into the file."
    },
    {
      "Code": "CS1720",
      "Title": "Expression will always cause a System.NullReferenceException because the default value of 'generic type' is null",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1720",
      "Description": "If you write an expression involving the default of a generic type variable that is a reference type (for example, a class), this error will occur. Consider the following expression:"
    },
    {
      "Code": "CS1723",
      "Title": "XML comment on 'param' has cref attribute 'attribute' that refers to a type parameter",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1723",
      "Description": "This error is generated by an XML comment that refers to a type parameter."
    },
    {
      "Code": "CS1762",
      "Title": "A reference was created to embedded interop assembly '&lt;assembly1&gt;' because of an indirect reference to that assembly from assembly '&lt;assembly2&gt;'. Consider changing the 'Embed Interop Types' property on either assembly.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1762",
      "Description": "You have added a reference to an assembly (assembly1) that has the Embed Interop Types property set to True. This instructs the compiler to embed interop type information from that assembly. However, the compiler cannot embed interop type information from that assembly because another assembly that you have referenced (assembly2) also references that assembly (assembly1) and has the Embed Interop Types property set to False."
    },
    {
      "Code": "CS1911",
      "Title": "Access to member 'name' through a 'base' keyword from an anonymous method, lambda expression, query expression, or iterator results in unverifiable code. Consider moving the access into a helper method on the containing type.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1911",
      "Description": "Calling virtual functions with the base keyword inside the method body of an iterator or anonymous methods will result in unverifiable code. Unverifiable code will fail to run in a partial trust environment."
    },
    {
      "Code": "CS1956",
      "Title": "Member 'name' implements interface member 'name' in type 'type'. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1956",
      "Description": "This warning can be generated when two interface methods are differentiated only by whether a particular parameter is marked with ref or with out. It is best to change your code to avoid this warning because it is not obvious or guaranteed which method is called at run time."
    },
    {
      "Code": "CS1957",
      "Title": "Member 'name' overrides 'method'. There are multiple override candidates at run-time. It is implementation dependent which method will be called.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1957",
      "Description": "Method parameters that vary only by whether they are ref or out cannot be differentiated at run-time."
    },
    {
      "Code": "CS2002",
      "Title": "Source file 'file' specified multiple times",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2002",
      "Description": "A source file name was passed to the compiler more than once. You can only specify a file once to the compiler to build an output file."
    },
    {
      "Code": "CS2014",
      "Title": "Compiler option 'old option' is obsolete, please use 'new option' instead",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2014",
      "Description": "The form of the compiler option is deprecated. See C# Compiler Options for more information."
    },
    {
      "Code": "CS2023",
      "Title": "Ignoring /noconfig option because it was specified in a response file",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2023",
      "Description": "The -noconfig compiler option was specified in a response file, which is not allowed."
    },
    {
      "Code": "CS2029",
      "Title": "Invalid value for '/define'; 'identifier' is not a valid identifier",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2029",
      "Description": "This warning occurs if the value that is used in the DefineConstants option has some invalid characters."
    },
    {
      "Code": "CS3000",
      "Title": "Methods with variable arguments are not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3000",
      "Description": "The arguments used in the method expose features that are not in the Common Language Specifications (CLS). For more information on CLS Compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3001",
      "Title": "Argument type 'type' is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3001",
      "Description": "A public, protected, or protected internal method must accept a parameter whose type is compliant with the Common Language Specification (CLS). For more information on CLS compliance, see  Language independence and language-independent components."
    },
    {
      "Code": "CS3002",
      "Title": "Return type of 'method' is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3002",
      "Description": "A public, protected, or protected internal method must return a value whose type is compliant with the Common Language Specification (CLS). For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3003",
      "Title": "Type of 'variable' is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs3003",
      "Description": "A public, protected, or protected internal variable must be of a type that is compliant with the Common Language Specification (CLS). For more information on CLS Compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3004",
      "Title": "Mixed and decomposed Unicode characters are not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3004",
      "Description": "Only composed UNICODE characters are allowed in public, protected, or protected internal identifiers in order to be compliant with the Common Language Specification (CLS). For more information on CLS Compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3005",
      "Title": "Identifier 'identifier' differing only in case is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3005",
      "Description": "A public, protected, or protected internal identifier, which differs from another public, protected, or protected internal identifier only in the case of one or more letters, is not compliant with the Common Language Specification (CLS). For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3006",
      "Title": "Overloaded method 'method' differing only in ref or out, or in array rank, is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3006",
      "Description": "A method does not cannot be overloaded based on the ref or out parameter and still comply with the Common Language Specification (CLS). For more information on CLS Compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3007",
      "Title": "Overloaded method 'method' differing only by unnamed array types is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs3007",
      "Description": "This error occurs if you have an overloaded method that takes a jagged array and the only difference between the method signatures is the element type of the array. To avoid this error, consider using a rectangular array rather than a jagged array; use an additional parameter to disambiguate the function call; rename one or more of the overloaded methods; or, if CLS Compliance is not needed, remove the CLSCompliantAttribute attribute. For more information on CLS Compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3008",
      "Title": "Identifier 'identifier' differing only in case is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3008",
      "Description": "A public, protected, or protected internal identifier breaks compliance with the Common Language Specification (CLS) if it begins with an underscore character (_). For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3009",
      "Title": "'type': base type 'type' is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs3009",
      "Description": "A base type was marked as not having to be compliant with the Common Language Specification (CLS) in an assembly that was marked as being CLS compliant. Either remove the attribute that specifies the assembly is CLS compliant or remove the attribute that indicates the type is not CLS compliant. For more information on CLS Compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3010",
      "Title": "'member': CLS-compliant interfaces must have only CLS-compliant members",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3010",
      "Description": "In an assembly marked with [assembly:CLSCompliant(true)], an interface contains a member marked with [CLSCompliant(false)]. Remove one of the Common Language Specification (CLS) compliance attributes. For more information about CLS Compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3011",
      "Title": "'member': only CLS-compliant members can be abstract",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3011",
      "Description": "A class member cannot be both abstract and non-compliant with the Common Language Specification (CLS). The CLS specifies that all class members shall be implemented. For more information about CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3012",
      "Title": "You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3012",
      "Description": "In order for a module to be compliant with the Common Language Specification (CLS) through [module:System.CLSCompliant(true)], it must be built with the module element of the TargetType compiler option. For more information on the CLS, see Language independence and language-independent components."
    },
    {
      "Code": "CS3013",
      "Title": "Added modules must be marked with the CLSCompliant attribute to match the assembly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3013",
      "Description": "A module that was compiled with the module element of the TargetType compiler option was added to a compilation with AddModule. However, the module's compliance with the Common Language Specification (CLS) does not agree with the CLS state of the current compilation."
    },
    {
      "Code": "CS3014",
      "Title": "'member' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3014",
      "Description": "In a source code file where compliance with the Common Language Specification (CLS) was not specified, a construct in the file was marked as being CLS compliant. This is not allowed. To resolve this warning, add an assembly level CLS compliant attribute to the file (in the following example, uncomment the line that contains the assembly level attribute). For more information about CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3015",
      "Title": "'method signature' has no accessible constructors which use only CLS-compliant types",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3015",
      "Description": "To be compliant with the Common Language Specification (CLS), the argument list of an attribute class cannot contain an array. For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3016",
      "Title": "Arrays as attribute arguments is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3016",
      "Description": "It is not compliant with the Common Language Specification (CLS) to pass an array to an attribute. For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3017",
      "Title": "You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3017",
      "Description": "This warning occurs if you have a assembly CLSCompliant attribute that conflicts with a module CLSCompliant attribute. An assembly that is CLS compliant cannot contain modules that are not CLS compliant. To resolve this warning, make sure the assembly and module CLSCompliant attributes are either both true or both false, or remove one of the attributes. For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3018",
      "Title": "'type' cannot be marked as CLS-Compliant because it is a member of non CLS-compliant type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3018",
      "Description": "This warning occurs if a nested class with the CLSCompliant attribute set to true is declared as a member of a class declared with the CLSCompliant attribute set to false. This is not allowed, since a nested class cannot be CLS-compliant if it is a member of an outer class that is not CLS-compliant. To resolve this warning, remove the CLSCompliant attribute from the nested class, or change it from true to false. For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3022",
      "Title": "CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3022",
      "Description": "Method parameters are not checked for CLS Compliance, since the CLS Compliance rules apply to methods and type declarations."
    },
    {
      "Code": "CS3023",
      "Title": "CLSCompliant attribute has no meaning when applied to return types.  Try putting it on the method instead.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3023",
      "Description": "Function return types are not checked for CLS Compliance, since the CLS Compliance rules apply to methods and type declarations."
    },
    {
      "Code": "CS3024",
      "Title": "Constraint type 'type' is not CLS-compliant.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3024",
      "Description": "The compiler issues this warning because the use of a non-CLS-compliant type as a generic type constraint could make it impossible for code written in some languages to consume your generic class."
    },
    {
      "Code": "CS3026",
      "Title": "CLS-compliant field 'field' cannot be volatile",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3026",
      "Description": "A volatile variable should not be CLS compliant."
    },
    {
      "Code": "CS3027",
      "Title": "'type_1' is not CLS-compliant because base interface 'type_2' is not CLS-compliant",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3027",
      "Description": "A non-CLS compliant type cannot be a base type for a type that is CLS compliant."
    },
    {
      "Code": "CS4014",
      "Title": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the await operator to the result of the call.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs4014",
      "Description": "The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn't apply the await operator to the result. The call to the async method starts an asynchronous task. However, because no await operator is applied, the program continues without waiting for the task to complete. In most cases, that behavior isn't what you expect. Usually other aspects of the calling method depend on the results of the call or, minimally, the called method is expected to complete before you return from the method that contains the call."
    },
    {
      "Code": "CS5000",
      "Title": "Unknown compiler option '/option'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs5000",
      "Description": "An invalid compiler option was specified."
    },
    {
      "Code": "CS0108",
      "Title": "'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0108",
      "Description": "A variable was declared with the same name as a variable in a base class. However, the new keyword was not used. This warning informs you that you should use new; the variable is declared as if new had been used in the declaration."
    },
    {
      "Code": "CS0114",
      "Title": "'function1' hides inherited member 'function2'. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0114",
      "Description": "A declaration in a class conflicts with a declaration in a base class such that the base class member will be hidden."
    },
    {
      "Code": "CS0162",
      "Title": "Unreachable code detected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0162",
      "Description": "The compiler detected code that will never be executed."
    },
    {
      "Code": "CS0164",
      "Title": "This label has not been referenced",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0164",
      "Description": "A label was declared but never used."
    },
    {
      "Code": "CS0251",
      "Title": "Indexing an array with a negative index (array indices always start at zero)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0251",
      "Description": "Do not use a negative number to index into an array."
    },
    {
      "Code": "CS0252",
      "Title": "Possible unintended reference comparison; to get a value comparison, cast the left hand side to type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0252",
      "Description": "The compiler is doing a reference comparison. If you want to compare the value of strings, cast the left side of the expression to type."
    },
    {
      "Code": "CS0253",
      "Title": "Possible unintended reference comparison; to get a value comparison, cast the right hand side to type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0253",
      "Description": "The compiler is doing a reference comparison. If you want to compare the value of strings, cast the right side of the expression to type."
    },
    {
      "Code": "CS0278",
      "Title": "'type' does not implement the 'pattern name' pattern. 'method name' is ambiguous with 'method name'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0278",
      "Description": "There are several statements in C# that rely on defined patterns, such as foreach and using. For example, the foreach statement relies on the collection class implementing the &quot;enumerable&quot; pattern."
    },
    {
      "Code": "CS0279",
      "Title": "'type name' does not implement the 'pattern name' pattern. 'method name' is either static or not public.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0279",
      "Description": "There are several statements in C# that rely on defined patterns, such as foreach and using. For example, foreach relies on the collection class implementing the enumerable pattern. This error occurs when the compiler is unable to make the match due to a method being declared static or not public. Methods in patterns are required to be instances of classes, and to be public."
    },
    {
      "Code": "CS0280",
      "Title": "'type' does not implement the 'pattern name' pattern. 'method name' has the wrong signature.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0280",
      "Description": "Two statements in C#, foreach and using, rely on predefined patterns, &quot;collection&quot; and &quot;resource&quot; respectively. This warning occurs when the compiler cannot match one of these statements to its pattern due to a method's incorrect signature. For example, the &quot;collection&quot; pattern requires that there be a method called MoveNext which takes no parameters and returns a boolean. Your code might contain a MoveNext method that has a parameter or perhaps returns an object."
    },
    {
      "Code": "CS0435",
      "Title": "The namespace 'namespace' in 'assembly' conflicts with the imported type 'type' in 'assembly'. Using the namespace defined in 'assembly'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0435",
      "Description": "This warning is issued when a namespace in a source file (file_2) conflicts with an imported type in file_1. The compiler uses the one in the source file."
    },
    {
      "Code": "CS0436",
      "Title": "The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0436",
      "Description": "This warning is issued when a type in a source file (file_2) conflicts with an imported type in file_1. The compiler uses the one in the source file."
    },
    {
      "Code": "CS0437",
      "Title": "The type 'type' in 'assembly2' conflicts with the imported namespace 'namespace' in 'fassembly1'. Using the type defined in 'assembly'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0437",
      "Description": "This warning is issued when a type in a source file, file_2, conflicts with an imported namespace in file_1. The compiler uses the type in the source file."
    },
    {
      "Code": "CS0440",
      "Title": "Defining an alias named 'global' is ill-advised since 'global::' always references the global namespace and not an alias",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0440",
      "Description": "This warning is issued when you define an alias named global."
    },
    {
      "Code": "CS0444",
      "Title": "Predefined type 'type name 1' was not found in 'System namespace 1' but was found in 'System namespace 2'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0444",
      "Description": "A predefined object such as Int32 was not found where the compiler expected to find it, but instead found it in 'System namespace 2'."
    },
    {
      "Code": "CS0458",
      "Title": "The result of the expression is always 'null' of type 'type name'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0458",
      "Description": "This warning is caused by a nullable value type expression that always results in null."
    },
    {
      "Code": "CS0464",
      "Title": "Comparing with null of type 'type' always produces 'false'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0464",
      "Description": "This warning is produced when you perform a comparison between a nullable value type variable and null, and the comparison is not == or !=. To resolve this error, verify if you really want to check a value for null. A comparison like i == null can be either true of false. A comparison like i &gt; null is always false."
    },
    {
      "Code": "CS0467",
      "Title": "Ambiguity between method 'method' and non-method 'non-method'. Using method group.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0467",
      "Description": "Inherited members from different interfaces that have the same signature  cause an ambiguity error."
    },
    {
      "Code": "CS0469",
      "Title": "The 'goto case' value is not implicitly convertible to type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0469",
      "Description": "When you use goto case, there must be an implicit conversion from the value of the goto case to the type of the switch."
    },
    {
      "Code": "CS0472",
      "Title": "The result of the expression is always 'value1' since a value of type 'value2' is never equal to 'null' of type 'value3'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0472",
      "Description": "The compiler should warn if you use an operator with a constant null value."
    },
    {
      "Code": "CS0618",
      "Title": "'member' is obsolete: 'text'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0618",
      "Description": "A class member was marked with the Obsolete attribute, such that a warning will be issued when the class member is referenced. For more information, see Common Attributes."
    },
    {
      "Code": "CS0652",
      "Title": "Comparison to integral constant is useless; the constant is outside the range of type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0652",
      "Description": "The compiler detected a comparison between a constant and a variable where the constant is out of the range of the variable."
    },
    {
      "Code": "CS0728",
      "Title": "Possibly incorrect assignment to local 'variable' which is the argument to a using or lock statement.  The Dispose call or unlocking will happen on the original value of the local.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0728",
      "Description": "There are several scenarios where using or lock blocks will result in a temporary leak of resources. Here is one example:"
    },
    {
      "Code": "CS1571",
      "Title": "XML comment on 'construct' has a duplicate param tag for 'parameter'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1571",
      "Description": "When using the DocumentationFile compiler option, multiple comments were found for the same method parameter. Remove one of the duplicate lines."
    },
    {
      "Code": "CS1572",
      "Title": "XML comment on 'construct' has a param tag for 'parameter', but there is no parameter by that name",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1572",
      "Description": "When using the DocumentationFile compiler option, a comment was specified for a parameter that does not exist for the method. Change the value passed to the name attribute or remove one of the comment lines."
    },
    {
      "Code": "CS1587",
      "Title": "XML comment is not placed on a valid language element",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1587",
      "Description": "Recommended tags for documentation comments are not allowed on all language elements. For example, a tag is not allowed on a namespace. For more information on XML comments, see Recommended Tags for Documentation Comments."
    },
    {
      "Code": "CS1668",
      "Title": "Invalid search path 'path' specified in 'path string' --  'system error message'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1668",
      "Description": "The path supplied to AdditionalLibPaths at the command line was not valid, or a path in the LIB environment variable is invalid. Check the path used to verify that it exists and can be accessed. The error message in single quotation marks is the error returned from the operating system."
    },
    {
      "Code": "CS1698",
      "Title": "Circular assembly reference 'AssemblyName1' does not match the output assembly name 'AssemblyName2'. Try adding a reference to 'AssemblyName1' or changing the output assembly name to match.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1698",
      "Description": "CS1698 occurs when an assembly reference is incorrect. This can happen if a referenced assembly is recompiled. To resolve, do not replace an assembly that itself is a dependency of an assembly you are referencing."
    },
    {
      "Code": "CS1701",
      "Title": "Assuming assembly reference &quot;Assembly Name #1&quot; matches &quot;Assembly Name #2&quot;, you may need to supply runtime policy",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1701",
      "Description": "The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly, as demonstrated in the following example code."
    },
    {
      "Code": "CS1710",
      "Title": "XML comment on 'type' has a duplicate typeparam tag for 'parameter'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1710",
      "Description": "The documentation of a generic type includes a duplicate tag for the type parameter."
    },
    {
      "Code": "CS1711",
      "Title": "XML comment on 'type' has a typeparam tag for 'parameter', but there is no type parameter by that name",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1711",
      "Description": "The documentation of a generic type includes a tag for the type parameter that has the wrong name."
    },
    {
      "Code": "CS1927",
      "Title": "Ignoring /win32manifest for module because it only applies to assemblies.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1927",
      "Description": "A win32 manifest is only applied at the assembly level. Your module will compile but it will not have a manifest."
    },
    {
      "Code": "CS3019",
      "Title": "CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3019",
      "Description": "This warning occurs when a type or a member that has the CLSCompliantAttribute attribute is not visible from another assembly. To resolve this error, remove the attribute on any classes or members that are not visible from the other assembly, or make the type or members visible. For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS3021",
      "Title": "'type' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3021",
      "Description": "This warning occurs if [CLSCompliant(false)] appears on a class in an assembly which does not have an assembly-level CLSCompliant attribute set to true (that is, the line [assembly: CLSCompliant(true)]). Since the assembly is not declaring itself CLS compliant, there is no need for anything within the assembly to declare itself non-compliant, since it is assumed to be non-compliant. For more information on CLS compliance, see Language independence and language-independent components."
    },
    {
      "Code": "CS0067",
      "Title": "The event 'event' is never used",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0067",
      "Description": "An event was declared but never used in the class in which it was declared."
    },
    {
      "Code": "CS0105",
      "Title": "The using directive for 'namespace' appeared previously in this namespace",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0105",
      "Description": "A namespace, which should only be declared once, was declared more than once; remove all duplicate namespace declarations."
    },
    {
      "Code": "CS0168",
      "Title": "The variable 'var' is declared but never used",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0168",
      "Description": "The compiler issues a level-three warning when you declare a variable, but do not use it."
    },
    {
      "Code": "CS0169",
      "Title": "The private field 'class member' is never used",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0169",
      "Description": "A private variable was declared but never referenced. A common way to generate this warning is when you declare a private member of a class and do not use it."
    },
    {
      "Code": "CS0219",
      "Title": "The variable 'variable' is assigned but its value is never used",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0219",
      "Description": "The compiler issues a level-three warning, when you declare and assign a variable, but do not use it."
    },
    {
      "Code": "CS0282",
      "Title": "There is no defined ordering between fields in multiple declarations of partial class or struct 'type'. To specify an ordering, all instance fields must be in the same declaration.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0282",
      "Description": "To resolve this error, put all member variables in a single partial class definition."
    },
    {
      "Code": "CS0414",
      "Title": "The private field 'field' is assigned but its value is never used",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0414",
      "Description": "This warning can occur in several scenarios in which the compiler can verify that a variable is never referenced:"
    },
    {
      "Code": "CS0419",
      "Title": "Ambiguous reference in cref attribute: 'Method Name1'.  Assuming 'Method Name2', but could have also matched other overloads including 'Method Name3'.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0419",
      "Description": "In an XML documentation comment in the code, a reference could not be resolved. This could occur if the method is overloaded, or if two different identifiers with the same name are found. To resolve the warning, use a qualified name to disambiguate the reference, or include the specific overload in parentheses."
    },
    {
      "Code": "CS0642",
      "Title": "Possible mistaken empty statement",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0642",
      "Description": "A semicolon after a conditional statement may cause your code to execute differently than intended."
    },
    {
      "Code": "CS0659",
      "Title": "'class' overrides Object.Equals(object o) but does not override Object.GetHashCode()",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0659",
      "Description": "The compiler detected an override of the Object.Equals method but no override of the Object.GetHashCode method. An override of Equals implies that you also want to override GetHashCode."
    },
    {
      "Code": "CS0660",
      "Title": "'class' defines operator == or operator != but does not override Object.Equals(object o)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0660",
      "Description": "The compiler detected the user-defined equality or inequality operator, but no override for the Object.Equals method. A user-defined equality or inequality operator implies that you also want to override the Equals method. For more information, see How to define value equality for a type."
    },
    {
      "Code": "CS0661",
      "Title": "'class' defines operator == or operator != but does not override Object.GetHashCode()",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0661",
      "Description": "The compiler detected the user-defined equality or inequality operator, but no override for the GetHashCode function. A user-defined equality or inequality operator implies that you also want to override the GetHashCode function."
    },
    {
      "Code": "CS0665",
      "Title": "Assignment in conditional expression is always constant; did you mean to use == instead of = ?",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0665",
      "Description": "A conditional expression used the = operator and not the == operator."
    },
    {
      "Code": "CS0675",
      "Title": "Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0675",
      "Description": "The compiler implicitly widened and sign-extended a variable, and then used the resulting value in a bitwise OR operation. This can result in unexpected behavior."
    },
    {
      "Code": "CS0693",
      "Title": "Type parameter 'type parameter' has the same name as the type parameter from outer type 'type'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0693",
      "Description": "This error occurs when you have a generic member such as a method inside a generic class. Since the method's type parameter is not necessarily the same as the class's type parameter, you cannot give them both the same name. For more information, see Generic Methods."
    },
    {
      "Code": "CS1700",
      "Title": "Assembly reference Assembly Name is invalid and cannot be resolved",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1700",
      "Description": "This warning indicates that an attribute, such as InternalsVisibleToAttribute, was not specified correctly."
    },
    {
      "Code": "CS1702",
      "Title": "Assuming assembly reference &quot;Assembly Name #1&quot; matches &quot;Assembly Name #2&quot;, you may need to supply runtime policy",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1702",
      "Description": "The two assembly references have differing build and/or revision numbers, so will not automatically unify. You may need to supply run-time policy to force unification by using directives in the application .config file."
    },
    {
      "Code": "CS1717",
      "Title": "Assignment made to same variable; did you mean to assign something else?",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717",
      "Description": "This warning occurs when you assign a variable to itself, such as a = a."
    },
    {
      "Code": "CS1718",
      "Title": "Comparison made to same variable; did you mean to compare something else?",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1718",
      "Description": "If you meant to compare to something else, then correct the statement."
    },
    {
      "Code": "CS0028",
      "Title": "'function declaration' has the wrong signature to be an entry point",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0028",
      "Description": "The method declaration for Main was invalid: it was declared with an invalid signature. Main must be declared as static and it must return either int or void. For more information, see Main() and Command-Line Arguments."
    },
    {
      "Code": "CS0078",
      "Title": "The 'l' suffix is easily confused with the digit '1' -- use 'L' for clarity",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0078",
      "Description": "The compiler warns when it detects a long literal using a lowercase l instead of an uppercase L."
    },
    {
      "Code": "CS0109",
      "Title": "The member 'member' does not hide an inherited member. The new keyword is not required",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0109",
      "Description": "A class declaration included the new keyword even though the declaration does not override an existing declaration in a base class. You can delete the new keyword."
    },
    {
      "Code": "CS0402",
      "Title": "'identifier' : an entry point cannot be generic or in a generic type",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0402",
      "Description": "The entry point was found in a generic type. To remove this warning, implement Main in a non-generic class or struct."
    },
    {
      "Code": "CS0422",
      "Title": "The /incremental option is no longer supported",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0422",
      "Description": "Incremental compilation (/incr or /incremental) is not supported in C# 2.0."
    },
    {
      "Code": "CS0429",
      "Title": "Unreachable expression code detected",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0429",
      "Description": "This error occurs whenever part of an expression in your code is unreachable. In the following example, the condition false &amp;&amp; myTest() meets this criteria because the myTest() method will never get evaluated due to the fact that the left side of the &amp;&amp; operation is always false. As soon as the &amp;&amp; operator evaluates the false statement as false, it stops the evaluation, and will never evaluate the right side."
    },
    {
      "Code": "CS0628",
      "Title": "'member' : new protected member declared in sealed class",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0628",
      "Description": "A sealed class cannot introduce a protected member because no other class will be able to inherit from the sealed class and use the protected member."
    },
    {
      "Code": "CS0649",
      "Title": "Field 'field' is never assigned to, and will always have its default value 'value'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0649",
      "Description": "The compiler detected an uninitialized private or internal field declaration that is never assigned a value."
    },
    {
      "Code": "CS1573",
      "Title": "Parameter 'parameter' has no matching param tag in the XML comment for 'parameter' (but other parameters do)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1573",
      "Description": "When using the DocumentationFile compiler option, a comment was specified for some but not all parameters in a method. You may have forgotten to enter a comment for these parameters."
    },
    {
      "Code": "CS1591",
      "Title": "Missing XML comment for publicly visible type or member 'Type_or_Member'",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1591",
      "Description": "The DocumentationFile compiler option was specified, but one or more constructs did not have comments."
    },
    {
      "Code": "CS1610",
      "Title": "Unable to delete temporary file 'file' used for default Win32 resource -- resource",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1610",
      "Description": "When using the Win32Resource compiler option and when your %TEMP% directory does not have DELETE permission, this warning indicates that the compiler could not delete a temporary file that it created."
    },
    {
      "Code": "CS1712",
      "Title": "Type parameter 'type parameter' has no matching typeparam tag in the XML comment on 'type' (but other type parameters do)",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1712",
      "Description": "The documentation of a generic type is missing a typeparam tag. For more information, see &lt;typeparam&gt;."
    },
    {
      "Code": "CS8892",
      "Title": "Method 'method' will not be used as an entry point because a synchronous entry point 'method' was found.",
      "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8892",
      "Description": "This warning is generated on all async entry point candidates when you have multiple valid entry points, where they contain one or more synchronous entry point and one or more asynchronous entry points."
    }
  ]
}