[
  {
    "Name": "AsyncFixer",
    "Rules": [
      {
        "Code": "AsyncFixer01",
        "Title": "Unnecessary async/await usage",
        "Link": "https://github.com/semihokur/AsyncFixer/blob/main/README.md#user-content-asyncfixer01unnecessary-asyncawait-usage",
        "Description": "There are some async methods where there is no need to use async/await keywords. It is important to detect this kind of misuse because adding the async modifier comes at a price. AsyncFixer automatically removes async/await keywords from those methods."
      },
      {
        "Code": "AsyncFixer02",
        "Title": "Long-running or blocking operations inside an async method",
        "Link": "https://github.com/semihokur/AsyncFixer/blob/main/README.md#user-content-asyncfixer02long-running-or-blocking-operations-inside-an-async-method",
        "Description": "Developers use some potentially long-running or blocking operations inside async methods even though there are corresponding asynchronous versions of these methods in .NET or third-party libraries. Some examples for such operations: Task.Wait(), Task.Result, StreamReader.ReadToEnd(), Thread.Sleep(), etc."
      },
      {
        "Code": "AsyncFixer03",
        "Title": "Fire-and-forget async-void methods and delegates",
        "Link": "https://github.com/semihokur/AsyncFixer/blob/main/README.md#user-content-asyncfixer03fire-and-forget-async-void-methods-and-delegates",
        "Description": "Some async methods and delegates are fire-and-forget, which return void. Unless a method is only called as an event handler, it must be awaitable. Otherwise, it is a code smell because it complicates control flow and makes error detection/correction difficult. Unhandled exceptions in those async-void methods and delegates will crash the process as well."
      },
      {
        "Code": "AsyncFixer04",
        "Title": "Fire-and-forget async call inside an using block",
        "Link": "https://github.com/semihokur/AsyncFixer/blob/main/README.md#user-content-asyncfixer04fire-and-forget-async-call-inside-an-using-block",
        "Description": "Inside a using block, developers insert a fire-and-forget async call which uses a disposable object as a parameter or target object. It can cause potential exceptions or wrong results."
      },
      {
        "Code": "AsyncFixer05",
        "Title": "Downcasting from a nested task to an outer task.",
        "Link": "https://github.com/semihokur/AsyncFixer/blob/main/README.md#user-content-asyncfixer05downcasting-from-a-nested-task-to-an-outer-task",
        "Description": "Downcasting from a nested task to a task or awaiting a nested task is dangerous. There is no way to wait for and get the result of the child task. This usually occurs when mixing async/await keywords with the old threading APIs such as TaskFactory.StartNew."
      }
    ]
  },
  {
    "Name": "Asyncify",
    "Rules": [
      {
        "Code": "AsyncifyInvocation",
        "Title": "Invocation",
        "Link": "https://github.com/hvanbakel/Asyncify-CSharp",
        "Description": "This invocation could benefit from the use of Task async."
      },
      {
        "Code": "AsyncifyVariableAccess",
        "Title": "Variable access",
        "Link": "https://github.com/hvanbakel/Asyncify-CSharp",
        "Description": "This variable access could benefit from the use of Task async."
      }
    ]
  },
  {
    "Name": "Meziantou.Analyzer",
    "Rules": [
      {
        "Code": "MA0001",
        "Title": "StringComparison is missing",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0001.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0002",
        "Title": "IEqualityComparer<string> or IComparer<string> is missing",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0002.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0003",
        "Title": "Add argument name to improve readability",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0003.md",
        "Category": "Style"
      },
      {
        "Code": "MA0004",
        "Title": "Use Task.ConfigureAwait(false)",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0004.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0005",
        "Title": "Use Array.Empty<T>()",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0005.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0006",
        "Title": "Use String.Equals instead of equality operator",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0006.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0007",
        "Title": "Add a comma after the last value",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0007.md",
        "Category": "Style"
      },
      {
        "Code": "MA0008",
        "Title": "Add StructLayoutAttribute",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0008.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0009",
        "Title": "Add regex evaluation timeout",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0009.md",
        "Category": "Security"
      },
      {
        "Code": "MA0010",
        "Title": "Mark attributes with AttributeUsageAttribute",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0010.md",
        "Category": "Design"
      },
      {
        "Code": "MA0011",
        "Title": "IFormatProvider is missing",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0011.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0012",
        "Title": "Do not raise reserved exception type",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0012.md",
        "Category": "Design"
      },
      {
        "Code": "MA0013",
        "Title": "Types should not extend System.ApplicationException",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0013.md",
        "Category": "Design"
      },
      {
        "Code": "MA0014",
        "Title": "Do not raise System.ApplicationException type",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0014.md",
        "Category": "Design"
      },
      {
        "Code": "MA0015",
        "Title": "Specify the parameter name in ArgumentException",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0015.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0016",
        "Title": "Prefer return collection abstraction instead of implementation",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0016.md",
        "Category": "Design"
      },
      {
        "Code": "MA0017",
        "Title": "Abstract types should not have public or internal constructors",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0017.md",
        "Category": "Design"
      },
      {
        "Code": "MA0018",
        "Title": "Do not declare static members on generic types",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0018.md",
        "Category": "Design"
      },
      {
        "Code": "MA0019",
        "Title": "Use EventArgs.Empty",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0019.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0020",
        "Title": "Use direct methods instead of LINQ methods",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0020.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0021",
        "Title": "Use StringComparer.GetHashCode instead of string.GetHashCode",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0021.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0022",
        "Title": "Return Task.FromResult instead of returning null",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0022.md",
        "Category": "Design"
      },
      {
        "Code": "MA0023",
        "Title": "Add RegexOptions.ExplicitCapture",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0023.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0024",
        "Title": "Use an explicit StringComparer when possible",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0024.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0025",
        "Title": "Implement the functionality instead of throwing NotImplementedException",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0025.md",
        "Category": "Design"
      },
      {
        "Code": "MA0026",
        "Title": "Fix TODO comment",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0026.md",
        "Category": "Design"
      },
      {
        "Code": "MA0027",
        "Title": "Do not remove original exception",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0027.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0028",
        "Title": "Optimize StringBuilder usage",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0028.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0029",
        "Title": "Combine LINQ methods",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0029.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0030",
        "Title": "Remove useless OrderBy call",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0030.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0031",
        "Title": "Optimize Enumerable.Count() usage",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0031.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0032",
        "Title": "Use an overload with a CancellationToken argument",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0032.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0033",
        "Title": "Do not tag instance fields with ThreadStaticAttribute",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0033.md",
        "Category": "Design"
      },
      {
        "Code": "MA0035",
        "Title": "Do not use dangerous threading methods",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0035.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0036",
        "Title": "Make class static",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0036.md",
        "Category": "Design"
      },
      {
        "Code": "MA0037",
        "Title": "Remove empty statement",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0037.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0038",
        "Title": "Make method static",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0038.md",
        "Category": "Design"
      },
      {
        "Code": "MA0039",
        "Title": "Do not write your own certificate validation method",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0039.md",
        "Category": "Security"
      },
      {
        "Code": "MA0040",
        "Title": "Flow the cancellation token",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0040.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0041",
        "Title": "Make property static",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0041.md",
        "Category": "Design"
      },
      {
        "Code": "MA0042",
        "Title": "Do not use blocking calls in an async method",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0042.md",
        "Category": "Design"
      },
      {
        "Code": "MA0043",
        "Title": "Use nameof operator in ArgumentException",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0043.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0044",
        "Title": "Remove useless ToString call",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0044.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0045",
        "Title": "Do not use blocking call in a sync method (need to make containing method async)",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0045.md",
        "Category": "Design"
      },
      {
        "Code": "MA0046",
        "Title": "Use EventHandler<T> to declare events",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0046.md",
        "Category": "Design"
      },
      {
        "Code": "MA0047",
        "Title": "Declare types in namespaces",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0047.md",
        "Category": "Design"
      },
      {
        "Code": "MA0048",
        "Title": "File name must match type name",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0048.md",
        "Category": "Design"
      },
      {
        "Code": "MA0049",
        "Title": "Type name should not match containing namespace",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0049.md",
        "Category": "Design"
      },
      {
        "Code": "MA0050",
        "Title": "Validate arguments correctly in iterator methods",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0050.md",
        "Category": "Design"
      },
      {
        "Code": "MA0051",
        "Title": "Method is too long",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0051.md",
        "Category": "Design"
      },
      {
        "Code": "MA0052",
        "Title": "Replace constant Enum.ToString with nameof",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0052.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0053",
        "Title": "Make class sealed",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0053.md",
        "Category": "Design"
      },
      {
        "Code": "MA0054",
        "Title": "Embed the caught exception as innerException",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0054.md",
        "Category": "Design"
      },
      {
        "Code": "MA0055",
        "Title": "Do not use finalizer",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0055.md",
        "Category": "Design"
      },
      {
        "Code": "MA0056",
        "Title": "Do not call overridable members in constructor",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0056.md",
        "Category": "Design"
      },
      {
        "Code": "MA0057",
        "Title": "Class name should end with 'Attribute'",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0057.md",
        "Category": "Naming"
      },
      {
        "Code": "MA0058",
        "Title": "Class name should end with 'Exception'",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0058.md",
        "Category": "Naming"
      },
      {
        "Code": "MA0059",
        "Title": "Class name should end with 'EventArgs'",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0059.md",
        "Category": "Naming"
      },
      {
        "Code": "MA0060",
        "Title": "The value returned by Stream.Read/Stream.ReadAsync is not used",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0060.md",
        "Category": "Design"
      },
      {
        "Code": "MA0061",
        "Title": "Method overrides should not change parameter defaults",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0061.md",
        "Category": "Design"
      },
      {
        "Code": "MA0062",
        "Title": "Non-flags enums should not be marked with \"FlagsAttribute\"",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0062.md",
        "Category": "Design"
      },
      {
        "Code": "MA0063",
        "Title": "Use Where before OrderBy",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0063.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0064",
        "Title": "Avoid locking on publicly accessible instance",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0064.md",
        "Category": "Design"
      },
      {
        "Code": "MA0065",
        "Title": "Default ValueType.Equals or HashCode is used for struct's equality",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0065.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0066",
        "Title": "Hash table unfriendly type is used in a hash table",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0066.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0067",
        "Title": "Use Guid.Empty",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0067.md",
        "Category": "Design"
      },
      {
        "Code": "MA0068",
        "Title": "Invalid parameter name for nullable attribute",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0068.md",
        "Category": "Design"
      },
      {
        "Code": "MA0069",
        "Title": "Non-constant static fields should not be visible",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0069.md",
        "Category": "Design"
      },
      {
        "Code": "MA0070",
        "Title": "Obsolete attributes should include explanations",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0070.md",
        "Category": "Design"
      },
      {
        "Code": "MA0071",
        "Title": "Avoid using redundant else",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0071.md",
        "Category": "Style"
      },
      {
        "Code": "MA0072",
        "Title": "Do not throw from a finally block",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0072.md",
        "Category": "Design"
      },
      {
        "Code": "MA0073",
        "Title": "Avoid comparison with bool constant",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0073.md",
        "Category": "Style"
      },
      {
        "Code": "MA0074",
        "Title": "Avoid implicit culture-sensitive methods",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0074.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0075",
        "Title": "Do not use implicit culture-sensitive ToString",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0075.md",
        "Category": "Design"
      },
      {
        "Code": "MA0076",
        "Title": "Do not use implicit culture-sensitive ToString in interpolated strings",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0076.md",
        "Category": "Design"
      },
      {
        "Code": "MA0077",
        "Title": "A class that provides Equals(T) should implement IEquatable<T>",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0077.md",
        "Category": "Design"
      },
      {
        "Code": "MA0078",
        "Title": "Use 'Cast' instead of 'Select' to cast",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0078.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0079",
        "Title": "Flow the cancellation token using .WithCancellation()",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0079.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0080",
        "Title": "Use a cancellation token using .WithCancellation()",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0080.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0081",
        "Title": "Method overrides should not omit params keyword",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0081.md",
        "Category": "Design"
      },
      {
        "Code": "MA0082",
        "Title": "NaN should not be used in comparisons",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0082.md",
        "Category": "Design"
      },
      {
        "Code": "MA0083",
        "Title": "ConstructorArgument parameters should exist in constructors",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0083.md",
        "Category": "Design"
      },
      {
        "Code": "MA0084",
        "Title": "Local variable should not hide other symbols",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0084.md",
        "Category": "Design"
      },
      {
        "Code": "MA0085",
        "Title": "Anonymous delegates should not be used to unsubscribe from Events",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0085.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0086",
        "Title": "Do not throw from a finalizer",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0086.md",
        "Category": "Design"
      },
      {
        "Code": "MA0087",
        "Title": "Parameters with [DefaultParameterValue] attributes should also be marked [Optional]",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0087.md",
        "Category": "Design"
      },
      {
        "Code": "MA0088",
        "Title": "Use [DefaultParameterValue] instead of [DefaultValue]",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0088.md",
        "Category": "Design"
      },
      {
        "Code": "MA0089",
        "Title": "Optimize string method usage",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0089.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0090",
        "Title": "Remove empty else/finally block",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0090.md",
        "Category": "Design"
      },
      {
        "Code": "MA0091",
        "Title": "Sender should be 'this' for instance events",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0091.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0092",
        "Title": "Sender should be 'null' for static events",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0092.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0093",
        "Title": "EventArgs should not be null",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0093.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0094",
        "Title": "A class that provides CompareTo(T) should implement IComparable<T>",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0094.md",
        "Category": "Design"
      },
      {
        "Code": "MA0095",
        "Title": "A class that implements IEquatable<T> should override Equals(object)",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0095.md",
        "Category": "Design"
      },
      {
        "Code": "MA0096",
        "Title": "A class that implements IComparable<T> should also implement IEquatable<T>",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0096.md",
        "Category": "Design"
      },
      {
        "Code": "MA0097",
        "Title": "A class that implements IComparable<T> or IComparable should override comparison operators",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0097.md",
        "Category": "Design"
      },
      {
        "Code": "MA0098",
        "Title": "Use indexer instead of LINQ methods",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0098.md",
        "Category": "Performance"
      },
      {
        "Code": "MA0099",
        "Title": "Use Explicit enum value instead of 0",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0099.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0100",
        "Title": "Await task before disposing resources",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0100.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0101",
        "Title": "String contains an implicit end of line character",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0101.md",
        "Category": "Usage"
      },
      {
        "Code": "MA0102",
        "Title": "Make member readonly",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0102.md",
        "Category": "Design"
      },
      {
        "Code": "MA0103",
        "Title": "Use SequenceEqual instead of equality operator",
        "Link": "https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/Rules/MA0103.md",
        "Category": "Usage"
      }
    ]
  },
  {
    "Name": "Microsoft.CodeAnalysis.NetAnalyzers",
    "Rules": [
      {
        "Code": "CA1000",
        "Title": "Do not declare static members on generic types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1000",
        "Description": "When a static member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. In these two cases, the syntax for specifying the type argument is different and easily confused."
      },
      {
        "Code": "CA1001",
        "Title": "Types that own disposable fields should be disposable",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1001",
        "Description": "A class declares and implements an instance field that is a System.IDisposable type, and the class does not implement IDisposable. A class that declares an IDisposable field indirectly owns an unmanaged resource and should implement the IDisposable interface."
      },
      {
        "Code": "CA1002",
        "Title": "Do not expose generic lists",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1002",
        "Description": "System.Collections.Generic.List<(Of <(T>)>) is a generic collection that is designed for performance, not inheritance. Therefore, List does not contain any virtual members. The generic collections that are designed for inheritance should be exposed instead."
      },
      {
        "Code": "CA1003",
        "Title": "Use generic event handler instances",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1003",
        "Description": "A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets Microsoft .NET Framework 2.0."
      },
      {
        "Code": "CA1005",
        "Title": "Avoid excessive parameters on generic types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1005",
        "Description": "The more type parameters a generic type contains, the more difficult it is to know and remember what each type parameter represents. It is usually obvious with one type parameter, as in List<T>, and in certain cases that have two type parameters, as in Dictionary<TKey, TValue>. However, if more than two type parameters exist, the difficulty becomes too great for most users."
      },
      {
        "Code": "CA1008",
        "Title": "Enums should have zero value",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1008",
        "Description": "The default value of an uninitialized enumeration, just as other value types, is zero. A nonflags-attributed enumeration should define a member by using the value of zero so that the default value is a valid value of the enumeration. If an enumeration that has the FlagsAttribute attribute applied defines a zero-valued member, its name should be \"None\" to indicate that no values have been set in the enumeration."
      },
      {
        "Code": "CA1010",
        "Title": "Collections should implement generic interface",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1010",
        "Description": "To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types."
      },
      {
        "Code": "CA1012",
        "Title": "Abstract types should not have constructors",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1012",
        "Description": "Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed."
      },
      {
        "Code": "CA1014",
        "Title": "Mark assemblies with CLSCompliantAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1014",
        "Description": "The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance by using CLSCompliantAttribute . If this attribute is not present on an assembly, the assembly is not compliant."
      },
      {
        "Code": "CA1016",
        "Title": "Mark assemblies with AssemblyVersionAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1016",
        "Description": ".NET uses the version number to uniquely identify an assembly and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built."
      },
      {
        "Code": "CA1017",
        "Title": "Mark assemblies with ComVisibleAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1017",
        "Description": "ComVisibleAttribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for the whole assembly and then overridden for individual types and type members. If this attribute is not present, the contents of the assembly are visible to COM clients."
      },
      {
        "Code": "CA1018",
        "Title": "Mark attributes with AttributeUsageAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1018",
        "Description": "When you define a custom attribute, mark it by using AttributeUsageAttribute to indicate where in the source code the custom attribute can be applied. The meaning and intended usage of an attribute will determine its valid locations in code."
      },
      {
        "Code": "CA1019",
        "Title": "Define accessors for attribute arguments",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1019",
        "Description": "Attributes can define mandatory arguments that must be specified when you apply the attribute to a target. These are also known as positional arguments because they are supplied to attribute constructors as positional parameters. For every mandatory argument, the attribute should also provide a corresponding read-only property so that the value of the argument can be retrieved at execution time. Attributes can also define optional arguments, which are also known as named arguments. These arguments are supplied to attribute constructors by name and should have a corresponding read/write property."
      },
      {
        "Code": "CA1021",
        "Title": "Avoid out parameters",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1021",
        "Description": "Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods with multiple return values. Also, the difference between out and ref parameters is not widely understood."
      },
      {
        "Code": "CA1024",
        "Title": "Use properties where appropriate",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1024",
        "Description": "A public or protected method has a name that starts with \"Get\", takes no parameters, and returns a value that is not an array. The method might be a good candidate to become a property."
      },
      {
        "Code": "CA1027",
        "Title": "Mark enums with FlagsAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1027",
        "Description": "An enumeration is a value type that defines a set of related named constants. Apply FlagsAttribute to an enumeration when its named constants can be meaningfully combined."
      },
      {
        "Code": "CA1028",
        "Title": "Enum storage should be Int32",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1028",
        "Description": "An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Although you can change this underlying type, it is not required or recommended for most scenarios."
      },
      {
        "Code": "CA1030",
        "Title": "Use events where appropriate",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1030",
        "Description": "This rule detects methods that have names that ordinarily would be used for events. If a method is called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly."
      },
      {
        "Code": "CA1031",
        "Title": "Do not catch general exception types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1031",
        "Description": "General exceptions should not be caught. Catch a more specific exception, or rethrow the general exception as the last statement in the catch block."
      },
      {
        "Code": "CA1032",
        "Title": "Implement standard exception constructors",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1032",
        "Description": "Failure to provide the full set of constructors can make it difficult to correctly handle exceptions."
      },
      {
        "Code": "CA1033",
        "Title": "Interface methods should be callable by child types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1033",
        "Description": "An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name."
      },
      {
        "Code": "CA1034",
        "Title": "Nested types should not be visible",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1034",
        "Description": "A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible."
      },
      {
        "Code": "CA1036",
        "Title": "Override methods on comparable types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1036",
        "Description": "A public or protected type implements the System.IComparable interface. It does not override Object.Equals nor does it overload the language-specific operator for equality, inequality, less than, or greater than."
      },
      {
        "Code": "CA1040",
        "Title": "Avoid empty interfaces",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1040",
        "Description": "Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members; therefore, it does not define a contract that can be implemented."
      },
      {
        "Code": "CA1041",
        "Title": "Provide ObsoleteAttribute message",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1041",
        "Description": "A type or member is marked by using a System.ObsoleteAttribute attribute that does not have its ObsoleteAttribute.Message property specified. When a type or member that is marked by using ObsoleteAttribute is compiled, the Message property of the attribute is displayed. This gives the user information about the obsolete type or member."
      },
      {
        "Code": "CA1043",
        "Title": "Use integral or string argument for indexers",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1043",
        "Description": "Indexers (that is, indexed properties) should use integral or string types for the index. These types are typically used for indexing data structures and they increase the usability of the library. Use of the Object type should be restricted to those cases where the specific integral or string type cannot be specified at design time."
      },
      {
        "Code": "CA1044",
        "Title": "Properties should not be write only",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1044",
        "Description": "Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value, and then preventing the user from viewing that value, does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness."
      },
      {
        "Code": "CA1045",
        "Title": "Do not pass types by reference",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1045",
        "Description": "Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods that have multiple return values. Library architects who design for a general audience should not expect users to master working with out or ref parameters."
      },
      {
        "Code": "CA1046",
        "Title": "Do not overload operator equals on reference types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1046",
        "Description": "For reference types, the default implementation of the equality operator is almost always correct. By default, two references are equal only if they point to the same object."
      },
      {
        "Code": "CA1047",
        "Title": "Do not declare protected members in sealed types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1047",
        "Description": "Types declare protected members so that inheriting types can access or override the member. By definition, sealed types cannot be inherited, which means that protected methods on sealed types cannot be called."
      },
      {
        "Code": "CA1050",
        "Title": "Declare types in namespaces",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1050",
        "Description": "Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy."
      },
      {
        "Code": "CA1051",
        "Title": "Do not declare visible instance fields",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1051",
        "Description": "The primary use of a field should be as an implementation detail. Fields should be private or internal and should be exposed by using properties."
      },
      {
        "Code": "CA1052",
        "Title": "Static holder types should be sealed",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1052",
        "Description": "A public or protected type contains only static members and is not declared by using the sealed (C# Reference) (NotInheritable) modifier. A type that is not meant to be inherited should be marked by using the sealed modifier to prevent its use as a base type."
      },
      {
        "Code": "CA1053",
        "Title": "Static holder types should not have constructors",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1053",
        "Description": "A public or nested public type declares only static members and has a public or protected default constructor. The constructor is unnecessary because calling static members does not require an instance of the type. The string overload should call the uniform resource identifier (URI) overload by using the string argument for safety and security."
      },
      {
        "Code": "CA1054",
        "Title": "URI parameters should not be strings",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1054",
        "Description": "If a method takes a string representation of a URI, a corresponding overload should be provided that takes an instance of the URI class, which provides these services in a safe and secure manner."
      },
      {
        "Code": "CA1055",
        "Title": "URI return values should not be strings",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1055",
        "Description": "This rule assumes that the method returns a URI. A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner."
      },
      {
        "Code": "CA1056",
        "Title": "URI properties should not be strings",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1056",
        "Description": "This rule assumes that the property represents a Uniform Resource Identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner."
      },
      {
        "Code": "CA1058",
        "Title": "Types should not extend certain base types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1058",
        "Description": "An externally visible type extends certain base types. Use one of the alternatives."
      },
      {
        "Code": "CA1060",
        "Title": "Move P/Invokes to NativeMethods class",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1060",
        "Description": "Platform Invocation methods, such as those that are marked by using the System.Runtime.InteropServices.DllImportAttribute attribute, or methods that are defined by using the Declare keyword in Visual Basic, access unmanaged code. These methods should be of the NativeMethods, SafeNativeMethods, or UnsafeNativeMethods class."
      },
      {
        "Code": "CA1061",
        "Title": "Do not hide base class methods",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1061",
        "Description": "A method in a base type is hidden by an identically named method in a derived type, when the parameter signature of the derived method differs only by types that are more weakly derived than the corresponding types in the parameter signature of the base method."
      },
      {
        "Code": "CA1062",
        "Title": "Validate arguments of public methods",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1062",
        "Description": "All reference arguments that are passed to externally visible methods should be checked against null."
      },
      {
        "Code": "CA1063",
        "Title": "Implement IDisposable correctly",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "Description": "All IDisposable types should implement the Dispose pattern correctly."
      },
      {
        "Code": "CA1064",
        "Title": "Exceptions should be public",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1064",
        "Description": "An internal exception is visible only inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from Exception, SystemException, or ApplicationException, the external code will not have sufficient information to know what to do with the exception."
      },
      {
        "Code": "CA1065",
        "Title": "Do not raise exceptions in unexpected locations",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065",
        "Description": "A method that is not expected to throw exceptions throws an exception."
      },
      {
        "Code": "CA1066",
        "Title": "Implement IEquatable when overriding Equals",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1066",
        "Description": "A value type overrides Equals method, but does not implement IEquatable<T>."
      },
      {
        "Code": "CA1067",
        "Title": "Override Equals when implementing IEquatable",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1067",
        "Description": "A type implements IEquatable<T>, but does not override Equals method."
      },
      {
        "Code": "CA1068",
        "Title": "CancellationToken parameters must come last",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1068",
        "Description": "A method has a CancellationToken parameter that is not the last parameter."
      },
      {
        "Code": "CA1069",
        "Title": "Enums should not have duplicate values",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1069",
        "Description": "An enumeration has multiple members which are explicitly assigned the same constant value."
      },
      {
        "Code": "CA1070",
        "Title": "Do not declare event fields as virtual",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1070",
        "Description": "A field-like event was declared as virtual."
      },
      {
        "Code": "CA1200",
        "Title": "Avoid using cref tags with a prefix",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1200",
        "Description": "The cref attribute in an XML documentation tag means \"code reference\". It specifies that the inner text of the tag is a code element, such as a type, method, or property. Avoid using cref tags with prefixes, because it prevents the compiler from verifying references. It also prevents the Visual Studio integrated development environment (IDE) from finding and updating these symbol references during refactorings."
      },
      {
        "Code": "CA1303",
        "Title": "Do not pass literals as localized parameters",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1303",
        "Description": "An externally visible method passes a string literal as a parameter to a .NET constructor or method, and that string should be localizable."
      },
      {
        "Code": "CA1304",
        "Title": "Specify CultureInfo",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1304",
        "Description": "A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales."
      },
      {
        "Code": "CA1305",
        "Title": "Specify IFormatProvider",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1305",
        "Description": "A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales."
      },
      {
        "Code": "CA1307",
        "Title": "Specify StringComparison for clarity",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1307",
        "Description": "A string comparison operation uses a method overload that does not set a StringComparison parameter."
      },
      {
        "Code": "CA1308",
        "Title": "Normalize strings to uppercase",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1308",
        "Description": "Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase."
      },
      {
        "Code": "CA1309",
        "Title": "Use ordinal StringComparison",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1309",
        "Description": "A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable."
      },
      {
        "Code": "CA1310",
        "Title": "Specify StringComparison for correctness",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1310",
        "Description": "A string comparison operation uses a method overload that does not set a StringComparison parameter and uses culture-specific string comparison by default."
      },
      {
        "Code": "CA1401",
        "Title": "P/Invokes should not be visible",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1401",
        "Description": "A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed."
      },
      {
        "Code": "CA1416",
        "Title": "Validate platform compatibility",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "Description": "Using platform-dependent APIs on a component makes the code no longer work across all platforms."
      },
      {
        "Code": "CA1417",
        "Title": "Do not use OutAttribute on string parameters for P/Invokes",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1417",
        "Description": "String parameters passed by value with the OutAttribute can destabilize the runtime if the string is an interned string."
      },
      {
        "Code": "CA1501",
        "Title": "Avoid excessive inheritance",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1501",
        "Description": "A type is more than four levels deep in its inheritance hierarchy. Deeply nested type hierarchies can be difficult to follow, understand, and maintain."
      },
      {
        "Code": "CA1502",
        "Title": "Avoid excessive complexity",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1502",
        "Description": "This rule measures the number of linearly independent paths through the method, which is determined by the number and complexity of conditional branches."
      },
      {
        "Code": "CA1505",
        "Title": "Avoid unmaintainable code",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1505",
        "Description": "A type or method has a low maintainability index value. A low maintainability index indicates that a type or method is probably difficult to maintain and would be a good candidate for redesign."
      },
      {
        "Code": "CA1506",
        "Title": "Avoid excessive class coupling",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1506",
        "Description": "This rule measures class coupling by counting the number of unique type references that a type or method contains."
      },
      {
        "Code": "CA1507",
        "Title": "Use nameof in place of string",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1507",
        "Description": "A string literal is used as an argument where a nameof expression could be used."
      },
      {
        "Code": "CA1508",
        "Title": "Avoid dead conditional code",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1508",
        "Description": "A method has conditional code that always evaluates to true or false at runtime. This leads to dead code in the false branch of the condition."
      },
      {
        "Code": "CA1509",
        "Title": "Invalid entry in code metrics configuration file",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1509",
        "Description": "Code metrics rules, such as CA1501, CA1502, CA1505 and CA1506, supplied a configuration file named CodeMetricsConfig.txt that has an invalid entry."
      },
      {
        "Code": "CA1700",
        "Title": "Do not name enum values 'Reserved'",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1700",
        "Description": "This rule assumes that an enumeration member that has a name that contains \"reserved\" is not currently used but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a breaking change."
      },
      {
        "Code": "CA1707",
        "Title": "Identifiers should not contain underscores",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "Description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters."
      },
      {
        "Code": "CA1708",
        "Title": "Identifiers should differ by more than case",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1708",
        "Description": "Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive."
      },
      {
        "Code": "CA1710",
        "Title": "Identifiers should have correct suffix",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1710",
        "Description": "By convention, the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, have a suffix that is associated with the base type or interface."
      },
      {
        "Code": "CA1711",
        "Title": "Identifiers should not have incorrect suffix",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1711",
        "Description": "By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes."
      },
      {
        "Code": "CA1712",
        "Title": "Do not prefix enum values with type name",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1712",
        "Description": "Names of enumeration members are not prefixed by using the type name because development tools are expected to provide type information."
      },
      {
        "Code": "CA1713",
        "Title": "Events should not have before or after prefix",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1713",
        "Description": "The name of an event starts with \"Before\" or \"After\". To name related events that are raised in a specific sequence, use the present or past tense to indicate the relative position in the sequence of actions."
      },
      {
        "Code": "CA1714",
        "Title": "Flags enums should have plural names",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1714",
        "Description": "A public enumeration has the System.FlagsAttribute attribute, and its name does not end in \"s\". Types that are marked by using FlagsAttribute have names that are plural because the attribute indicates that more than one value can be specified."
      },
      {
        "Code": "CA1715",
        "Title": "Identifiers should have correct prefix",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1715",
        "Description": "The name of an externally visible interface does not start with an uppercase \"I\". The name of a generic type parameter on an externally visible type or method does not start with an uppercase \"T\"."
      },
      {
        "Code": "CA1716",
        "Title": "Identifiers should not match keywords",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1716",
        "Description": "A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime."
      },
      {
        "Code": "CA1717",
        "Title": "Only FlagsAttribute enums should have plural names",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1717",
        "Description": "Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified at the same time."
      },
      {
        "Code": "CA1720",
        "Title": "Identifiers should not contain type names",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1720",
        "Description": "The name of a parameter in an externally visible member contains a data type name, or the name of an externally visible member contains a language-specific data type name."
      },
      {
        "Code": "CA1721",
        "Title": "Property names should not match get methods",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1721",
        "Description": "The name of a public or protected member starts with \"Get\" and otherwise matches the name of a public or protected property. \"Get\" methods and properties should have names that clearly distinguish their function."
      },
      {
        "Code": "CA1724",
        "Title": "Type Names Should Not Match Namespaces",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1724",
        "Description": "Type names should not match the names of .NET namespaces. Violating this rule can reduce the usability of the library."
      },
      {
        "Code": "CA1725",
        "Title": "Parameter names should match base declaration",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1725",
        "Description": "Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method."
      },
      {
        "Code": "CA1801",
        "Title": "Review unused parameters",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1801",
        "Description": "A method signature includes a parameter that is not used in the method body."
      },
      {
        "Code": "CA1802",
        "Title": "Use Literals Where Appropriate",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1802",
        "Description": "A field is declared static and read-only (Shared and ReadOnly in Visual Basic), and is initialized by using a value that is computable at compile time. Because the value that is assigned to the targeted field is computable at compile time, change the declaration to a const (Const in Visual Basic) field so that the value is computed at compile time instead of at run time."
      },
      {
        "Code": "CA1805",
        "Title": "Do not initialize unnecessarily",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1805",
        "Description": "The .NET runtime initializes all fields of reference types to their default values before running the constructor. In most cases, explicitly initializing a field to its default value is redundant, which adds to maintenance costs and may degrade performance (such as with increased assembly size)."
      },
      {
        "Code": "CA1806",
        "Title": "Do not ignore method results",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
        "Description": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used."
      },
      {
        "Code": "CA1810",
        "Title": "Initialize reference type static fields inline",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1810",
        "Description": "When a type declares an explicit static constructor, the just-in-time (JIT) compiler adds a check to each static method and instance constructor of the type to make sure that the static constructor was previously called. Static constructor checks can decrease performance."
      },
      {
        "Code": "CA1812",
        "Title": "Avoid uninstantiated internal classes",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1812",
        "Description": "An instance of an assembly-level type is not created by code in the assembly."
      },
      {
        "Code": "CA1813",
        "Title": "Avoid unsealed attributes",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1813",
        "Description": ".NET provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance."
      },
      {
        "Code": "CA1814",
        "Title": "Prefer jagged arrays over multidimensional",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1814",
        "Description": "A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data."
      },
      {
        "Code": "CA1815",
        "Title": "Override equals and operator equals on value types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1815",
        "Description": "For value types, the inherited implementation of Equals uses the Reflection library and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or to use instances as hash table keys, your value type should implement Equals."
      },
      {
        "Code": "CA1816",
        "Title": "Call GC.SuppressFinalize correctly",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1816",
        "Description": "A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic)."
      },
      {
        "Code": "CA1819",
        "Title": "Properties should not return arrays",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1819",
        "Description": "Arrays that are returned by properties are not write-protected, even when the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property."
      },
      {
        "Code": "CA1820",
        "Title": "Test for empty strings using string length",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1820",
        "Description": "Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals."
      },
      {
        "Code": "CA1821",
        "Title": "Remove empty finalizers",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1821",
        "Description": "Whenever you can, avoid finalizers because of the additional performance overhead that is involved in tracking object lifetime. An empty finalizer incurs added overhead and delivers no benefit."
      },
      {
        "Code": "CA1822",
        "Title": "Mark members as static",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1822",
        "Description": "Members that do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code."
      },
      {
        "Code": "CA1823",
        "Title": "Avoid unused private fields",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1823",
        "Description": "Private fields were detected that do not appear to be accessed in the assembly."
      },
      {
        "Code": "CA1824",
        "Title": "Mark assemblies with NeutralResourcesLanguageAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1824",
        "Description": "The NeutralResourcesLanguage attribute informs the resource manager of the language that was used to display the resources of a neutral culture for an assembly. This improves lookup performance for the first resource that you load and can reduce your working set."
      },
      {
        "Code": "CA1825",
        "Title": "Avoid zero-length array allocations",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1825",
        "Description": "Initializing a zero-length array leads to unnecessary memory allocation. Instead, use the statically allocated empty array instance by calling Array.Empty. The memory allocation is shared across all invocations of this method."
      },
      {
        "Code": "CA1826",
        "Title": "Use property instead of Linq Enumerable method",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1826",
        "Description": "Enumerable LINQ method was used on a type that supports an equivalent, more efficient property."
      },
      {
        "Code": "CA1827",
        "Title": "Do not use Count/LongCount when Any can be used",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1827",
        "Description": "Count or LongCount method was used where Any method would be more efficient."
      },
      {
        "Code": "CA1828",
        "Title": "Do not use CountAsync/LongCountAsync when AnyAsync can be used",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1828",
        "Description": "CountAsync or LongCountAsync method was used where AnyAsync method would be more efficient."
      },
      {
        "Code": "CA1829",
        "Title": "Use Length/Count property instead of Enumerable.Count method",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1829",
        "Description": "Count LINQ method was used on a type that supports an equivalent, more efficient Length or Count property."
      },
      {
        "Code": "CA1830",
        "Title": "Prefer strongly-typed Append and Insert method overloads on StringBuilder",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1830",
        "Description": "Append and Insert provide overloads for multiple types beyond String.  When possible, prefer the strongly-typed overloads over using ToString() and the string-based overload."
      },
      {
        "Code": "CA1831",
        "Title": "Use AsSpan instead of Range-based indexers for string when appropriate",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1831",
        "Description": "When using a range-indexer on a string and implicitly assigning the value to  ReadOnlySpan<char> type, the method Substring will be used instead of Slice, which produces a copy of requested portion of the string."
      },
      {
        "Code": "CA1832",
        "Title": "Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1832",
        "Description": "When using a range-indexer on an array and implicitly assigning the value to a ReadOnlySpan<T> or ReadOnlyMemory<T> type, the method GetSubArray will be used instead of Slice, which produces a copy of requested portion of the array."
      },
      {
        "Code": "CA1833",
        "Title": "Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1833",
        "Description": "When using a range-indexer on an array and implicitly assigning the value to a Span<T> or Memory<T> type, the method GetSubArray will be used instead of Slice, which produces a copy of requested portion of the array."
      },
      {
        "Code": "CA1834",
        "Title": "Use StringBuilder.Append(char) for single character strings",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1834",
        "Description": "StringBuilder has an Append overload that takes a char as its argument. Prefer calling the char overload for performance reasons."
      },
      {
        "Code": "CA1835",
        "Title": "Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1835",
        "Description": "'Stream' has a 'ReadAsync' overload that takes a 'Memory<Byte>' as the first argument, and a 'WriteAsync' overload that takes a 'ReadOnlyMemory<Byte>' as the first argument. Prefer calling the memory based overloads, which are more efficient."
      },
      {
        "Code": "CA1836",
        "Title": "Prefer IsEmpty over Count when available",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1836",
        "Description": "Prefer IsEmpty property that is more efficient than Count, Length, Count<TSource>(IEnumerable<TSource>) or LongCount<TSource>(IEnumerable<TSource>) to determine whether the object contains or not any items."
      },
      {
        "Code": "CA1837",
        "Title": "Use Environment.ProcessId instead of Process.GetCurrentProcess().Id",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1837",
        "Description": "Environment.ProcessId is simpler and faster than Process.GetCurrentProcess().Id."
      },
      {
        "Code": "CA1838",
        "Title": "Avoid StringBuilder parameters for P/Invokes",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1838",
        "Description": "Marshaling of 'StringBuilder' always creates a native buffer copy, resulting in multiple allocations for one marshaling operation."
      },
      {
        "Code": "CA1841",
        "Title": "Prefer Dictionary Contains methods",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1841",
        "Description": "Calling Contains on the Keys or Values collection may often be more expensive than calling ContainsKey or ContainsValue on the dictionary itself."
      },
      {
        "Code": "CA1844",
        "Title": "Provide memory-based overrides of async methods when subclassing 'Stream'",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1844",
        "Description": "To improve performance, override the memory-based async methods when subclassing 'Stream'. Then implement the array-based methods in terms of the memory-based methods."
      },
      {
        "Code": "CA1845",
        "Title": "Use span-based 'string.Concat'",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1845",
        "Description": "It is more efficient to use AsSpan and string.Concat, instead of Substring and a concatenation operator."
      },
      {
        "Code": "CA1846",
        "Title": "Prefer AsSpan over Substring",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1846",
        "Description": "AsSpan is more efficient than Substring. Substring performs an O(n) string copy, while AsSpan does not and has a constant cost. AsSpan also does not perform any heap allocations."
      },
      {
        "Code": "CA2000",
        "Title": "Dispose objects before losing scope",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2000",
        "Description": "Because an exceptional event might occur that will prevent the finalizer of an object from running, the object should be explicitly disposed before all references to it are out of scope."
      },
      {
        "Code": "CA2002",
        "Title": "Do not lock on objects with weak identity",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2002",
        "Description": "An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object."
      },
      {
        "Code": "CA2007",
        "Title": "Do not directly await a Task",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2007",
        "Description": "An asynchronous method awaits a Task directly. When an asynchronous method awaits a Task directly, continuation occurs in the same thread that created the task. This behavior can be costly in terms of performance and can result in a deadlock on the UI thread. Consider calling Task.ConfigureAwait(Boolean) to signal your intention for continuation."
      },
      {
        "Code": "CA2008",
        "Title": "Do not create tasks without passing a TaskScheduler",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2008",
        "Description": "A task creation or continuation operation uses a method overload that does not specify a TaskScheduler parameter."
      },
      {
        "Code": "CA2009",
        "Title": "Do not call ToImmutableCollection on an ImmutableCollection value",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2009",
        "Description": "ToImmutable method was unnecessarily called on an immutable collection from System.Collections.Immutable namespace."
      },
      {
        "Code": "CA2011",
        "Title": "Do not assign property within its setter",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2011",
        "Description": "A property was accidentally assigned a value within its own set accessor."
      },
      {
        "Code": "CA2012",
        "Title": "Use ValueTasks correctly",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2012",
        "Description": "ValueTasks returned from member invocations are intended to be directly awaited.  Attempts to consume a ValueTask multiple times or to directly access one's result before it's known to be completed may result in an exception or corruption.  Ignoring such a ValueTask is likely an indication of a functional bug and may degrade performance."
      },
      {
        "Code": "CA2013",
        "Title": "Do not use ReferenceEquals with value types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2013",
        "Description": "When comparing values using System.Object.ReferenceEquals, if objA and objB are value types, they are boxed before they are passed to the ReferenceEquals method. This means that even if both objA and objB represent the same instance of a value type, the ReferenceEquals method nevertheless returns false."
      },
      {
        "Code": "CA2014",
        "Title": "Do not use stackalloc in loops.",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2014",
        "Description": "Stack space allocated by a stackalloc is only released at the end of the current method's invocation.  Using it in a loop can result in unbounded stack growth and eventual stack overflow conditions."
      },
      {
        "Code": "CA2015",
        "Title": "Do not define finalizers for types derived from MemoryManager&lt;T&gt;",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2015",
        "Description": "Adding a finalizer to a type derived from MemoryManager<T> may permit memory to be freed while it is still in use by a Span<T>."
      },
      {
        "Code": "CA2016",
        "Title": "Forward the CancellationToken parameter to methods that take one",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2016",
        "Description": "Forward the CancellationToken parameter to methods that take one to ensure the operation cancellation notifications gets properly propagated, or pass in CancellationToken.None explicitly to indicate intentionally not propagating the token."
      },
      {
        "Code": "CA2100",
        "Title": "Review SQL queries for security vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2100",
        "Description": "A method sets the System.Data.IDbCommand.CommandText property by using a string that is built from a string argument to the method. This rule assumes that the string argument contains user input. A SQL command string that is built from user input is vulnerable to SQL injection attacks."
      },
      {
        "Code": "CA2101",
        "Title": "Specify marshaling for P/Invoke string arguments",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2101",
        "Description": "A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability."
      },
      {
        "Code": "CA2109",
        "Title": "Review visible event handlers",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2109",
        "Description": "A public or protected event-handling method was detected. Event-handling methods should not be exposed unless absolutely necessary."
      },
      {
        "Code": "CA2119",
        "Title": "Seal methods that satisfy private interfaces",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2119",
        "Description": "An inheritable public type provides an overridable method implementation of an internal (Friend in Visual Basic) interface. To fix a violation of this rule, prevent the method from being overridden outside the assembly."
      },
      {
        "Code": "CA2153",
        "Title": "Avoid handling Corrupted State Exceptions",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2153",
        "Description": "Corrupted State Exceptions (CSEs) indicate that memory corruption exists in your process. Catching these rather than allowing the process to crash can lead to security vulnerabilities if an attacker can place an exploit into the corrupted memory region."
      },
      {
        "Code": "CA2200",
        "Title": "Rethrow to preserve stack details",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2200",
        "Description": "An exception is rethrown and the exception is explicitly specified in the throw statement. If an exception is rethrown by specifying the exception in the throw statement, the list of method calls between the original method that threw the exception and the current method is lost."
      },
      {
        "Code": "CA2201",
        "Title": "Do not raise reserved exception types",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2201",
        "Description": "This makes the original error difficult to detect and debug."
      },
      {
        "Code": "CA2207",
        "Title": "Initialize value type static fields inline",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2207",
        "Description": "A value type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor."
      },
      {
        "Code": "CA2208",
        "Title": "Instantiate argument exceptions correctly",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2208",
        "Description": "A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException."
      },
      {
        "Code": "CA2211",
        "Title": "Non-constant fields should not be visible",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2211",
        "Description": "Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques to synchronize access to the class object."
      },
      {
        "Code": "CA2213",
        "Title": "Disposable fields should be disposed",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2213",
        "Description": "A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type."
      },
      {
        "Code": "CA2214",
        "Title": "Do not call overridable methods in constructors",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2214",
        "Description": "When a constructor calls a virtual method, the constructor for the instance that invokes the method may not have executed."
      },
      {
        "Code": "CA2215",
        "Title": "Dispose methods should call base class dispose",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2215",
        "Description": "If a type inherits from a disposable type, it must call the Dispose method of the base type from its own Dispose method."
      },
      {
        "Code": "CA2216",
        "Title": "Disposable types should declare finalizer",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2216",
        "Description": "A type that implements System.IDisposable and has fields that suggest the use of unmanaged resources does not implement a finalizer, as described by Object.Finalize."
      },
      {
        "Code": "CA2218",
        "Title": "Override GetHashCode on overriding Equals",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2218",
        "Description": "A public type overrides System.Object.Equals but does not override System.Object.GetHashCode."
      },
      {
        "Code": "CA2217",
        "Title": "Do not mark enums with FlagsAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2217",
        "Description": "An externally visible enumeration is marked by using FlagsAttribute, and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration."
      },
      {
        "Code": "CA2219",
        "Title": "Do not raise exceptions in exception clauses",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2219",
        "Description": "When an exception is raised in a finally or fault clause, the new exception hides the active exception. When an exception is raised in a filter clause, the run time silently catches the exception. This makes the original error difficult to detect and debug."
      },
      {
        "Code": "CA2224",
        "Title": "Override equals on overloading operator equals",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2224",
        "Description": "A public type implements the equality operator but doesn't override System.Object.Equals."
      },
      {
        "Code": "CA2225",
        "Title": "Operator overloads have named alternates",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2225",
        "Description": "An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators."
      },
      {
        "Code": "CA2226",
        "Title": "Operators should have symmetrical overloads",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2226",
        "Description": "A type implements the equality or inequality operator and does not implement the opposite operator."
      },
      {
        "Code": "CA2227",
        "Title": "Collection properties should be read only",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2227",
        "Description": "A writable collection property allows a user to replace the collection with a different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set."
      },
      {
        "Code": "CA2229",
        "Title": "Implement serialization constructors",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2229",
        "Description": "To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected."
      },
      {
        "Code": "CA2231",
        "Title": "Overload operator equals on overriding ValueType.Equals",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2231",
        "Description": "A value type overrides Object.Equals but does not implement the equality operator."
      },
      {
        "Code": "CA2234",
        "Title": "Pass System.Uri objects instead of strings",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2234",
        "Description": "A call is made to a method that has a string parameter whose name contains \"uri\", \"URI\", \"urn\", \"URN\", \"url\", or \"URL\". The declaring type of the method contains a corresponding method overload that has a System.Uri parameter."
      },
      {
        "Code": "CA2235",
        "Title": "Mark all non-serializable fields",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2235",
        "Description": "An instance field of a type that is not serializable is declared in a type that is serializable."
      },
      {
        "Code": "CA2237",
        "Title": "Mark ISerializable types with SerializableAttribute",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2237",
        "Description": "To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface."
      },
      {
        "Code": "CA2241",
        "Title": "Provide correct arguments to formatting methods",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2241",
        "Description": "The format argument that is passed to System.String.Format does not contain a format item that corresponds to each object argument, or vice versa."
      },
      {
        "Code": "CA2242",
        "Title": "Test for NaN correctly",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2242",
        "Description": "This expression tests a value against Single.Nan or Double.Nan. Use Single.IsNan(Single) or Double.IsNan(Double) to test the value."
      },
      {
        "Code": "CA2243",
        "Title": "Attribute string literals should parse correctly",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2243",
        "Description": "The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version."
      },
      {
        "Code": "CA2244",
        "Title": "Do not duplicate indexed element initializations",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2244",
        "Description": "An object initializer has more than one indexed element initializer with the same constant index. All but the last initializer are redundant."
      },
      {
        "Code": "CA2245",
        "Title": "Do not assign a property to itself",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2245",
        "Description": "A property was accidentally assigned to itself."
      },
      {
        "Code": "CA2246",
        "Title": "Do not assign a symbol and its member in the same statement",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2246",
        "Description": "Assigning a symbol and its member, that is, a field or a property, in the same statement is not recommended. It is not clear if the member access was intended to use the symbol's old value prior to the assignment or the new value from the assignment in this statement."
      },
      {
        "Code": "CA2247",
        "Title": "Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum.",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2247",
        "Description": "TaskCompletionSource has constructors that take TaskCreationOptions that control the underlying Task, and constructors that take object state that's stored in the task.  Accidentally passing a TaskContinuationOptions instead of a TaskCreationOptions will result in the call treating the options as state."
      },
      {
        "Code": "CA2248",
        "Title": "Provide correct enum argument to Enum.HasFlag",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2248",
        "Description": "The enum type passed as an argument to the HasFlag method call is different from the calling enum type."
      },
      {
        "Code": "CA2249",
        "Title": "Consider using String.Contains instead of String.IndexOf",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2249",
        "Description": "Calls to string.IndexOf where the result is used to check for the presence/absence of a substring can be replaced by string.Contains."
      },
      {
        "Code": "CA2250",
        "Title": "Use ThrowIfCancellationRequested",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2250",
        "Description": "ThrowIfCancellationRequested automatically checks whether the token has been canceled, and throws an OperationCanceledException if it has."
      },
      {
        "Code": "CA2300",
        "Title": "Do not use insecure deserializer BinaryFormatter",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2300",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2301",
        "Title": "Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2301",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2302",
        "Title": "Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2302",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2305",
        "Title": "Do not use insecure deserializer LosFormatter",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2305",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2310",
        "Title": "Do not use insecure deserializer NetDataContractSerializer",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2310",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2311",
        "Title": "Do not deserialize without first setting NetDataContractSerializer.Binder",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2311",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2312",
        "Title": "Ensure NetDataContractSerializer.Binder is set before deserializing",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2312",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2315",
        "Title": "Do not use insecure deserializer ObjectStateFormatter",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2315",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2321",
        "Title": "Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2321",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2322",
        "Title": "Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2322",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2326",
        "Title": "Do not use TypeNameHandling values other than None",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2326",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2327",
        "Title": "Do not use insecure JsonSerializerSettings",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2327",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2328",
        "Title": "Ensure that JsonSerializerSettings are secure",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2328",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2329",
        "Title": "Do not deserialize with JsonSerializer using an insecure configuration",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2329",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2330",
        "Title": "Ensure that JsonSerializer has a secure configuration when deserializing",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2330",
        "Description": "Insecure deserializers are vulnerable when deserializing untrusted data. An attacker could modify the serialized data to include unexpected types to inject objects with malicious side effects."
      },
      {
        "Code": "CA2350",
        "Title": "Ensure DataTable.ReadXml()'s input is trusted",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2350",
        "Description": "When deserializing a DataTable with untrusted input, an attacker can craft malicious input to perform a denial of service attack. There may be unknown remote code execution vulnerabilities."
      },
      {
        "Code": "CA2351",
        "Title": "Ensure DataSet.ReadXml()'s input is trusted",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2351",
        "Description": "When deserializing a DataSet with untrusted input, an attacker can craft malicious input to perform a denial of service attack. There may be unknown remote code execution vulnerabilities."
      },
      {
        "Code": "CA2352",
        "Title": "Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2352",
        "Description": "A class or struct marked with SerializableAttribute contains a DataSet or DataTable field or property, and doesn't have a GeneratedCodeAttribute."
      },
      {
        "Code": "CA2353",
        "Title": "Unsafe DataSet or DataTable in serializable type",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2353",
        "Description": "A class or struct marked with an XML serialization attribute or a data contract attribute contains a DataSet or DataTable field or property."
      },
      {
        "Code": "CA2354",
        "Title": "Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attack",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2354",
        "Description": "Deserializing with an System.Runtime.Serialization.IFormatter serialized, and the casted type's object graph can include a DataSet or DataTable."
      },
      {
        "Code": "CA2355",
        "Title": "Unsafe DataSet or DataTable in deserialized object graph",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2355",
        "Description": "Deserializing when the casted or specified type's object graph can include a DataSet or DataTable."
      },
      {
        "Code": "CA2356",
        "Title": "Unsafe DataSet or DataTable in web deserialized object graph",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2356",
        "Description": "A method with a System.Web.Services.WebMethodAttribute or System.ServiceModel.OperationContractAttribute has a parameter that may reference a DataSet or DataTable."
      },
      {
        "Code": "CA2361",
        "Title": "Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2361",
        "Description": "When deserializing a DataSet with untrusted input, an attacker can craft malicious input to perform a denial of service attack. There may be unknown remote code execution vulnerabilities."
      },
      {
        "Code": "CA2362",
        "Title": "Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2362",
        "Description": "When deserializing untrusted input with BinaryFormatter and the deserialized object graph contains a DataSet or DataTable, an attacker can craft a malicious payload to perform a remote code execution attack."
      },
      {
        "Code": "CA3001",
        "Title": "Review code for SQL injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3001",
        "Description": "When working with untrusted input and SQL commands, be mindful of SQL injection attacks. An SQL injection attack can execute malicious SQL commands, compromising the security and integrity of your application."
      },
      {
        "Code": "CA3002",
        "Title": "Review code for XSS vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3002",
        "Description": "When working with untrusted input from web requests, be mindful of cross-site scripting (XSS) attacks. An XSS attack injects untrusted input into raw HTML output, allowing the attacker to execute malicious scripts or maliciously modify content in your web page."
      },
      {
        "Code": "CA3003",
        "Title": "Review code for file path injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3003",
        "Description": "When working with untrusted input from web requests, be mindful of using user-controlled input when specifying paths to files."
      },
      {
        "Code": "CA3004",
        "Title": "Review code for information disclosure vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3004",
        "Description": "Disclosing exception information gives attackers insight into the internals of your application, which can help attackers find other vulnerabilities to exploit."
      },
      {
        "Code": "CA3006",
        "Title": "Review code for process command injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3006",
        "Description": "When working with untrusted input, be mindful of command injection attacks. A command injection attack can execute malicious commands on the underlying operating system, compromising the security and integrity of your server."
      },
      {
        "Code": "CA3007",
        "Title": "Review code for open redirect vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3007",
        "Description": "When working with untrusted input, be mindful of open redirect vulnerabilities. An attacker can exploit an open redirect vulnerability to use your website to give the appearance of a legitimate URL, but redirect an unsuspecting visitor to a phishing or other malicious webpage."
      },
      {
        "Code": "CA3008",
        "Title": "Review code for XPath injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3008",
        "Description": "When working with untrusted input, be mindful of XPath injection attacks. Constructing XPath queries using untrusted input may allow an attacker to maliciously manipulate the query to return an unintended result, and possibly disclose the contents of the queried XML."
      },
      {
        "Code": "CA3009",
        "Title": "Review code for XML injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3009",
        "Description": "When working with untrusted input, be mindful of XML injection attacks."
      },
      {
        "Code": "CA3010",
        "Title": "Review code for XAML injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3010",
        "Description": "When working with untrusted input, be mindful of XAML injection attacks. XAML is a markup language that directly represents object instantiation and execution. That means elements created in XAML can interact with system resources (for example, network access and file system IO)."
      },
      {
        "Code": "CA3011",
        "Title": "Review code for DLL injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3011",
        "Description": "When working with untrusted input, be mindful of loading untrusted code. If your web application loads untrusted code, an attacker may be able to inject malicious DLLs into your process and execute malicious code."
      },
      {
        "Code": "CA3012",
        "Title": "Review code for regex injection vulnerabilities",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3012",
        "Description": "When working with untrusted input, be mindful of regex injection attacks. An attacker can use regex injection to maliciously modify a regular expression, to make the regex match unintended results, or to make the regex consume excessive CPU resulting in a Denial of Service attack."
      },
      {
        "Code": "CA3061",
        "Title": "Do not add schema by URL",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3061",
        "Description": "Do not use the unsafe overload of the Add method because it may cause dangerous external references."
      },
      {
        "Code": "CA3075",
        "Title": "Insecure DTD Processing",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "Description": "If you use insecure DTDProcessing instances or reference external entity sources, the parser may accept untrusted input and disclose sensitive information to attackers."
      },
      {
        "Code": "CA3076",
        "Title": "Insecure XSLT Script Execution",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3076",
        "Description": "If you execute Extensible Stylesheet Language Transformations (XSLT) in .NET applications insecurely, the processor may resolve untrusted URI references that could disclose sensitive information to attackers, leading to Denial of Service and Cross-Site attacks."
      },
      {
        "Code": "CA3077",
        "Title": "Insecure Processing in API Design, XML Document and XML Text Reader",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3077",
        "Description": "When designing an API derived from XMLDocument and XMLTextReader, be mindful of DtdProcessing. Using insecure DTDProcessing instances when referencing or resolving external entity sources or setting insecure values in the XML may lead to information disclosure."
      },
      {
        "Code": "CA3147",
        "Title": "Mark verb handlers with ValidateAntiForgeryToken",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3147",
        "Description": "When designing an ASP.NET MVC controller, be mindful of cross-site request forgery attacks. A cross-site request forgery attack can send malicious requests from an authenticated user to your ASP.NET MVC controller."
      },
      {
        "Code": "CA5350",
        "Title": "Do Not Use Weak Cryptographic Algorithms",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5350",
        "Description": "Weak encryption algorithms and hashing functions are used today for a number of reasons, but they should not be used to guarantee the confidentiality or integrity of the data they protect. This rule triggers when it finds TripleDES, SHA1, or RIPEMD160 algorithms in the code."
      },
      {
        "Code": "CA5351",
        "Title": "Do Not Use Broken Cryptographic Algorithms",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5351",
        "Description": "Broken cryptographic algorithms are not considered secure and their use should be strongly discouraged. This rule triggers when it finds the MD5 hash algorithm or either the DES or RC2 encryption algorithms in code."
      },
      {
        "Code": "CA5358",
        "Title": "Do Not Use Unsafe Cipher Modes",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5358",
        "Description": "Do Not Use Unsafe Cipher Modes"
      },
      {
        "Code": "CA5359",
        "Title": "Do not disable certificate validation",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5359",
        "Description": "A certificate can help authenticate the identity of the server. Clients should validate the server certificate to ensure requests are sent to the intended server. If the ServerCertificateValidationCallback always returns true, any certificate will pass validation."
      },
      {
        "Code": "CA5360",
        "Title": "Do not call dangerous methods in deserialization",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5360",
        "Description": "Insecure deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application, inflict a Denial-of-Service (DoS) attack, or even execute arbitrary code upon it being deserialized. It's frequently possible for malicious users to abuse these deserialization features when the application is deserializing untrusted data which is under their control. Specifically, invoke dangerous methods in the process of deserialization. Successful insecure deserialization attacks could allow an attacker to carry out attacks such as DoS attacks, authentication bypasses, and remote code execution."
      },
      {
        "Code": "CA5361",
        "Title": "Do not disable Schannel use of strong crypto",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5361",
        "Description": "Setting Switch.System.Net.DontEnableSchUseStrongCrypto to true weakens the cryptography used in outgoing Transport Layer Security (TLS) connections. Weaker cryptography can compromise the confidentiality of communication between your application and the server, making it easier for attackers to eavesdrop sensitive data."
      },
      {
        "Code": "CA5362",
        "Title": "Potential reference cycle in deserialized object graph",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5362",
        "Description": "If deserializing untrusted data, then any code processing the deserialized object graph needs to handle reference cycles without going into infinite loops. This includes both code that's part of a deserialization callback and code that processes the object graph after deserialization completed. Otherwise, an attacker could perform a Denial-of-Service attack with malicious data containing a reference cycle."
      },
      {
        "Code": "CA5363",
        "Title": "Do not disable request validation",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5363",
        "Description": "Request validation is a feature in ASP.NET that examines HTTP requests and determines whether they contain potentially dangerous content that can lead to injection attacks, including cross-site-scripting."
      },
      {
        "Code": "CA5364",
        "Title": "Do not use deprecated security protocols",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5364",
        "Description": "Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext Transfer Protocol Secure (HTTPS). Older protocol versions of TLS are less secure than TLS 1.2 and TLS 1.3 and are more likely to have new vulnerabilities. Avoid older protocol versions to minimize risk."
      },
      {
        "Code": "CA5365",
        "Title": "Do Not Disable HTTP Header Checking",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5365",
        "Description": "HTTP header checking enables encoding of the carriage return and newline characters, \\r and \\n, that are found in response headers. This encoding can help to avoid injection attacks that exploit an application that echoes untrusted data contained by the header."
      },
      {
        "Code": "CA5366",
        "Title": "Use XmlReader For DataSet Read XML",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5366",
        "Description": "Using a DataSet to read XML with untrusted data may load dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD processing disabled."
      },
      {
        "Code": "CA5367",
        "Title": "Do Not Serialize Types With Pointer Fields",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5367",
        "Description": "This rule checks whether there's a serializable class with a pointer field or property. Members that can't be serialized can be a pointer, such as static members or fields marked with NonSerializedAttribute."
      },
      {
        "Code": "CA5368",
        "Title": "Set ViewStateUserKey For Classes Derived From Page",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5368",
        "Description": "Setting the ViewStateUserKey property can help you prevent attacks on your application by allowing you to assign an identifier to the view-state variable for individual users so that attackers cannot use the variable to generate an attack. Otherwise, there will be vulnerabilities to cross-site request forgery."
      },
      {
        "Code": "CA5369",
        "Title": "Use XmlReader for Deserialize",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5369",
        "Description": "Processing untrusted DTD and XML schemas may enable loading dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD and XML inline schema processing disabled."
      },
      {
        "Code": "CA5370",
        "Title": "Use XmlReader for validating reader",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5370",
        "Description": "Processing untrusted DTD and XML schemas may enable loading dangerous external references. This dangerous loading can be restricted by using an XmlReader with a secure resolver or with DTD and XML inline schema processing disabled."
      },
      {
        "Code": "CA5371",
        "Title": "Use XmlReader for schema read",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5371",
        "Description": "Processing untrusted DTD and XML schemas may enable loading dangerous external references. Using an XmlReader with a secure resolver or with DTD and XML inline schema processing disabled restricts this."
      },
      {
        "Code": "CA5372",
        "Title": "Use XmlReader for XPathDocument",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5372",
        "Description": "Processing XML from untrusted data may load dangerous external references, which can be restricted by using an XmlReader with a secure resolver or with DTD processing disabled."
      },
      {
        "Code": "CA5373",
        "Title": "Do not use obsolete key derivation function",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5373",
        "Description": "This rule detects the invocation of weak key derivation methods System.Security.Cryptography.PasswordDeriveBytes and Rfc2898DeriveBytes.CryptDeriveKey. System.Security.Cryptography.PasswordDeriveBytes used a weak algorithm PBKDF1."
      },
      {
        "Code": "CA5374",
        "Title": "Do Not Use XslTransform",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5374",
        "Description": "This rule checks if System.Xml.Xsl.XslTransform is instantiated in the code. System.Xml.Xsl.XslTransform is now obsolete and shouldn't be used."
      },
      {
        "Code": "CA5375",
        "Title": "Do not use account shared access signature",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5375",
        "Description": "An account SAS can delegate access to read, write, and delete operations on blob containers, tables, queues, and file shares that are not permitted with a service SAS. However, it doesn't support container-level policies and has less flexibility and control over the permissions that are granted. Once malicious users get it, your storage account will be compromised easily."
      },
      {
        "Code": "CA5376",
        "Title": "Use SharedAccessProtocol HttpsOnly",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5376",
        "Description": "SAS is sensitive data that can't be transported in plain text on HTTP."
      },
      {
        "Code": "CA5377",
        "Title": "Use container level access policy",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5377",
        "Description": "A container-level access policy can be modified or revoked at any time. It provides greater flexibility and control over the permissions that are granted."
      },
      {
        "Code": "CA5378",
        "Title": "Do not disable ServicePointManagerSecurityProtocols",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5378",
        "Description": "Setting Switch.System.ServiceModel.DisableUsingServicePointManagerSecurityProtocols to true limits Windows Communication Framework's (WCF) Transport Layer Security (TLS) connections to using TLS 1.0. That version of TLS will be deprecated."
      },
      {
        "Code": "CA5379",
        "Title": "Do not use weak key derivation function algorithm",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5379",
        "Description": "The Rfc2898DeriveBytes class defaults to using the SHA1 algorithm. You should specify the hash algorithm to use in some overloads of the constructor with SHA256 or higher. Note, HashAlgorithm property only has a get accessor and doesn't have a overriden modifier."
      },
      {
        "Code": "CA5380",
        "Title": "Do not add certificates to root store",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5380",
        "Description": "This rule detects code that adds a certificate into the Trusted Root Certification Authorities certificate store. By default, the Trusted Root Certification Authorities certificate store is configured with a set of public CAs that has met the requirements of the Microsoft Root Certificate Program."
      },
      {
        "Code": "CA5381",
        "Title": "Ensure certificates are not added to root store",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5381",
        "Description": "This rule detects code that potentially adds a certificate into the Trusted Root Certification Authorities certificate store. By default, the Trusted Root Certification Authorities certificate store is configured with a set of public certification authorities (CAs) that has met the requirements of the Microsoft Root Certificate Program."
      },
      {
        "Code": "CA5382",
        "Title": "Use secure cookies in ASP.NET Core",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5382",
        "Description": "Applications available over HTTPS must use secure cookies, which indicate to the browser that the cookie should only be transmitted using Secure Sockets Layer (SSL)."
      },
      {
        "Code": "CA5383",
        "Title": "Ensure use secure cookies in ASP.NET Core",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5383",
        "Description": "Applications available over HTTPS must use secure cookies, which indicate to the browser that the cookie should only be transmitted using Secure Sockets Layer (SSL)."
      },
      {
        "Code": "CA5384",
        "Title": "Do not use digital signature algorithm (DSA)",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5384",
        "Description": "DSA is a weak asymmetric encryption algorithm."
      },
      {
        "Code": "CA5385",
        "Title": "Use Rivest–Shamir–Adleman (RSA) algorithm with sufficient key size",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5385",
        "Description": "An RSA key smaller than 2048 bits is more vulnerable to brute force attacks."
      },
      {
        "Code": "CA5386",
        "Title": "Avoid hardcoding SecurityProtocolType value",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5386",
        "Description": "Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext Transfer Protocol Secure (HTTPS). Protocol versions TLS 1.0 and TLS 1.1 are deprecated, while TLS 1.2 and TLS 1.3 are current. In the future, TLS 1.2 and TLS 1.3 may be deprecated. To ensure that your application remains secure, avoid hardcoding a protocol version and target at least .NET Framework v4.7.1."
      },
      {
        "Code": "CA5387",
        "Title": "Do not use weak key derivation function with insufficient iteration count",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5387",
        "Description": "This rule checks if a cryptographic key was generated by Rfc2898DeriveBytes with an iteration count of less than 100,000. A higher iteration count can help mitigate against dictionary attacks that try to guess the generated cryptographic key."
      },
      {
        "Code": "CA5388",
        "Title": "Ensure sufficient iteration count when using weak key derivation function",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5388",
        "Description": "This rule checks if a cryptographic key was generated by Rfc2898DeriveBytes with an iteration count that may be less than 100,000. A higher iteration count can help mitigate against dictionary attacks that try to guess the generated cryptographic key."
      },
      {
        "Code": "CA5389",
        "Title": "Do not add archive item's path to the target file system path",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5389",
        "Description": "File path can be relative and can lead to file system access outside of the expected file system target path, leading to malicious config changes and remote code execution via lay-and-wait technique."
      },
      {
        "Code": "CA5390",
        "Title": "Do not hard-code encryption key",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5390",
        "Description": "For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. When a key is hard-coded, it is easily discovered. Even with compiled binaries, it is easy for malicious users to extract it. Once the private key is compromised, the cipher text can be decrypted directly and is not protected anymore."
      },
      {
        "Code": "CA5391",
        "Title": "Use antiforgery tokens in ASP.NET Core MVC controllers",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5391",
        "Description": "Handling a POST, PUT, PATCH, or DELETE request without validating an antiforgery token may be vulnerable to cross-site request forgery attacks. A cross-site request forgery attack can send malicious requests from an authenticated user to your ASP.NET Core MVC controller."
      },
      {
        "Code": "CA5392",
        "Title": "Use DefaultDllImportSearchPaths attribute for P/Invokes",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5392",
        "Description": "By default, P/Invoke functions using DllImportAttribute probe a number of directories, including the current working directory for the library to load. This can be a security issue for certain applications, leading to DLL hijacking."
      },
      {
        "Code": "CA5393",
        "Title": "Do not use unsafe DllImportSearchPath value",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5393",
        "Description": "There could be a malicious DLL in the default DLL search directories and assembly directories. Or, depending on where your application is run from, there could be a malicious DLL in the application's directory."
      },
      {
        "Code": "CA5394",
        "Title": "Do not use insecure randomness",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5394",
        "Description": "Using a cryptographically weak pseudo-random number generator may allow an attacker to predict what security-sensitive value will be generated."
      },
      {
        "Code": "CA5395",
        "Title": "Miss HttpVerb attribute for action methods",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5395",
        "Description": "All the action methods that create, edit, delete, or otherwise modify data needs to be protected with the antiforgery attribute from cross-site request forgery attacks. Performing a GET operation should be a safe operation that has no side effects and doesn't modify your persisted data."
      },
      {
        "Code": "CA5396",
        "Title": "Set HttpOnly to true for HttpCookie",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5396",
        "Description": "As a defense in depth measure, ensure security sensitive HTTP cookies are marked as HttpOnly. This indicates web browsers should disallow scripts from accessing the cookies. Injected malicious scripts are a common way of stealing cookies."
      },
      {
        "Code": "CA5397",
        "Title": "Do not use deprecated SslProtocols values",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5397",
        "Description": "Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext Transfer Protocol Secure (HTTPS). Older protocol versions of TLS are less secure than TLS 1.2 and TLS 1.3 and are more likely to have new vulnerabilities. Avoid older protocol versions to minimize risk."
      },
      {
        "Code": "CA5398",
        "Title": "Avoid hardcoded SslProtocols values",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5398",
        "Description": "Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext Transfer Protocol Secure (HTTPS). Protocol versions TLS 1.0 and TLS 1.1 are deprecated, while TLS 1.2 and TLS 1.3 are current. In the future, TLS 1.2 and TLS 1.3 may be deprecated. To ensure that your application remains secure, avoid hardcoding a protocol version."
      },
      {
        "Code": "CA5399",
        "Title": "Definitely disable HttpClient certificate revocation list check",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5399",
        "Description": "A revoked certificate isn't trusted anymore. It could be used by attackers passing some malicious data or stealing sensitive data in HTTPS communication."
      },
      {
        "Code": "CA5400",
        "Title": "Ensure HttpClient certificate revocation list check is not disabled",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5400",
        "Description": "A revoked certificate isn't trusted anymore. It could be used by attackers passing some malicious data or stealing sensitive data in HTTPS communication."
      },
      {
        "Code": "CA5401",
        "Title": "Do not use CreateEncryptor with non-default IV",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5401",
        "Description": "Symmetric encryption should always use a non-repeatable initialization vector to prevent dictionary attacks."
      },
      {
        "Code": "CA5402",
        "Title": "Use CreateEncryptor with the default IV",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5402",
        "Description": "Symmetric encryption should always use a non-repeatable initialization vector to prevent dictionary attacks."
      },
      {
        "Code": "CA5403",
        "Title": "Do not hard-code certificate",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5403",
        "Description": "The data or rawData parameter of a X509Certificate or X509Certificate2 constructor is hard-coded."
      },
      {
        "Code": "IL3000",
        "Title": "Avoid accessing Assembly file path when publishing as a single file",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/il3000",
        "Description": "Avoid accessing Assembly file path when publishing as a single file."
      },
      {
        "Code": "IL3001",
        "Title": "Avoid accessing Assembly file path when publishing as a single-file",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/il3001",
        "Description": "Avoid accessing Assembly file path when publishing as a single file."
      },
      {
        "Code": "IL3002",
        "Title": "Avoid calling members annotated with 'RequiresAssemblyFilesAttribute' when publishing as a single file",
        "Link": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/il3002",
        "Description": "Avoid calling members annotated with 'RequiresAssemblyFilesAttribute' when publishing as a single file"
      }
    ]
  },
  {
    "Name": "Microsoft.CompilerErrors",
    "Rules": [
      {
        "Code": "CS0001",
        "Title": "Compiler Error CS0001",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0001",
        "Description": "Internal compiler error"
      },
      {
        "Code": "CS0003",
        "Title": "Compiler Error CS0003",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0003",
        "Description": "Out of memory"
      },
      {
        "Code": "CS0004",
        "Title": "Compiler Error CS0004",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0004",
        "Description": "Warning treated as error"
      },
      {
        "Code": "CS0005",
        "Title": "Compiler Error CS0005",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0005",
        "Description": "Compiler option 'compiler_option' must be followed by an argument"
      },
      {
        "Code": "CS0006",
        "Title": "Compiler Error CS0006",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0006",
        "Description": "Metadata file 'dll_name' could not be found"
      },
      {
        "Code": "CS0007",
        "Title": "Compiler Error CS0007",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0007",
        "Description": "Unexpected common language runtime initialization error — 'description'"
      },
      {
        "Code": "CS0008",
        "Title": "Compiler Error CS0008",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0008",
        "Description": "Unexpected error reading metadata from file 'file' — 'description'"
      },
      {
        "Code": "CS0009",
        "Title": "Compiler Error CS0009",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0009",
        "Description": "Metadata file 'file' could not be opened — 'description'"
      },
      {
        "Code": "CS0010",
        "Title": "Compiler Error CS0010",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0010",
        "Description": "Unexpected fatal error -- 'error'."
      },
      {
        "Code": "CS0011",
        "Title": "Compiler Error CS0011",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0011",
        "Description": "The base class or interface 'class' in assembly 'assembly' referenced by type 'type' could not be resolved"
      },
      {
        "Code": "CS0012",
        "Title": "Compiler Error CS0012",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0012",
        "Description": "The type 'type' is defined in an assembly that is not referenced. You must add a reference to assembly 'assembly'."
      },
      {
        "Code": "CS0013",
        "Title": "Compiler Error CS0013",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0013",
        "Description": "Unexpected error writing metadata to file 'ModelStore.dll' -- 'No logical space left to create more user strings."
      },
      {
        "Code": "CS0014",
        "Title": "Compiler Error CS0014",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0014",
        "Description": "Required file 'file' could not be found"
      },
      {
        "Code": "CS0015",
        "Title": "Compiler Error CS0015",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0015",
        "Description": "The name of type 'type' is too long"
      },
      {
        "Code": "CS0016",
        "Title": "Compiler Error CS0016",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0016",
        "Description": "Could not write to output file 'file' — 'reason'"
      },
      {
        "Code": "CS0017",
        "Title": "Compiler Error CS0017",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0017",
        "Description": "Program 'output file name' has more than one entry point defined. Compile with /main to specify the type that contains the entry point."
      },
      {
        "Code": "CS0019",
        "Title": "Compiler Error CS0019",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0019",
        "Description": "Operator 'operator' cannot be applied to operands of type 'type' and 'type'"
      },
      {
        "Code": "CS0020",
        "Title": "Compiler Error CS0020",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0020",
        "Description": "Division by constant zero"
      },
      {
        "Code": "CS0021",
        "Title": "Compiler Error CS0021",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0021",
        "Description": "Cannot apply indexing with [] to an expression of type 'type'"
      },
      {
        "Code": "CS0022",
        "Title": "Compiler Error CS0022",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0022",
        "Description": "Wrong number of indices inside [], expected 'number'"
      },
      {
        "Code": "CS0023",
        "Title": "Compiler Error CS0023",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0023",
        "Description": "Operator 'operator' cannot be applied to operand of type 'type'"
      },
      {
        "Code": "CS0025",
        "Title": "Compiler Error CS0025",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0025",
        "Description": "Standard library file 'file' could not be found"
      },
      {
        "Code": "CS0026",
        "Title": "Compiler Error CS0026",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0026",
        "Description": "Keyword 'this' is not valid in a static property, static method, or static field initializer"
      },
      {
        "Code": "CS0027",
        "Title": "Compiler Error CS0027",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0027",
        "Description": "Keyword 'this' is not available in the current context"
      },
      {
        "Code": "CS0029",
        "Title": "Compiler Error CS0029",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0029",
        "Description": "Cannot implicitly convert type 'type' to 'type'"
      },
      {
        "Code": "CS0030",
        "Title": "Compiler Error CS0030",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0030",
        "Description": "Cannot convert type 'type' to 'type'"
      },
      {
        "Code": "CS0031",
        "Title": "Compiler Error CS0031",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0031",
        "Description": "Constant value 'value' cannot be converted to a 'type'."
      },
      {
        "Code": "CS0034",
        "Title": "Compiler Error CS0034",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0034",
        "Description": "Operator 'operator' is ambiguous on operands of type 'type1' and 'type2'"
      },
      {
        "Code": "CS0035",
        "Title": "Compiler Error CS0035",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0035",
        "Description": "Operator 'operator' is ambiguous on an operand of type 'type'"
      },
      {
        "Code": "CS0036",
        "Title": "Compiler Error CS0036",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0036",
        "Description": "An out parameter cannot have the '[In]' attribute"
      },
      {
        "Code": "CS0037",
        "Title": "Compiler Error CS0037",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0037",
        "Description": "Cannot convert null to 'type' because it is a non-nullable value type"
      },
      {
        "Code": "CS0038",
        "Title": "Compiler Error CS0038",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0038",
        "Description": "Cannot access a nonstatic member of outer type 'type1' via nested type 'type2'"
      },
      {
        "Code": "CS0039",
        "Title": "Compiler Error CS0039",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0039",
        "Description": "Cannot convert type 'type1' to 'type2' via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion"
      },
      {
        "Code": "CS0040",
        "Title": "Compiler Error CS0040",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0040",
        "Description": "Unexpected error creating debug information file — 'reason'"
      },
      {
        "Code": "CS0041",
        "Title": "Compiler Error CS0041",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0041",
        "Description": "Unexpected error writing debug information -- '{error}'"
      },
      {
        "Code": "CS0042",
        "Title": "Compiler Error CS0042",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0042",
        "Description": "Unexpected error creating debug information file 'file' — 'reason'"
      },
      {
        "Code": "CS0043",
        "Title": "Compiler Error CS0043",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0043",
        "Description": "PDB file 'file' has an incorrect or out-of-date format. Delete it and rebuild."
      },
      {
        "Code": "CS0050",
        "Title": "Compiler Error CS0050",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0050",
        "Description": "Inconsistent accessibility: return type 'type' is less accessible than method 'method'"
      },
      {
        "Code": "CS0051",
        "Title": "Compiler Error CS0051",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0051",
        "Description": "Inconsistent accessibility: parameter type 'type' is less accessible than method 'method'"
      },
      {
        "Code": "CS0052",
        "Title": "Compiler Error CS0052",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0052",
        "Description": "Inconsistent accessibility: field type 'type' is less accessible than field 'field'"
      },
      {
        "Code": "CS0053",
        "Title": "Compiler Error CS0053",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0053",
        "Description": "Inconsistent accessibility: property type 'type' is less accessible than property 'property'"
      },
      {
        "Code": "CS0054",
        "Title": "Compiler Error CS0054",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0054",
        "Description": "Inconsistent accessibility: indexer return type 'type' is less accessible than indexer 'indexer'"
      },
      {
        "Code": "CS0055",
        "Title": "Compiler Error CS0055",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0055",
        "Description": "Inconsistent accessibility: parameter type 'type' is less accessible than indexer 'indexer'"
      },
      {
        "Code": "CS0056",
        "Title": "Compiler Error CS0056",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0056",
        "Description": "Inconsistent accessibility: return type 'type' is less accessible than operator 'operator'"
      },
      {
        "Code": "CS0057",
        "Title": "Compiler Error CS0057",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0057",
        "Description": "Inconsistent accessibility: parameter type 'type' is less accessible than operator 'operator'"
      },
      {
        "Code": "CS0058",
        "Title": "Compiler Error CS0058",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0058",
        "Description": "Inconsistent accessibility: return type 'type' is less accessible than delegate 'delegate'"
      },
      {
        "Code": "CS0059",
        "Title": "Compiler Error CS0059",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0059",
        "Description": "Inconsistent accessibility: parameter type 'type' is less accessible than delegate 'delegate'"
      },
      {
        "Code": "CS0060",
        "Title": "Compiler Error CS0060",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0060",
        "Description": "Inconsistent accessibility: base class 'class1' is less accessible than class 'class2'"
      },
      {
        "Code": "CS0061",
        "Title": "Compiler Error CS0061",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0061",
        "Description": "Inconsistent accessibility: base interface 'interface 1' is less accessible than interface 'interface 2'"
      },
      {
        "Code": "CS0065",
        "Title": "Compiler Error CS0065",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0065",
        "Description": "'event' : event property must have both add and remove accessors"
      },
      {
        "Code": "CS0066",
        "Title": "Compiler Error CS0066",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0066",
        "Description": "'event': event must be of a delegate type"
      },
      {
        "Code": "CS0068",
        "Title": "Compiler Error CS0068",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0068",
        "Description": "'event': event in interface cannot have initializer"
      },
      {
        "Code": "CS0069",
        "Title": "Compiler Error CS0069",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0069",
        "Description": "An event in an interface cannot have add or remove accessors"
      },
      {
        "Code": "CS0070",
        "Title": "Compiler Error CS0070",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0070",
        "Description": "The event 'event' can only appear on the left hand side of += or -= (except when used from within the type 'type')"
      },
      {
        "Code": "CS0071",
        "Title": "Compiler Error CS0071",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0071",
        "Description": "An explicit interface implementation of an event must use event accessor syntax"
      },
      {
        "Code": "CS0072",
        "Title": "Compiler Error CS0072",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0072",
        "Description": "'event' : cannot override; 'method' is not an event"
      },
      {
        "Code": "CS0073",
        "Title": "Compiler Error CS0073",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0073",
        "Description": "An add or remove accessor must have a body"
      },
      {
        "Code": "CS0074",
        "Title": "Compiler Error CS0074",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0074",
        "Description": "'event': abstract event cannot have initializer"
      },
      {
        "Code": "CS0075",
        "Title": "Compiler Error CS0075",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0075",
        "Description": "To cast a negative value, you must enclose the value in parentheses"
      },
      {
        "Code": "CS0076",
        "Title": "Compiler Error CS0076",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0076",
        "Description": "The enumerator name 'value__' is reserved and cannot be used"
      },
      {
        "Code": "CS0077",
        "Title": "Compiler Error CS0077",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0077",
        "Description": "The as operator must be used with a reference type or nullable type ('int' is a non-nullable value type)."
      },
      {
        "Code": "CS0079",
        "Title": "Compiler Error CS0079",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0079",
        "Description": "The event 'event' can only appear on the left hand side of += or -="
      },
      {
        "Code": "CS0080",
        "Title": "Compiler Error CS0080",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0080",
        "Description": "Constraints are not allowed on non-generic declarations"
      },
      {
        "Code": "CS0081",
        "Title": "Compiler Error CS0081",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0081",
        "Description": "Type parameter declaration must be an identifier not a type"
      },
      {
        "Code": "CS0082",
        "Title": "Compiler Error CS0082",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0082",
        "Description": "Type 'type' already reserves a member called 'name' with the same parameter types"
      },
      {
        "Code": "CS0100",
        "Title": "Compiler Error CS0100",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0100",
        "Description": "The parameter name 'parameter name' is a duplicate"
      },
      {
        "Code": "CS0101",
        "Title": "Compiler Error CS0101",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0101",
        "Description": "The namespace 'namespace' already contains a definition for 'type'"
      },
      {
        "Code": "CS0102",
        "Title": "Compiler Error CS0102",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0102",
        "Description": "The type 'type name' already contains a definition for 'identifier'"
      },
      {
        "Code": "CS0103",
        "Title": "Compiler Error CS0103",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0103",
        "Description": "The name 'identifier' does not exist in the current context"
      },
      {
        "Code": "CS0104",
        "Title": "Compiler Error CS0104",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0104",
        "Description": "'reference' is an ambiguous reference between 'identifier' and 'identifier'"
      },
      {
        "Code": "CS0106",
        "Title": "Compiler Error CS0106",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0106",
        "Description": "The modifier 'modifier' is not valid for this item"
      },
      {
        "Code": "CS0107",
        "Title": "Compiler Error CS0107",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0107",
        "Description": "More than one protection modifier"
      },
      {
        "Code": "CS0110",
        "Title": "Compiler Error CS0110",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0110",
        "Description": "The evaluation of the constant value for 'const declaration' involves a circular definition"
      },
      {
        "Code": "CS0111",
        "Title": "Compiler Error CS0111",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0111",
        "Description": "Type 'class' already defines a member called 'member' with the same parameter types"
      },
      {
        "Code": "CS0112",
        "Title": "Compiler Error CS0112",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0112",
        "Description": "A static member 'function' cannot be marked as override, virtual or abstract"
      },
      {
        "Code": "CS0113",
        "Title": "Compiler Error CS0113",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0113",
        "Description": "A member 'function' marked as override cannot be marked as new or virtual"
      },
      {
        "Code": "CS0115",
        "Title": "Compiler Error CS0115",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0115",
        "Description": "'function' : no suitable method found to override"
      },
      {
        "Code": "CS0116",
        "Title": "Compiler Error CS0116",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0116",
        "Description": "A namespace cannot directly contain members such as fields or methods."
      },
      {
        "Code": "CS0117",
        "Title": "Compiler Error CS0117",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0117",
        "Description": "'type' does not contain a definition for 'identifier'"
      },
      {
        "Code": "CS0118",
        "Title": "Compiler Error CS0118",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0118",
        "Description": "'construct1_name' is a 'construct1' but is used like a 'construct2'"
      },
      {
        "Code": "CS0119",
        "Title": "Compiler Error CS0119",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0119",
        "Description": "'construct1_name' is a 'construct1', which is not valid in the given context."
      },
      {
        "Code": "CS0120",
        "Title": "Compiler Error CS0120",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0120",
        "Description": "An object reference is required for the nonstatic field, method, or property 'member'"
      },
      {
        "Code": "CS0121",
        "Title": "Compiler error CS0121",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0121",
        "Description": "The call is ambiguous between the following methods or properties: 'method1' and 'method2'"
      },
      {
        "Code": "CS0122",
        "Title": "Compiler Error CS0122",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0122",
        "Description": "'member' is inaccessible due to its protection level"
      },
      {
        "Code": "CS0123",
        "Title": "Compiler Error CS0123",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0123",
        "Description": "No overload for 'method' matches delegate 'delegate'"
      },
      {
        "Code": "CS0126",
        "Title": "Compiler Error CS0126",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0126",
        "Description": "An object of a type convertible to 'type' is required"
      },
      {
        "Code": "CS0127",
        "Title": "Compiler Error CS0127",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0127",
        "Description": "Since 'function' returns void, a return keyword must not be followed by an object expression"
      },
      {
        "Code": "CS0128",
        "Title": "Compiler Error CS0128",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0128",
        "Description": "A local variable named 'variable' is already defined in this scope"
      },
      {
        "Code": "CS0131",
        "Title": "Compiler Error CS0131",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0131",
        "Description": "The left-hand side of an assignment must be a variable, property or indexer"
      },
      {
        "Code": "CS0132",
        "Title": "Compiler Error CS0132",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0132",
        "Description": "'constructor' : a static constructor must be parameterless"
      },
      {
        "Code": "CS0133",
        "Title": "Compiler Error CS0133",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0133",
        "Description": "The expression being assigned to 'variable' must be constant"
      },
      {
        "Code": "CS0134",
        "Title": "Compiler Error CS0134",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0134",
        "Description": "'variable' is of type 'type'. A const field of a reference type other than string can only be initialized with null."
      },
      {
        "Code": "CS0135",
        "Title": "Compiler Error CS0135",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0135",
        "Description": "'declaration1' conflicts with the declaration 'declaration2'"
      },
      {
        "Code": "CS0136",
        "Title": "Compiler Error CS0136",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0136",
        "Description": "A local variable named 'var' cannot be declared in this scope because it would give a different meaning to 'var', which is already used in a 'parent or current/child' scope to denote something else"
      },
      {
        "Code": "CS0138",
        "Title": "Compiler Error CS0138",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0138",
        "Description": "A using namespace directive can only be applied to namespaces; 'type' is a type not a namespace"
      },
      {
        "Code": "CS0139",
        "Title": "Compiler Error CS0139",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0139",
        "Description": "No enclosing loop out of which to break or continue"
      },
      {
        "Code": "CS0140",
        "Title": "Compiler Error CS0140",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0140",
        "Description": "The label 'label' is a duplicate"
      },
      {
        "Code": "CS0143",
        "Title": "Compiler Error CS0143",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0143",
        "Description": "The type 'class' has no constructors defined"
      },
      {
        "Code": "CS0144",
        "Title": "Compiler Error CS0144",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0144",
        "Description": "Cannot create an instance of the abstract class or interface 'interface'"
      },
      {
        "Code": "CS0145",
        "Title": "Compiler Error CS0145",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0145",
        "Description": "A const field requires a value to be provided"
      },
      {
        "Code": "CS0146",
        "Title": "Compiler Error CS0146",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0146",
        "Description": "Circular base class dependency involving 'class1' and 'class2'"
      },
      {
        "Code": "CS0148",
        "Title": "Compiler Error CS0148",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0148",
        "Description": "The delegate 'delegate' does not have a valid constructor"
      },
      {
        "Code": "CS0149",
        "Title": "Compiler Error CS0149",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0149",
        "Description": "Method name expected"
      },
      {
        "Code": "CS0150",
        "Title": "Compiler Error CS0150",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0150",
        "Description": "A constant value is expected"
      },
      {
        "Code": "CS0151",
        "Title": "Compiler Error CS0151",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0151",
        "Description": "A value of an integral type expected"
      },
      {
        "Code": "CS0152",
        "Title": "Compiler Error CS0152",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0152",
        "Description": "The label 'label' already occurs in this switch statement"
      },
      {
        "Code": "CS0153",
        "Title": "Compiler Error CS0153",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0153",
        "Description": "A goto case is only valid inside a switch statement"
      },
      {
        "Code": "CS0154",
        "Title": "Compiler Error CS0154",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0154",
        "Description": "The property or indexer 'property' cannot be used in this context because it lacks the get accessor"
      },
      {
        "Code": "CS0155",
        "Title": "Compiler Error CS0155",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0155",
        "Description": "The type caught or thrown must be derived from System.Exception"
      },
      {
        "Code": "CS0156",
        "Title": "Compiler Error CS0156",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0156",
        "Description": "A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause"
      },
      {
        "Code": "CS0157",
        "Title": "Compiler Error CS0157",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0157",
        "Description": "Control cannot leave the body of a finally clause"
      },
      {
        "Code": "CS0158",
        "Title": "Compiler Error CS0158",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0158",
        "Description": "The label 'label' shadows another label by the same name in a contained scope"
      },
      {
        "Code": "CS0159",
        "Title": "Compiler Error CS0159",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0159",
        "Description": "No such label 'label' within the scope of the goto statement"
      },
      {
        "Code": "CS0160",
        "Title": "Compiler Error CS0160",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0160",
        "Description": "A previous catch clause already catches all exceptions of this or of a super type ('type')"
      },
      {
        "Code": "CS0161",
        "Title": "Compiler Error CS0161",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0161",
        "Description": "'method': not all code paths return a value"
      },
      {
        "Code": "CS0163",
        "Title": "Compiler Error CS0163",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0163",
        "Description": "Control cannot fall through from one case label ('label') to another"
      },
      {
        "Code": "CS0165",
        "Title": "Compiler Error CS0165",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0165",
        "Description": "Use of unassigned local variable 'name'"
      },
      {
        "Code": "CS0167",
        "Title": "Compiler Error CS0167",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0167",
        "Description": "The delegate 'delegate' is missing the Invoke method"
      },
      {
        "Code": "CS0170",
        "Title": "Compiler Error CS0170",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0170",
        "Description": "Use of possibly unassigned field 'field'"
      },
      {
        "Code": "CS0171",
        "Title": "Compiler Error CS0171",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0171",
        "Description": "Backing field for automatically implemented property 'name' must be fully assigned before control is returned to the caller. Consider calling the parameterless constructor from a constructor initializer."
      },
      {
        "Code": "CS0172",
        "Title": "Compiler Error CS0172",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0172",
        "Description": "Type of conditional expression cannot be determined because 'type1' and 'type2' implicitly convert to one another"
      },
      {
        "Code": "CS0173",
        "Title": "Compiler Error CS0173",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0173",
        "Description": "Type of conditional expression cannot be determined because there is no implicit conversion between 'class1' and 'class2'"
      },
      {
        "Code": "CS0174",
        "Title": "Compiler Error CS0174",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0174",
        "Description": "A base class is required for a 'base' reference"
      },
      {
        "Code": "CS0175",
        "Title": "Compiler Error CS0175",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0175",
        "Description": "Use of keyword 'base' is not valid in this context"
      },
      {
        "Code": "CS0176",
        "Title": "Compiler Error CS0176",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0176",
        "Description": "Static member 'member' cannot be accessed with an instance reference; qualify it with a type name instead"
      },
      {
        "Code": "CS0177",
        "Title": "Compiler Error CS0177",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0177",
        "Description": "The out parameter 'parameter' must be assigned to before control leaves the current method"
      },
      {
        "Code": "CS0178",
        "Title": "Compiler Error CS0178",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0178",
        "Description": "Invalid rank specifier: expected ',' or ']'"
      },
      {
        "Code": "CS0179",
        "Title": "Compiler Error CS0179",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0179",
        "Description": "'member' cannot be extern and declare a body"
      },
      {
        "Code": "CS0180",
        "Title": "Compiler Error CS0180",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0180",
        "Description": "'member' cannot be both extern and abstract"
      },
      {
        "Code": "CS0182",
        "Title": "Compiler Error CS0182",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0182",
        "Description": "An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type"
      },
      {
        "Code": "CS0185",
        "Title": "Compiler Error CS0185",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0185",
        "Description": "'type' is not a reference type as required by the lock statement"
      },
      {
        "Code": "CS0186",
        "Title": "Compiler Error CS0186",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0186",
        "Description": "Use of null is not valid in this context"
      },
      {
        "Code": "CS0188",
        "Title": "Compiler Error CS0188",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0188",
        "Description": "The 'this' object cannot be used before all of its fields are assigned to"
      },
      {
        "Code": "CS0191",
        "Title": "Compiler Error CS0191",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0191",
        "Description": "Property or indexer 'name' cannot be assigned to -- it is read only"
      },
      {
        "Code": "CS0192",
        "Title": "Compiler Error CS0192",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0192",
        "Description": "Fields of static readonly field 'name' cannot be passed ref or out (except in a static constructor)"
      },
      {
        "Code": "CS0193",
        "Title": "Compiler Error CS0193",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0193",
        "Description": "The * or -&gt; operator must be applied to a pointer"
      },
      {
        "Code": "CS0196",
        "Title": "Compiler Error CS0196",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0196",
        "Description": "A pointer must be indexed by only one value"
      },
      {
        "Code": "CS0198",
        "Title": "Compiler Error CS0198",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0198",
        "Description": "Fields of static readonly field 'name' cannot be assigned to (except in a static constructor or a variable initializer)"
      },
      {
        "Code": "CS0199",
        "Title": "Compiler Error CS0199",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0199",
        "Description": "Fields of static readonly field 'name' cannot be passed ref or out (except in a static constructor)"
      },
      {
        "Code": "CS0200",
        "Title": "Compiler error CS0200",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0200",
        "Description": "Property or indexer 'property' cannot be assigned to -- it is read only"
      },
      {
        "Code": "CS0201",
        "Title": "Compiler Error CS0201",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0201",
        "Description": "Only assignment, call, increment, decrement, and new object expressions can be used as a statement"
      },
      {
        "Code": "CS0202",
        "Title": "Compiler Error CS0202",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0202",
        "Description": "foreach requires that the return type 'type' of 'type.GetEnumerator()' must have a suitable public MoveNext method and public Current property"
      },
      {
        "Code": "CS0204",
        "Title": "Compiler Error CS0204",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0204",
        "Description": "Only 65534 locals are allowed"
      },
      {
        "Code": "CS0205",
        "Title": "Compiler Error CS0205",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0205",
        "Description": "Cannot call an abstract base member: 'method'"
      },
      {
        "Code": "CS0206",
        "Title": "Compiler Error CS0206",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0206",
        "Description": "A property or indexer may not be passed as an out or ref parameter"
      },
      {
        "Code": "CS0208",
        "Title": "Compiler Error CS0208",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0208",
        "Description": "Cannot take the address of, get the size of, or declare a pointer to a managed type ('type')"
      },
      {
        "Code": "CS0209",
        "Title": "Compiler Error CS0209",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0209",
        "Description": "The type of local declared in a fixed statement must be a pointer type"
      },
      {
        "Code": "CS0210",
        "Title": "Compiler Error CS0210",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0210",
        "Description": "You must provide an initializer in a fixed or using statement declaration"
      },
      {
        "Code": "CS0211",
        "Title": "Compiler Error CS0211",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0211",
        "Description": "Cannot take the address of the given expression"
      },
      {
        "Code": "CS0212",
        "Title": "Compiler Error CS0212",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0212",
        "Description": "You can only take the address of an unfixed expression inside of a fixed statement initializer"
      },
      {
        "Code": "CS0213",
        "Title": "Compiler Error CS0213",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0213",
        "Description": "You cannot use the fixed statement to take the address of an already fixed expression"
      },
      {
        "Code": "CS0214",
        "Title": "Compiler Error CS0214",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0214",
        "Description": "Pointers and fixed size buffers may only be used in an unsafe context"
      },
      {
        "Code": "CS0215",
        "Title": "Compiler Error CS0215",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0215",
        "Description": "The return type of operator True or False must be bool"
      },
      {
        "Code": "CS0216",
        "Title": "Compiler Error CS0216",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0216",
        "Description": "The operator 'operator' requires a matching operator 'missing_operator' to also be defined"
      },
      {
        "Code": "CS0217",
        "Title": "Compiler Error CS0217",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0217",
        "Description": "In order to be applicable as a short circuit operator a user-defined logical operator ('operator') must have the same return type as the type of its 2 parameters."
      },
      {
        "Code": "CS0218",
        "Title": "Compiler Error CS0218",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0218",
        "Description": "The type ('type') must contain declarations of operator true and operator false"
      },
      {
        "Code": "CS0220",
        "Title": "Compiler Error CS0220",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0220",
        "Description": "The operation overflows at compile time in checked mode"
      },
      {
        "Code": "CS0221",
        "Title": "Compiler Error CS0221",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0221",
        "Description": "Constant value 'value' cannot be converted to a 'type' (use 'unchecked' syntax to override)"
      },
      {
        "Code": "CS0225",
        "Title": "Compiler Error CS0225",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0225",
        "Description": "The params parameter must be a single dimensional array"
      },
      {
        "Code": "CS0226",
        "Title": "Compiler Error CS0226",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0226",
        "Description": "An __arglist expression may only appear inside of a call or new expression."
      },
      {
        "Code": "CS0227",
        "Title": "Compiler Error CS0227",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0227",
        "Description": "Unsafe code may only appear if compiling with /unsafe"
      },
      {
        "Code": "CS0228",
        "Title": "Compiler Error CS0228",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0228",
        "Description": "'type' does not contain a definition for 'member', or it is not accessible"
      },
      {
        "Code": "CS0229",
        "Title": "Compiler Error CS0229",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0229",
        "Description": "Ambiguity between 'member1' and 'member2'"
      },
      {
        "Code": "CS0230",
        "Title": "Compiler Error CS0230",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0230",
        "Description": "Type and identifier are both required in a foreach statement"
      },
      {
        "Code": "CS0231",
        "Title": "Compiler Error CS0231",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0231",
        "Description": "A params parameter must be the last parameter in a formal parameter list."
      },
      {
        "Code": "CS0233",
        "Title": "Compiler Error CS0233",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0233",
        "Description": "'identifier' does not have a predefined size, therefore sizeof can only be used in an unsafe context"
      },
      {
        "Code": "CS0234",
        "Title": "Compiler Error CS0234",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0234",
        "Description": "The type or namespace name 'name' does not exist in the namespace 'namespace' (are you missing an assembly reference?)"
      },
      {
        "Code": "CS0236",
        "Title": "Compiler Error CS0236",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0236",
        "Description": "A field initializer cannot reference the non-static field, method, or property 'name'."
      },
      {
        "Code": "CS0238",
        "Title": "Compiler Error CS0238",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0238",
        "Description": "'member' cannot be sealed because it is not an override"
      },
      {
        "Code": "CS0239",
        "Title": "Compiler Error CS0239",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0239",
        "Description": "'member' : cannot override inherited member 'inherited member' because it is sealed"
      },
      {
        "Code": "CS0241",
        "Title": "Compiler Error CS0241",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0241",
        "Description": "Default parameter specifiers are not permitted"
      },
      {
        "Code": "CS0242",
        "Title": "Compiler Error CS0242",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0242",
        "Description": "The operation in question is undefined on void pointers"
      },
      {
        "Code": "CS0243",
        "Title": "Compiler error CS0243",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0243",
        "Description": "The Conditional attribute is not valid on 'method' because it is an override method"
      },
      {
        "Code": "CS0244",
        "Title": "Compiler Error CS0244",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0244",
        "Description": "Neither 'is' nor 'as' is valid on pointer types"
      },
      {
        "Code": "CS0245",
        "Title": "Compiler Error CS0245",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0245",
        "Description": "Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available."
      },
      {
        "Code": "CS0246",
        "Title": "Compiler Error CS0246",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0246",
        "Description": "The type or namespace name 'type/namespace' could not be found (are you missing a using directive or an assembly reference?)"
      },
      {
        "Code": "CS0247",
        "Title": "Compiler Error CS0247",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0247",
        "Description": "Cannot use a negative size with stackalloc"
      },
      {
        "Code": "CS0248",
        "Title": "Compiler Error CS0248",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0248",
        "Description": "Cannot create an array with a negative size"
      },
      {
        "Code": "CS0249",
        "Title": "Compiler Error CS0249",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0249",
        "Description": "Do not override object.Finalize. Instead, provide a destructor."
      },
      {
        "Code": "CS0250",
        "Title": "Compiler Error CS0250",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0250",
        "Description": "Do not directly call your base class Finalize method. It is called automatically from your destructor."
      },
      {
        "Code": "CS0254",
        "Title": "Compiler Error CS0254",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0254",
        "Description": "The right hand side of a fixed statement assignment may not be a cast expression"
      },
      {
        "Code": "CS0255",
        "Title": "Compiler Error CS0255",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0255",
        "Description": "stackalloc may not be used in a catch or finally block"
      },
      {
        "Code": "CS0260",
        "Title": "Compiler Error CS0260",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0260",
        "Description": "Missing partial modifier on declaration of type 'type'; another partial declaration of this type exists"
      },
      {
        "Code": "CS0261",
        "Title": "Compiler Error CS0261",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0261",
        "Description": "Partial declarations of 'type' must be all classes, all structs, or all interfaces"
      },
      {
        "Code": "CS0262",
        "Title": "Compiler Error CS0262",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0262",
        "Description": "Partial declarations of 'type' have conflicting accessibility modifiers"
      },
      {
        "Code": "CS0263",
        "Title": "Compiler Error CS0263",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0263",
        "Description": "Partial declarations of 'type' must not specify different base classes"
      },
      {
        "Code": "CS0264",
        "Title": "Compiler Error CS0264",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0264",
        "Description": "Partial declarations of 'type' must have the same type parameter names in the same order"
      },
      {
        "Code": "CS0265",
        "Title": "Compiler Error CS0265",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0265",
        "Description": "Partial declarations of 'type' have inconsistent constraints for type parameter 'type parameter'"
      },
      {
        "Code": "CS0266",
        "Title": "Compiler Error CS0266",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0266",
        "Description": "Cannot implicitly convert type 'type1' to 'type2'. An explicit conversion exists (are you missing a cast?)"
      },
      {
        "Code": "CS0267",
        "Title": "Compiler Error CS0267",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0267",
        "Description": "The partial modifier can only appear immediately before 'class', 'record', 'struct', 'interface', or a method return type."
      },
      {
        "Code": "CS0268",
        "Title": "Compiler Error CS0268",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0268",
        "Description": "Imported type 'type' is invalid. It contains a circular base class dependency."
      },
      {
        "Code": "CS0269",
        "Title": "Compiler Error CS0269",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0269",
        "Description": "Use of unassigned out parameter 'parameter'"
      },
      {
        "Code": "CS0270",
        "Title": "Compiler Error CS0270",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0270",
        "Description": "Array size cannot be specified in a variable declaration (try initializing with a 'new' expression)"
      },
      {
        "Code": "CS0271",
        "Title": "Compiler Error CS0271",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0271",
        "Description": "The property or indexer 'property/indexer' cannot be used in this context because the get accessor is inaccessible"
      },
      {
        "Code": "CS0272",
        "Title": "Compiler Error CS0272",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0272",
        "Description": "The property or indexer 'property/indexer' cannot be used in this context because the set accessor is inaccessible"
      },
      {
        "Code": "CS0273",
        "Title": "Compiler error CS0273",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0273",
        "Description": "The accessibility modifier of the 'property_accessor' accessor must be more restrictive than the property or indexer 'property'"
      },
      {
        "Code": "CS0274",
        "Title": "Compiler Error CS0274",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0274",
        "Description": "Cannot specify accessibility modifiers for both accessors of the property or indexer 'property/indexer'"
      },
      {
        "Code": "CS0275",
        "Title": "Compiler Error CS0275",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0275",
        "Description": "'accessor': accessibility modifiers may not be used on accessors in an interface"
      },
      {
        "Code": "CS0276",
        "Title": "Compiler Error CS0276",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0276",
        "Description": "'property/indexer': accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor"
      },
      {
        "Code": "CS0277",
        "Title": "Compiler Error CS0277",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0277",
        "Description": "'class' does not implement interface member 'accessor'. 'class accessor' is not public"
      },
      {
        "Code": "CS0281",
        "Title": "Compiler Error CS0281",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0281",
        "Description": "Friend access was granted to 'AssemblyName1', but the output assembly is named 'AssemblyName2'. Try adding a reference to 'AssemblyName1' or changing the output assembly name to match."
      },
      {
        "Code": "CS0283",
        "Title": "Compiler Error CS0283",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0283",
        "Description": "The type 'type' cannot be declared const"
      },
      {
        "Code": "CS0304",
        "Title": "Compiler Error CS0304",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0304",
        "Description": "Cannot create an instance of the variable type 'type' because it does not have the new() constraint"
      },
      {
        "Code": "CS0305",
        "Title": "Compiler Error CS0305",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0305",
        "Description": "Using the generic type 'generic type' requires 'number' type arguments"
      },
      {
        "Code": "CS0306",
        "Title": "Compiler Error CS0306",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0306",
        "Description": "The type 'type' may not be used as a type argument"
      },
      {
        "Code": "CS0307",
        "Title": "Compiler Error CS0307",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0307",
        "Description": "The 'construct' 'identifier' is not a generic method. If you intended an expression list, use parentheses around the &lt; expression."
      },
      {
        "Code": "CS0308",
        "Title": "Compiler Error CS0308",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0308",
        "Description": "The non-generic type-or-method 'identifier' cannot be used with type arguments."
      },
      {
        "Code": "CS0310",
        "Title": "Compiler Error CS0310",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0310",
        "Description": "The type 'typename' must be a non-abstract type with a public parameterless constructor in order to use it as parameter 'parameter' in the generic type or method 'generic'"
      },
      {
        "Code": "CS0311",
        "Title": "Compiler Error CS0311",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0311",
        "Description": "The type 'type1' cannot be used as type parameter 'T' in the generic type or method '&lt;name&gt;'. There is no implicit reference conversion from 'type1' to 'type2'."
      },
      {
        "Code": "CS0312",
        "Title": "Compiler Error CS0312",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0312",
        "Description": "The type 'type1' cannot be used as type parameter 'name' in the generic type or method 'name'. The nullable type 'type1' does not satisfy the constraint of 'type2'."
      },
      {
        "Code": "CS0313",
        "Title": "Compiler Error CS0313",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0313",
        "Description": "The type 'type1' cannot be used as type parameter 'parameter name' in the generic type or method 'type2'. The nullable type 'type1' does not satisfy the constraint of 'type2'. Nullable types cannot satisfy any interface constraints."
      },
      {
        "Code": "CS0314",
        "Title": "Compiler Error CS0314",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0314",
        "Description": "The type 'type1' cannot be used as type parameter 'name' in the generic type or method 'name'. There is no boxing conversion or type parameter conversion from 'type1' to 'type2'."
      },
      {
        "Code": "CS0315",
        "Title": "Compiler Error CS0315",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0315",
        "Description": "The type 'valueType' cannot be used as type parameter 'T' in the generic type or method 'TypeorMethod&lt;T&gt;'. There is no boxing conversion from 'valueType' to 'referenceType'."
      },
      {
        "Code": "CS0316",
        "Title": "Compiler Error CS0316",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0316",
        "Description": "The parameter name 'name' conflicts with an automatically-generated parameter name."
      },
      {
        "Code": "CS0400",
        "Title": "Compiler Error CS0400",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0400",
        "Description": "The type or namespace name 'identifier' could not be found in the global namespace (are you missing an assembly reference?)"
      },
      {
        "Code": "CS0401",
        "Title": "Compiler Error CS0401",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0401",
        "Description": "The new() constraint must be the last constraint specified"
      },
      {
        "Code": "CS0403",
        "Title": "Compiler Error CS0403",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0403",
        "Description": "Cannot convert null to type parameter 'name' because it could be a non-nullable value type. Consider using default('T') instead."
      },
      {
        "Code": "CS0404",
        "Title": "Compiler Error CS0404",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0404",
        "Description": "'&lt;' unexpected : attributes cannot be generic"
      },
      {
        "Code": "CS0405",
        "Title": "Compiler Error CS0405",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0405",
        "Description": "Duplicate constraint 'constraint' for type parameter 'type parameter'"
      },
      {
        "Code": "CS0406",
        "Title": "Compiler Error CS0406",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0406",
        "Description": "The class type constraint 'constraint' must come before any other constraints"
      },
      {
        "Code": "CS0407",
        "Title": "Compiler Error CS0407",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0407",
        "Description": "'return-type method' has the wrong return type"
      },
      {
        "Code": "CS0409",
        "Title": "Compiler Error CS0409",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0409",
        "Description": "A constraint clause has already been specified for type parameter 'type parameter'. All of the constraints for a type parameter must be specified in a single where clause."
      },
      {
        "Code": "CS0410",
        "Title": "Compiler Error CS0410",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0410",
        "Description": "No overload for 'method' has the correct parameter and return types"
      },
      {
        "Code": "CS0411",
        "Title": "Compiler Error CS0411",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0411",
        "Description": "The type arguments for method 'method' cannot be inferred from the usage. Try specifying the type arguments explicitly."
      },
      {
        "Code": "CS0412",
        "Title": "Compiler Error CS0412",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0412",
        "Description": "'generic': a parameter or local variable cannot have the same name as a method type parameter"
      },
      {
        "Code": "CS0413",
        "Title": "Compiler Error CS0413",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0413",
        "Description": "The type parameter 'type parameter' cannot be used with the 'as' operator because it does not have a class type constraint nor a 'class' constraint"
      },
      {
        "Code": "CS0415",
        "Title": "Compiler Error CS0415",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0415",
        "Description": "The 'IndexerName' attribute is valid only on an indexer that is not an explicit interface member declaration"
      },
      {
        "Code": "CS0416",
        "Title": "Compiler Error CS0416",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0416",
        "Description": "'type parameter': an attribute argument cannot use type parameters"
      },
      {
        "Code": "CS0417",
        "Title": "Compiler Error CS0417",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0417",
        "Description": "'identifier': cannot provide arguments when creating an instance of a variable type"
      },
      {
        "Code": "CS0418",
        "Title": "Compiler Error CS0418",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0418",
        "Description": "'class name': an abstract class cannot be sealed or static"
      },
      {
        "Code": "CS0423",
        "Title": "Compiler Error CS0423",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0423",
        "Description": "Since 'class' has the ComImport attribute, 'method' must be extern or abstract"
      },
      {
        "Code": "CS0424",
        "Title": "Compiler Error CS0424",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0424",
        "Description": "'class': a class with the ComImport attribute cannot specify a base class"
      },
      {
        "Code": "CS0425",
        "Title": "Compiler Error CS0425",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0425",
        "Description": "The constraints for type parameter 'type parameter' of method 'method' must match the constraints for type parameter 'type parameter' of interface method 'method'. Consider using an explicit interface implementation instead."
      },
      {
        "Code": "CS0426",
        "Title": "Compiler Error CS0426",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0426",
        "Description": "The type name 'identifier' does not exist in the type 'type'"
      },
      {
        "Code": "CS0428",
        "Title": "Compiler Error CS0428",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0428",
        "Description": "Cannot convert method group 'Identifier' to non-delegate type 'type'.  Did you  intend to invoke the method?"
      },
      {
        "Code": "CS0430",
        "Title": "Compiler Error CS0430",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0430",
        "Description": "The extern alias 'alias' was not specified in a /reference option"
      },
      {
        "Code": "CS0431",
        "Title": "Compiler Error CS0431",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0431",
        "Description": "Cannot use alias 'identifier' with '::' since the alias references a type. Use '.' instead."
      },
      {
        "Code": "CS0432",
        "Title": "Compiler Error CS0432",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0432",
        "Description": "Alias 'identifier' not found"
      },
      {
        "Code": "CS0433",
        "Title": "Compiler Error CS0433",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0433",
        "Description": "The type TypeName1 exists in both TypeName2 and TypeName3"
      },
      {
        "Code": "CS0434",
        "Title": "Compiler Error CS0434",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0434",
        "Description": "The namespace NamespaceName1 in NamespaceName2 conflicts with the type TypeName1 in NamespaceName3"
      },
      {
        "Code": "CS0438",
        "Title": "Compiler Error CS0438",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0438",
        "Description": "The type 'type' in 'module_1' conflicts with the namespace 'namespace' in 'module_2'."
      },
      {
        "Code": "CS0439",
        "Title": "Compiler Error CS0439",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0439",
        "Description": "An extern alias declaration must precede all other elements defined in the namespace"
      },
      {
        "Code": "CS0441",
        "Title": "Compiler Error CS0441",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0441",
        "Description": "'class': a class cannot be both static and sealed"
      },
      {
        "Code": "CS0442",
        "Title": "Compiler Error CS0442",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0442",
        "Description": "'Property': abstract properties cannot have private accessors"
      },
      {
        "Code": "CS0443",
        "Title": "Compiler Error CS0443",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0443",
        "Description": "Syntax error, value expected"
      },
      {
        "Code": "CS0445",
        "Title": "Compiler Error CS0445",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0445",
        "Description": "Cannot modify the result of an unboxing conversion"
      },
      {
        "Code": "CS0446",
        "Title": "Compiler Error CS0446",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0446",
        "Description": "Foreach cannot operate on a 'Method or Delegate'. Did you intend to invoke the 'Method or Delegate'?"
      },
      {
        "Code": "CS0447",
        "Title": "Compiler Error CS0447",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0447",
        "Description": "Attributes cannot be used on type arguments, only on type parameters"
      },
      {
        "Code": "CS0448",
        "Title": "Compiler Error CS0448",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0448",
        "Description": "The return type for ++ or -- operator must be the containing type or derived from the containing type"
      },
      {
        "Code": "CS0449",
        "Title": "Compiler Error CS0449",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0449",
        "Description": "The 'class' or 'struct' constraint must come before any other constraints"
      },
      {
        "Code": "CS0450",
        "Title": "Compiler Error CS0450",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0450",
        "Description": "'Type Parameter Name': cannot specify both a constraint class and the 'class' or 'struct' constraint"
      },
      {
        "Code": "CS0451",
        "Title": "Compiler Error CS0451",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0451",
        "Description": "The 'new()' constraint cannot be used with the 'struct' constraint"
      },
      {
        "Code": "CS0452",
        "Title": "Compiler Error CS0452",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0452",
        "Description": "The type 'type name' must be a reference type in order to use it as parameter 'parameter name' in the generic type or method 'identifier of generic'"
      },
      {
        "Code": "CS0453",
        "Title": "Compiler Error CS0453",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0453",
        "Description": "The type 'Type Name' must be a non-nullable value type in order to use it as parameter 'Parameter Name' in the generic type or method 'Generic Identifier'"
      },
      {
        "Code": "CS0454",
        "Title": "Compiler Error CS0454",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0454",
        "Description": "Circular constraint dependency involving 'Type Parameter 1' and 'Type Parameter 2'"
      },
      {
        "Code": "CS0455",
        "Title": "Compiler Error CS0455",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0455",
        "Description": "Type parameter 'Type Parameter Name' inherits conflicting constraints 'Constraint Name 1' and 'Constraint Name 2'"
      },
      {
        "Code": "CS0456",
        "Title": "Compiler Error CS0456",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0456",
        "Description": "Type parameter 'Type Parameter Name 1' has the 'struct' constraint so 'Type Parameter Name 1' cannot be used as a constraint for 'Type Parameter Name 2'"
      },
      {
        "Code": "CS0457",
        "Title": "Compiler Error CS0457",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0457",
        "Description": "Ambiguous user defined conversions 'Conversion method name 1' and 'Conversion method name 2' when converting from 'type name 1' to 'type name 2'"
      },
      {
        "Code": "CS0459",
        "Title": "Compiler Error CS0459",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0459",
        "Description": "Cannot take the address of a read-only local variable"
      },
      {
        "Code": "CS0460",
        "Title": "Compiler Error CS0460",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0460",
        "Description": "Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly"
      },
      {
        "Code": "CS0462",
        "Title": "Compiler Error CS0462",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0462",
        "Description": "The inherited members 'member1' and 'member2' have the same signature in type 'type', so they cannot be overridden"
      },
      {
        "Code": "CS0463",
        "Title": "Compiler Error CS0463",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0463",
        "Description": "Evaluation of the decimal constant expression failed with error: 'error'"
      },
      {
        "Code": "CS0466",
        "Title": "Compiler Error CS0466",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0466",
        "Description": "'method1' should not have a params parameter since 'method2' does not"
      },
      {
        "Code": "CS0468",
        "Title": "Compiler Error CS0468",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0468",
        "Description": "Ambiguity between type 'type1' and type 'type2'"
      },
      {
        "Code": "CS0470",
        "Title": "Compiler Error CS0470",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0470",
        "Description": "Method 'method' cannot implement interface accessor 'accessor' for type 'type'. Use an explicit interface implementation."
      },
      {
        "Code": "CS0471",
        "Title": "Compiler Error CS0471",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0471",
        "Description": "The method 'name' is not a generic method. If you intended an expression list, use parentheses around the &lt; expression."
      },
      {
        "Code": "CS0473",
        "Title": "Compiler Error CS0473",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0473",
        "Description": "Explicit interface implementation 'method name' matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead."
      },
      {
        "Code": "CS0500",
        "Title": "Compiler Error CS0500",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0500",
        "Description": "'class member' cannot declare a body because it is marked abstract"
      },
      {
        "Code": "CS0501",
        "Title": "Compiler Error CS0501",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0501",
        "Description": "'member function' must declare a body because it is not marked abstract, extern, or partial"
      },
      {
        "Code": "CS0502",
        "Title": "Compiler Error CS0502",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0502",
        "Description": "'member' cannot be both abstract and sealed"
      },
      {
        "Code": "CS0503",
        "Title": "Compiler Error CS0503",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0503",
        "Description": "The abstract method 'method' cannot be marked virtual"
      },
      {
        "Code": "CS0504",
        "Title": "Compiler Error CS0504",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0504",
        "Description": "The constant 'variable' cannot be marked static"
      },
      {
        "Code": "CS0505",
        "Title": "Compiler Error CS0505",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0505",
        "Description": "'member1': cannot override because 'member2' is not a function"
      },
      {
        "Code": "CS0506",
        "Title": "Compiler Error CS0506",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0506",
        "Description": "'function1' : cannot override inherited member 'function2' because it is not marked &quot;virtual&quot;, &quot;abstract&quot;, or &quot;override&quot;"
      },
      {
        "Code": "CS0507",
        "Title": "Compiler Error CS0507",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0507",
        "Description": "'function1' : cannot change access modifiers when overriding 'access' inherited member 'function2'"
      },
      {
        "Code": "CS0508",
        "Title": "Compiler Error CS0508",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0508",
        "Description": "'Type 1': return type must be 'Type 2' to match overridden member 'Member Name'"
      },
      {
        "Code": "CS0509",
        "Title": "Compiler Error CS0509",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0509",
        "Description": "'class1' : cannot derive from sealed type 'class2'"
      },
      {
        "Code": "CS0513",
        "Title": "Compiler Error CS0513",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0513",
        "Description": "'function' is abstract but it is contained in nonabstract class 'class'"
      },
      {
        "Code": "CS0514",
        "Title": "Compiler Error CS0514",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0514",
        "Description": "'constructor' : static constructor cannot have an explicit 'this' or 'base' constructor call"
      },
      {
        "Code": "CS0515",
        "Title": "Compiler Error CS0515",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0515",
        "Description": "'function' : access modifiers are not allowed on static constructors"
      },
      {
        "Code": "CS0516",
        "Title": "Compiler Error CS0516",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0516",
        "Description": "Constructor 'constructor' can not call itself"
      },
      {
        "Code": "CS0517",
        "Title": "Compiler Error CS0517",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0517",
        "Description": "'class' has no base class and cannot call a base constructor"
      },
      {
        "Code": "CS0518",
        "Title": "Compiler Error CS0518",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0518",
        "Description": "Predefined type 'type' is not defined or imported"
      },
      {
        "Code": "CS0520",
        "Title": "Compiler Error CS0520",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0520",
        "Description": "Predefined type 'name' is declared incorrectly"
      },
      {
        "Code": "CS0522",
        "Title": "Compiler Error CS0522",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0522",
        "Description": "'constructor' : structs cannot call base class constructors"
      },
      {
        "Code": "CS0523",
        "Title": "Compiler Error CS0523",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0523",
        "Description": "Struct member 'struct2 field' of type 'struct1' causes a cycle in the struct layout"
      },
      {
        "Code": "CS0524",
        "Title": "Compiler Error CS0524",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0524",
        "Description": "'type' : interfaces cannot declare types"
      },
      {
        "Code": "CS0525",
        "Title": "Compiler Error CS0525",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0525",
        "Description": "Interfaces cannot contain fields"
      },
      {
        "Code": "CS0526",
        "Title": "Compiler Error CS0526",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0526",
        "Description": "Interfaces cannot contain constructors"
      },
      {
        "Code": "CS0527",
        "Title": "Compiler Error CS0527",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0527",
        "Description": "Type 'type' in interface list is not an interface"
      },
      {
        "Code": "CS0528",
        "Title": "Compiler Error CS0528",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0528",
        "Description": "'interface' is already listed in interface list"
      },
      {
        "Code": "CS0529",
        "Title": "Compiler Error CS0529",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0529",
        "Description": "Inherited interface 'interface1' causes a cycle in the interface hierarchy of 'interface2'"
      },
      {
        "Code": "CS0531",
        "Title": "Compiler Error CS0531",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0531",
        "Description": "'member' : interface members cannot have a definition"
      },
      {
        "Code": "CS0533",
        "Title": "Compiler Error CS0533",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0533",
        "Description": "'derived-class member' hides inherited abstract member 'base-class member'"
      },
      {
        "Code": "CS0534",
        "Title": "Compiler Error CS0534",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0534",
        "Description": "'function1' does not implement inherited abstract member 'function2'"
      },
      {
        "Code": "CS0535",
        "Title": "Compiler Error CS0535",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0535",
        "Description": "'class' does not implement interface member 'member'"
      },
      {
        "Code": "CS0537",
        "Title": "Compiler Error CS0537",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0537",
        "Description": "The class System.Object cannot have a base class or implement an interface"
      },
      {
        "Code": "CS0538",
        "Title": "Compiler Error CS0538",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0538",
        "Description": "'name' in explicit interface declaration is not an interface"
      },
      {
        "Code": "CS0539",
        "Title": "Compiler Error CS0539",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0539",
        "Description": "'member' in explicit interface declaration is not a member of interface"
      },
      {
        "Code": "CS0540",
        "Title": "Compiler Error CS0540",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0540",
        "Description": "'interface member' : containing type does not implement interface 'interface'"
      },
      {
        "Code": "CS0541",
        "Title": "Compiler Error CS0541",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0541",
        "Description": "'declaration' : explicit interface declaration can only be declared in a class or struct"
      },
      {
        "Code": "CS0542",
        "Title": "Compiler Error CS0542",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0542",
        "Description": "'user-defined type' : member names cannot be the same as their enclosing type"
      },
      {
        "Code": "CS0543",
        "Title": "Compiler Error CS0543",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0543",
        "Description": "'enumeration' : the enumerator value is too large to fit in its type"
      },
      {
        "Code": "CS0544",
        "Title": "Compiler Error CS0544",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0544",
        "Description": "'property override': cannot override because 'non-property' is not a property"
      },
      {
        "Code": "CS0545",
        "Title": "Compiler Error CS0545",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0545",
        "Description": "'function' : cannot override because 'property' does not have an overridable get accessor"
      },
      {
        "Code": "CS0546",
        "Title": "Compiler Error CS0546",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0546",
        "Description": "'accessor' : cannot override because 'property' does not have an overridable set accessor"
      },
      {
        "Code": "CS0547",
        "Title": "Compiler Error CS0547",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0547",
        "Description": "'property' : property or indexer cannot have void type"
      },
      {
        "Code": "CS0548",
        "Title": "Compiler Error CS0548",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0548",
        "Description": "'property' : property or indexer must have at least one accessor"
      },
      {
        "Code": "CS0549",
        "Title": "Compiler Error CS0549",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0549",
        "Description": "'function' is a new virtual member in sealed class 'class'"
      },
      {
        "Code": "CS0550",
        "Title": "Compiler Error CS0550",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0550",
        "Description": "'accessor' adds an accessor not found in interface member 'property'"
      },
      {
        "Code": "CS0551",
        "Title": "Compiler Error CS0551",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0551",
        "Description": "Explicit interface implementation 'implementation' is missing accessor 'accessor'"
      },
      {
        "Code": "CS0552",
        "Title": "Compiler Error CS0552",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0552",
        "Description": "'conversion routine' : user defined conversion to/from interface"
      },
      {
        "Code": "CS0553",
        "Title": "Compiler Error CS0553",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0553",
        "Description": "'conversion routine' : user defined conversion to/from base class"
      },
      {
        "Code": "CS0554",
        "Title": "Compiler Error CS0554",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0554",
        "Description": "'conversion routine' : user defined conversion to/from derived class"
      },
      {
        "Code": "CS0555",
        "Title": "Compiler Error CS0555",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0555",
        "Description": "User-defined operator cannot take an object of the enclosing type and convert to an object of the enclosing type"
      },
      {
        "Code": "CS0556",
        "Title": "Compiler Error CS0556",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0556",
        "Description": "User-defined conversion must convert to or from the enclosing type"
      },
      {
        "Code": "CS0557",
        "Title": "Compiler Error CS0557",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0557",
        "Description": "Duplicate user-defined conversion in type 'class'"
      },
      {
        "Code": "CS0558",
        "Title": "Compiler Error CS0558",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0558",
        "Description": "User-defined operator 'operator' must be declared static and public"
      },
      {
        "Code": "CS0559",
        "Title": "Compiler Error CS0559",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0559",
        "Description": "The parameter type for ++ or -- operator must be the containing type"
      },
      {
        "Code": "CS0562",
        "Title": "Compiler Error CS0562",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0562",
        "Description": "The parameter of a unary operator must be the containing type"
      },
      {
        "Code": "CS0563",
        "Title": "Compiler Error CS0563",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0563",
        "Description": "One of the parameters of a binary operator must be the containing type"
      },
      {
        "Code": "CS0564",
        "Title": "Compiler Error CS0564",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0564",
        "Description": "The first operand of an overloaded shift operator must have the same type as the containing type, and the type of the second operand must be int"
      },
      {
        "Code": "CS0567",
        "Title": "Compiler Error CS0567",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0567",
        "Description": "Interfaces cannot contain operators"
      },
      {
        "Code": "CS0568",
        "Title": "Compiler Error CS0568",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0568",
        "Description": "Structs cannot contain explicit parameterless constructors"
      },
      {
        "Code": "CS0569",
        "Title": "Compiler Error CS0569",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0569",
        "Description": "'method2' : cannot override 'method1' because it is not supported by the language"
      },
      {
        "Code": "CS0570",
        "Title": "Compiler Error CS0570",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0570",
        "Description": "Property, indexer, or event 'name' is not supported by the language; try directly calling accessor method 'name!'"
      },
      {
        "Code": "CS0571",
        "Title": "Compiler Error CS0571",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0571",
        "Description": "'function' : cannot explicitly call operator or accessor"
      },
      {
        "Code": "CS0572",
        "Title": "Compiler Error CS0572",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0572",
        "Description": "'type' : cannot reference a type through an expression; try 'path_to_type' instead"
      },
      {
        "Code": "CS0573",
        "Title": "Compiler Error CS0573",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0573",
        "Description": "'field declaration' : cannot have instance field initializers in structs"
      },
      {
        "Code": "CS0574",
        "Title": "Compiler Error CS0574",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0574",
        "Description": "Name of destructor must match name of class"
      },
      {
        "Code": "CS0575",
        "Title": "Compiler Error CS0575",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0575",
        "Description": "Only class types can contain destructors"
      },
      {
        "Code": "CS0576",
        "Title": "Compiler Error CS0576",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0576",
        "Description": "Namespace 'namespace' contains a definition conflicting with alias 'identifier'"
      },
      {
        "Code": "CS0577",
        "Title": "Compiler Error CS0577",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0577",
        "Description": "The Conditional attribute is not valid on 'function' because it is a constructor, destructor, operator, or explicit interface implementation"
      },
      {
        "Code": "CS0578",
        "Title": "Compiler Error CS0578",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0578",
        "Description": "The Conditional attribute is not valid on 'function' because its return type is not void"
      },
      {
        "Code": "CS0579",
        "Title": "Compiler Error CS0579",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0579",
        "Description": "Duplicate 'attribute' attribute"
      },
      {
        "Code": "CS0582",
        "Title": "Compiler Error CS0582",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0582",
        "Description": "The Conditional not valid on interface members"
      },
      {
        "Code": "CS0583",
        "Title": "Compiler Error CS0583",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0583",
        "Description": "Internal Compiler Error. An internal error has occurred in the compiler. To work around this problem, try simplifying or changing the program near the locations listed below. Locations at the top of the list are closer to the point at which the internal error occurred."
      },
      {
        "Code": "CS0584",
        "Title": "Compiler Error CS0584",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0584",
        "Description": "Internal Compiler Error: stage 'stage' symbol 'symbol'"
      },
      {
        "Code": "CS0585",
        "Title": "Compiler Error CS0585",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0585",
        "Description": "Internal Compiler Error: stage 'stage'"
      },
      {
        "Code": "CS0586",
        "Title": "Compiler Error CS0586",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0586",
        "Description": "Internal Compiler Error: stage 'stage'"
      },
      {
        "Code": "CS0587",
        "Title": "Compiler Error CS0587",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0587",
        "Description": "Internal Compiler Error: stage 'stage'"
      },
      {
        "Code": "CS0588",
        "Title": "Compiler Error CS0588",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0588",
        "Description": "Internal Compiler Error: stage 'LEX'"
      },
      {
        "Code": "CS0589",
        "Title": "Compiler Error CS0589",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0589",
        "Description": "Internal Compiler Error: stage 'PARSE'"
      },
      {
        "Code": "CS0590",
        "Title": "Compiler Error CS0590",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0590",
        "Description": "User-defined operators cannot return void"
      },
      {
        "Code": "CS0591",
        "Title": "Compiler Error CS0591",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0591",
        "Description": "Invalid value for argument to 'attribute' attribute"
      },
      {
        "Code": "CS0592",
        "Title": "Compiler Error CS0592",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0592",
        "Description": "Attribute 'attribute' is not valid on this declaration type. It is valid on 'type' declarations only."
      },
      {
        "Code": "CS0594",
        "Title": "Compiler Error CS0594",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0594",
        "Description": "Floating-point constant is outside the range of type 'type'"
      },
      {
        "Code": "CS0596",
        "Title": "Compiler Error CS0596",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0596",
        "Description": "The Guid attribute must be specified with the ComImport attribute"
      },
      {
        "Code": "CS0599",
        "Title": "Compiler Error CS0599",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0599",
        "Description": "Invalid value for named attribute argument 'argument'"
      },
      {
        "Code": "CS0601",
        "Title": "Compiler Error CS0601",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0601",
        "Description": "The DllImport attribute must be specified on a method marked 'static' and 'extern'"
      },
      {
        "Code": "CS0609",
        "Title": "Compiler Error CS0609",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0609",
        "Description": "Cannot set the IndexerName attribute on an indexer marked override"
      },
      {
        "Code": "CS0610",
        "Title": "Compiler Error CS0610",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0610",
        "Description": "Field or property cannot be of type 'type'"
      },
      {
        "Code": "CS0611",
        "Title": "Compiler Error CS0611",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0611",
        "Description": "Array elements cannot be of type 'type'"
      },
      {
        "Code": "CS0616",
        "Title": "Compiler Error CS0616",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0616",
        "Description": "'class' is not an attribute class"
      },
      {
        "Code": "CS0617",
        "Title": "Compiler Error CS0617",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0617",
        "Description": "'reference' is not a valid named attribute argument because it is not a valid attribute parameter type"
      },
      {
        "Code": "CS0619",
        "Title": "Compiler Error CS0619",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0619",
        "Description": "'member' is obsolete: 'text'"
      },
      {
        "Code": "CS0620",
        "Title": "Compiler Error CS0620",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0620",
        "Description": "Indexers cannot have void type"
      },
      {
        "Code": "CS0621",
        "Title": "Compiler Error CS0621",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0621",
        "Description": "'member' : virtual or abstract members cannot be private"
      },
      {
        "Code": "CS0622",
        "Title": "Compiler Error CS0622",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0622",
        "Description": "Can only use array initializer expressions to assign to array types. Try using a new expression instead."
      },
      {
        "Code": "CS0623",
        "Title": "Compiler Error CS0623",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0623",
        "Description": "Array initializers can only be used in a variable or field initializer. Try using a new expression instead."
      },
      {
        "Code": "CS0625",
        "Title": "Compiler Error CS0625",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0625",
        "Description": "'field': instance field types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute."
      },
      {
        "Code": "CS0629",
        "Title": "Compiler error CS0629",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0629",
        "Description": "Conditional member 'member' cannot implement interface member 'base class member' in type 'Type Name'"
      },
      {
        "Code": "CS0631",
        "Title": "Compiler Error CS0631",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0631",
        "Description": "ref and out are not valid in this context"
      },
      {
        "Code": "CS0633",
        "Title": "Compiler Error CS0633",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0633",
        "Description": "The argument to the 'attribute' attribute must be a valid identifier"
      },
      {
        "Code": "CS0635",
        "Title": "Compiler Error CS0635",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0635",
        "Description": "'attribute' : System.Interop.UnmanagedType.CustomMarshaller requires named arguments ComType and Marshal"
      },
      {
        "Code": "CS0636",
        "Title": "Compiler Error CS0636",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0636",
        "Description": "The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit)"
      },
      {
        "Code": "CS0637",
        "Title": "Compiler Error CS0637",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0637",
        "Description": "The FieldOffset attribute is not allowed on static or const fields."
      },
      {
        "Code": "CS0641",
        "Title": "Compiler Error CS0641",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0641",
        "Description": "'attribute' : attribute is only valid on classes derived from System.Attribute"
      },
      {
        "Code": "CS0643",
        "Title": "Compiler Error CS0643",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0643",
        "Description": "'arg' duplicate named attribute argument"
      },
      {
        "Code": "CS0644",
        "Title": "Compiler Error CS0644",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0644",
        "Description": "'class1' cannot derive from special class 'class2'"
      },
      {
        "Code": "CS0645",
        "Title": "Compiler Error CS0645",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0645",
        "Description": "Identifier too long"
      },
      {
        "Code": "CS0646",
        "Title": "Compiler Error CS0646",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0646",
        "Description": "Cannot specify the DefaultMember attribute on a type containing an indexer"
      },
      {
        "Code": "CS0647",
        "Title": "Compiler Error CS0647",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0647",
        "Description": "Error emitting 'attribute' attribute -- 'reason'"
      },
      {
        "Code": "CS0648",
        "Title": "Compiler Error CS0648",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0648",
        "Description": "'type' is a type not supported by the language"
      },
      {
        "Code": "CS0650",
        "Title": "Compiler Error CS0650",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0650",
        "Description": "Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type."
      },
      {
        "Code": "CS0653",
        "Title": "Compiler Error CS0653",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0653",
        "Description": "Cannot apply attribute class 'class' because it is abstract"
      },
      {
        "Code": "CS0655",
        "Title": "Compiler Error CS0655",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0655",
        "Description": "'parameter' is not a valid named attribute argument because it is not a valid attribute parameter type"
      },
      {
        "Code": "CS0656",
        "Title": "Compiler Error CS0656",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0656",
        "Description": "Missing compiler required member 'object.member'"
      },
      {
        "Code": "CS0662",
        "Title": "Compiler Error CS0662",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0662",
        "Description": "'method' cannot specify only Out attribute on a ref parameter. Use both In and Out attributes, or neither."
      },
      {
        "Code": "CS0663",
        "Title": "Compiler Error CS0663",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0663",
        "Description": "Cannot define overloaded methods that differ only on ref and out."
      },
      {
        "Code": "CS0664",
        "Title": "Compiler Error CS0664",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0664",
        "Description": "Literal of type double cannot be implicitly converted to type 'type'; use an 'suffix' suffix to create a literal of this type"
      },
      {
        "Code": "CS0666",
        "Title": "Compiler Error CS0666",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0666",
        "Description": "'member' : new protected member declared in struct"
      },
      {
        "Code": "CS0667",
        "Title": "Compiler Error CS0667",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0667",
        "Description": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead'."
      },
      {
        "Code": "CS0668",
        "Title": "Compiler Error CS0668",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0668",
        "Description": "Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type"
      },
      {
        "Code": "CS0669",
        "Title": "Compiler Error CS0669",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0669",
        "Description": "A class with the ComImport attribute cannot have a user-defined constructor."
      },
      {
        "Code": "CS0670",
        "Title": "Compiler Error CS0670",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0670",
        "Description": "Field cannot have void type"
      },
      {
        "Code": "CS0673",
        "Title": "Compiler Error CS0673",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0673",
        "Description": "System.Void cannot be used from C# -- use typeof(void) to get the void type object."
      },
      {
        "Code": "CS0674",
        "Title": "Compiler Error CS0674",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0674",
        "Description": "Do not use 'System.ParamArrayAttribute'. Use the 'params' keyword instead."
      },
      {
        "Code": "CS0677",
        "Title": "Compiler Error CS0677",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0677",
        "Description": "'variable': a volatile field cannot be of the type 'type'"
      },
      {
        "Code": "CS0678",
        "Title": "Compiler Error CS0678",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0678",
        "Description": "'variable': a field can not be both volatile and readonly"
      },
      {
        "Code": "CS0681",
        "Title": "Compiler Error CS0681",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0681",
        "Description": "The modifier 'abstract' is not valid on fields. Try using a property instead"
      },
      {
        "Code": "CS0682",
        "Title": "Compiler Error CS0682",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0682",
        "Description": "'type1' cannot implement 'type2' because it is not supported by the language"
      },
      {
        "Code": "CS0683",
        "Title": "Compiler Error CS0683",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0683",
        "Description": "'explicitmethod' explicit method implementation cannot implement 'method' because it is an accessor"
      },
      {
        "Code": "CS0685",
        "Title": "Compiler Error CS0685",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0685",
        "Description": "Conditional member 'member' cannot have an out parameter"
      },
      {
        "Code": "CS0686",
        "Title": "Compiler Error CS0686",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0686",
        "Description": "Accessor 'accessor' cannot implement interface member 'member' for type 'type'. Use an explicit interface implementation."
      },
      {
        "Code": "CS0687",
        "Title": "Compiler Error CS0687",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0687",
        "Description": "The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead."
      },
      {
        "Code": "CS0689",
        "Title": "Compiler Error CS0689",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0689",
        "Description": "Cannot derive from 'identifier' because it is a type parameter"
      },
      {
        "Code": "CS0690",
        "Title": "Compiler Error CS0690",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0690",
        "Description": "Input file 'file' contains invalid metadata."
      },
      {
        "Code": "CS0692",
        "Title": "Compiler Error CS0692",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0692",
        "Description": "Duplicate type parameter 'identifier'"
      },
      {
        "Code": "CS0694",
        "Title": "Compiler Error CS0694",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0694",
        "Description": "Type parameter 'identifier' has the same name as the containing type, or method"
      },
      {
        "Code": "CS0695",
        "Title": "Compiler Error CS0695",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0695",
        "Description": "'generic type' cannot implement both 'generic interface' and 'generic interface' because they may unify for some type parameter substitutions"
      },
      {
        "Code": "CS0698",
        "Title": "Compiler Error CS0698",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0698",
        "Description": "A generic type cannot derive from 'class' because it is an attribute class"
      },
      {
        "Code": "CS0699",
        "Title": "Compiler Error CS0699",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0699",
        "Description": "'generic' does not define type parameter 'identifier'"
      },
      {
        "Code": "CS0701",
        "Title": "Compiler Error CS0701",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0701",
        "Description": "'identifier' is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter."
      },
      {
        "Code": "CS0702",
        "Title": "Compiler error CS0702",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0702",
        "Description": "Constraint cannot be special class 'identifier'"
      },
      {
        "Code": "CS0703",
        "Title": "Compiler Error CS0703",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0703",
        "Description": "Inconsistent accessibility: constraint type 'identifier' is less accessible than 'identifier'"
      },
      {
        "Code": "CS0704",
        "Title": "Compiler Error CS0704",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0704",
        "Description": "Cannot do member lookup in 'type' because it is a type parameter"
      },
      {
        "Code": "CS0706",
        "Title": "Compiler Error CS0706",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0706",
        "Description": "Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter."
      },
      {
        "Code": "CS0708",
        "Title": "Compiler Error CS0708",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0708",
        "Description": "'field': cannot declare instance members in a static class"
      },
      {
        "Code": "CS0709",
        "Title": "Compiler Error CS0709",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0709",
        "Description": "'derived class': cannot derive from static class 'base class'"
      },
      {
        "Code": "CS0710",
        "Title": "Compiler Error CS0710",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0710",
        "Description": "Static classes cannot have instance constructors"
      },
      {
        "Code": "CS0711",
        "Title": "Compiler Error CS0711",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0711",
        "Description": "Static classes cannot contain destructors"
      },
      {
        "Code": "CS0712",
        "Title": "Compiler Error CS0712",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0712",
        "Description": "Cannot create an instance of the static class 'static class'"
      },
      {
        "Code": "CS0713",
        "Title": "Compiler Error CS0713",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0713",
        "Description": "Static class 'static type' cannot derive from type 'type'. Static classes must derive from object."
      },
      {
        "Code": "CS0714",
        "Title": "Compiler Error CS0714",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0714",
        "Description": "'static type' : static classes cannot implement interfaces"
      },
      {
        "Code": "CS0715",
        "Title": "Compiler Error CS0715",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0715",
        "Description": "'static class' : static classes cannot contain user defined operators"
      },
      {
        "Code": "CS0716",
        "Title": "Compiler Error CS0716",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0716",
        "Description": "Cannot convert to static type 'type'"
      },
      {
        "Code": "CS0717",
        "Title": "Compiler Error CS0717",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0717",
        "Description": "'static class': static classes cannot be used as constraints"
      },
      {
        "Code": "CS0718",
        "Title": "Compiler Error CS0718",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0718",
        "Description": "'type': static types cannot be used as type arguments"
      },
      {
        "Code": "CS0719",
        "Title": "Compiler Error CS0719",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0719",
        "Description": "'type': array elements cannot be of static type"
      },
      {
        "Code": "CS0720",
        "Title": "Compiler Error CS0720",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0720",
        "Description": "'static class': cannot declare indexers in a static class"
      },
      {
        "Code": "CS0721",
        "Title": "Compiler Error CS0721",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0721",
        "Description": "'type': static types cannot be used as parameters"
      },
      {
        "Code": "CS0722",
        "Title": "Compiler Error CS0722",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0722",
        "Description": "'type': static types cannot be used as return types"
      },
      {
        "Code": "CS0723",
        "Title": "Compiler Error CS0723",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0723",
        "Description": "Cannot declare variable of static type 'type'"
      },
      {
        "Code": "CS0724",
        "Title": "Compiler Error CS0724",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0724",
        "Description": "A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause"
      },
      {
        "Code": "CS0726",
        "Title": "Compiler Error CS0726",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0726",
        "Description": "'format specifier' is not a valid format specifier"
      },
      {
        "Code": "CS0727",
        "Title": "Compiler Error CS0727",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0727",
        "Description": "Invalid format specifier"
      },
      {
        "Code": "CS0729",
        "Title": "Compiler Error CS0729",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0729",
        "Description": "Type 'type' is defined in this assembly, but a type forwarder is specified for it"
      },
      {
        "Code": "CS0730",
        "Title": "Compiler Error CS0730",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0730",
        "Description": "Cannot forward type 'type' because it is a nested type of 'type'"
      },
      {
        "Code": "CS0731",
        "Title": "Compiler Error CS0731",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0731",
        "Description": "The type forwarder for type 'type' in assembly 'assembly' causes a cycle"
      },
      {
        "Code": "CS0733",
        "Title": "Compiler Error CS0733",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0733",
        "Description": "Cannot forward generic type, 'GenericType&lt;&gt;'"
      },
      {
        "Code": "CS0734",
        "Title": "Compiler Error CS0734",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0734",
        "Description": "The /moduleassemblyname option may only be specified when building a target type of 'module'"
      },
      {
        "Code": "CS0735",
        "Title": "Compiler Error CS0735",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0735",
        "Description": "Invalid type specified as an argument for TypeForwardedTo attribute"
      },
      {
        "Code": "CS0736",
        "Title": "Compiler Error CS0736",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0736",
        "Description": "'type name' does not implement interface member 'member name'. 'method name' cannot implement an interface member because it is static."
      },
      {
        "Code": "CS0737",
        "Title": "Compiler Error CS0737",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0737",
        "Description": "'type name' does not implement interface member 'member name'. 'method name' cannot implement an interface member because it is not public."
      },
      {
        "Code": "CS0738",
        "Title": "Compiler Error CS0738",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0738",
        "Description": "'type name' does not implement interface member 'member name'. 'method name' cannot implement 'interface member' because it does not have the matching return type of ' type name'."
      },
      {
        "Code": "CS0739",
        "Title": "Compiler Error CS0739",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0739",
        "Description": "'type name' duplicate TypeForwardedToAttribute."
      },
      {
        "Code": "CS0742",
        "Title": "Compiler Error CS0742",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0742",
        "Description": "A query body must end with a select clause or a group clause"
      },
      {
        "Code": "CS0743",
        "Title": "Compiler Error CS0743",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0743",
        "Description": "Expected contextual keyword 'on'"
      },
      {
        "Code": "CS0744",
        "Title": "Compiler Error CS0744",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0744",
        "Description": "Expected contextual keyword 'equals'"
      },
      {
        "Code": "CS0745",
        "Title": "Compiler Error CS0745",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0745",
        "Description": "Expected contextual keyword 'by'"
      },
      {
        "Code": "CS0746",
        "Title": "Compiler Error CS0746",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0746",
        "Description": "Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access."
      },
      {
        "Code": "CS0747",
        "Title": "Compiler Error CS0747",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0747",
        "Description": "Invalid initializer member declarator."
      },
      {
        "Code": "CS0748",
        "Title": "Compiler Error CS0748",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0748",
        "Description": "Inconsistent lambda parameter usage; parameter types must be all explicit or all implicit."
      },
      {
        "Code": "CS0750",
        "Title": "Compiler Error CS0750",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0750",
        "Description": "A partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers."
      },
      {
        "Code": "CS0751",
        "Title": "Compiler Error CS0751",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0751",
        "Description": "A partial method must be declared in a partial class or partial struct"
      },
      {
        "Code": "CS0752",
        "Title": "Compiler Error CS0752",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0752",
        "Description": "A partial method cannot have out parameters"
      },
      {
        "Code": "CS0753",
        "Title": "Compiler Error CS0753",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0753",
        "Description": "Only methods, classes, structs, or interfaces may be partial."
      },
      {
        "Code": "CS0754",
        "Title": "Compiler Error CS0754",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0754",
        "Description": "A partial method may not explicitly implement an interface method."
      },
      {
        "Code": "CS0755",
        "Title": "Compiler Error CS0755",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0755",
        "Description": "Both partial method declarations must be extension methods or neither may be an extension method."
      },
      {
        "Code": "CS0756",
        "Title": "Compiler Error CS0756",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0756",
        "Description": "A partial method may not have multiple defining declarations."
      },
      {
        "Code": "CS0757",
        "Title": "Compiler Error CS0757",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0757",
        "Description": "A partial method may not have multiple implementing declarations."
      },
      {
        "Code": "CS0758",
        "Title": "Compiler Error CS0758",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0758",
        "Description": "Both partial method declarations must use a params parameter or neither may use a params parameter"
      },
      {
        "Code": "CS0759",
        "Title": "Compiler Error CS0759",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0759",
        "Description": "No defining declaration found for implementing declaration of partial method 'method'."
      },
      {
        "Code": "CS0761",
        "Title": "Compiler Error CS0761",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0761",
        "Description": "Partial method declarations of 'method&lt;T&gt;' have inconsistent type parameter constraints."
      },
      {
        "Code": "CS0762",
        "Title": "Compiler Error CS0762",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0762",
        "Description": "Cannot create delegate from method 'method' because it is a partial method without an implementing declaration"
      },
      {
        "Code": "CS0763",
        "Title": "Compiler Error CS0763",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0763",
        "Description": "Both partial method declarations must be static or neither may be static."
      },
      {
        "Code": "CS0764",
        "Title": "Compiler Error CS0764",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0764",
        "Description": "Both partial method declarations must be unsafe or neither may be unsafe"
      },
      {
        "Code": "CS0765",
        "Title": "Compiler Error CS0765",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0765",
        "Description": "Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees"
      },
      {
        "Code": "CS0766",
        "Title": "Compiler Error CS0766",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0766",
        "Description": "Partial methods must have a void return type."
      },
      {
        "Code": "CS0811",
        "Title": "Compiler Error CS0811",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0811",
        "Description": "The fully qualified name for 'name' is too long for debug information. Compile without '/debug' option."
      },
      {
        "Code": "CS0815",
        "Title": "Compiler Error CS0815",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0815",
        "Description": "Cannot assign 'expression' to an implicitly typed local"
      },
      {
        "Code": "CS0818",
        "Title": "Compiler Error CS0818",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0818",
        "Description": "Implicitly typed locals must be initialized"
      },
      {
        "Code": "CS0819",
        "Title": "Compiler Error CS0819",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0819",
        "Description": "Implicitly-typed variables cannot have multiple declarators."
      },
      {
        "Code": "CS0820",
        "Title": "Compiler Error CS0820",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0820",
        "Description": "Cannot assign array initializer to an implicitly typed local"
      },
      {
        "Code": "CS0821",
        "Title": "Compiler Error CS0821",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0821",
        "Description": "Implicitly typed locals cannot be fixed"
      },
      {
        "Code": "CS0822",
        "Title": "Compiler Error CS0822",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0822",
        "Description": "Implicitly typed locals cannot be const"
      },
      {
        "Code": "CS0825",
        "Title": "Compiler Error CS0825",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0825",
        "Description": "The contextual keyword 'var' may only appear within a local variable declaration."
      },
      {
        "Code": "CS0826",
        "Title": "Compiler Error CS0826",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0826",
        "Description": "No best type found for implicitly typed array."
      },
      {
        "Code": "CS0828",
        "Title": "Compiler Error CS0828",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0828",
        "Description": "Cannot assign 'expression' to anonymous type property."
      },
      {
        "Code": "CS0831",
        "Title": "Compiler Error CS0831",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0831",
        "Description": "An expression tree may not contain a base access."
      },
      {
        "Code": "CS0832",
        "Title": "Compiler Error CS0832",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0832",
        "Description": "An expression tree may not contain an assignment operator."
      },
      {
        "Code": "CS0833",
        "Title": "Compiler Error CS0833",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0833",
        "Description": "An anonymous type cannot have multiple properties with the same name."
      },
      {
        "Code": "CS0834",
        "Title": "Compiler Error CS0834",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0834",
        "Description": "A lambda expression must have an expression body to be converted to an expression tree."
      },
      {
        "Code": "CS0835",
        "Title": "Compiler Error CS0835",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0835",
        "Description": "Cannot convert lambda to an expression tree whose type argument 'type' is not a delegate type."
      },
      {
        "Code": "CS0836",
        "Title": "Compiler Error CS0836",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0836",
        "Description": "Cannot use anonymous type in a constant expression."
      },
      {
        "Code": "CS0837",
        "Title": "Compiler Error CS0837",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0837",
        "Description": "The first operand of an 'is' or 'as' operator may not be a lambda expression, anonymous method, or method group."
      },
      {
        "Code": "CS0838",
        "Title": "Compiler Error CS0838",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0838",
        "Description": "An expression tree may not contain a multidimensional array initializer."
      },
      {
        "Code": "CS0839",
        "Title": "Compiler Error CS0839",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0839",
        "Description": "Argument missing."
      },
      {
        "Code": "CS0840",
        "Title": "Compiler Error CS0840",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0840",
        "Description": "'Property name' must declare a body because it is not marked abstract or extern. Automatically implemented properties must define both get and set accessors."
      },
      {
        "Code": "CS0841",
        "Title": "Compiler Error CS0841",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0841",
        "Description": "Cannot use local variable 'name' before it is declared."
      },
      {
        "Code": "CS0842",
        "Title": "Compiler Error CS0842",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0842",
        "Description": "Automatically implemented properties cannot be used inside a type marked with StructLayout(LayoutKind.Explicit)."
      },
      {
        "Code": "CS0843",
        "Title": "Compiler Error CS0843",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0843",
        "Description": "Backing field for automatically implemented property 'name' must be fully assigned before control is returned to the caller. Consider calling the parameterless constructor from a constructor initializer."
      },
      {
        "Code": "CS0844",
        "Title": "Compiler Error CS0844",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0844",
        "Description": "Cannot use local variable 'name' before it is declared. The declaration of the local variable hides the field 'name'."
      },
      {
        "Code": "CS0845",
        "Title": "Compiler Error CS0845",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0845",
        "Description": "An expression tree lambda may not contain a coalescing operator with a null literal left-hand side."
      },
      {
        "Code": "CS1001",
        "Title": "Compiler Error CS1001",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1001",
        "Description": "Identifier expected"
      },
      {
        "Code": "CS1002",
        "Title": "Compiler Error CS1002",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1002",
        "Description": "; expected"
      },
      {
        "Code": "CS1003",
        "Title": "Compiler Error CS1003",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1003",
        "Description": "Syntax error, 'char' expected"
      },
      {
        "Code": "CS1004",
        "Title": "Compiler Error CS1004",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1004",
        "Description": "Duplicate 'modifier' modifier"
      },
      {
        "Code": "CS1007",
        "Title": "Compiler Error CS1007",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1007",
        "Description": "Property accessor already defined"
      },
      {
        "Code": "CS1008",
        "Title": "Compiler Error CS1008",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1008",
        "Description": "Type byte, sbyte, short, ushort, int, uint, long, or ulong expected"
      },
      {
        "Code": "CS1009",
        "Title": "Compiler Error CS1009",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1009",
        "Description": "Unrecognized escape sequence"
      },
      {
        "Code": "CS1010",
        "Title": "Compiler Error CS1010",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1010",
        "Description": "Newline in constant"
      },
      {
        "Code": "CS1011",
        "Title": "Compiler Error CS1011",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1011",
        "Description": "Empty character literal"
      },
      {
        "Code": "CS1012",
        "Title": "Compiler Error CS1012",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1012",
        "Description": "Too many characters in character literal"
      },
      {
        "Code": "CS1013",
        "Title": "Compiler Error CS1013",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1013",
        "Description": "Invalid number"
      },
      {
        "Code": "CS1014",
        "Title": "Compiler Error CS1014",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1014",
        "Description": "A get or set accessor expected"
      },
      {
        "Code": "CS1015",
        "Title": "Compiler Error CS1015",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1015",
        "Description": "An object, string, or class type expected"
      },
      {
        "Code": "CS1016",
        "Title": "Compiler Error CS1016",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1016",
        "Description": "Named attribute argument expected"
      },
      {
        "Code": "CS1017",
        "Title": "Compiler Error CS1017",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1017",
        "Description": "Catch clauses cannot follow the general catch clause of a try statement"
      },
      {
        "Code": "CS1018",
        "Title": "Compiler Error CS1018",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1018",
        "Description": "Keyword 'this' or 'base' expected"
      },
      {
        "Code": "CS1019",
        "Title": "Compiler Error CS1019",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1019",
        "Description": "Overloadable unary operator expected"
      },
      {
        "Code": "CS1020",
        "Title": "Compiler Error CS1020",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1020",
        "Description": "Overloadable binary operator expected"
      },
      {
        "Code": "CS1021",
        "Title": "Compiler Error CS1021",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1021",
        "Description": "Integral constant is too large"
      },
      {
        "Code": "CS1022",
        "Title": "Compiler Error CS1022",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1022",
        "Description": "Type or namespace definition, or end-of-file expected"
      },
      {
        "Code": "CS1023",
        "Title": "Compiler Error CS1023",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1023",
        "Description": "Embedded statement cannot be a declaration or labeled statement"
      },
      {
        "Code": "CS1024",
        "Title": "Compiler Error CS1024",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1024",
        "Description": "Preprocessor directive expected"
      },
      {
        "Code": "CS1025",
        "Title": "Compiler Error CS1025",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1025",
        "Description": "Single-line comment or end-of-line expected"
      },
      {
        "Code": "CS1026",
        "Title": "Compiler Error CS1026",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1026",
        "Description": ") expected"
      },
      {
        "Code": "CS1027",
        "Title": "Compiler Error CS1027",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1027",
        "Description": "#endif directive expected"
      },
      {
        "Code": "CS1028",
        "Title": "Compiler Error CS1028",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1028",
        "Description": "Unexpected preprocessor directive"
      },
      {
        "Code": "CS1029",
        "Title": "Compiler Error CS1029",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1029",
        "Description": "#error: 'text'"
      },
      {
        "Code": "CS1031",
        "Title": "Compiler Error CS1031",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1031",
        "Description": "Type expected"
      },
      {
        "Code": "CS1032",
        "Title": "Compiler Error CS1032",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1032",
        "Description": "Cannot define/undefine preprocessor symbols after first token in file"
      },
      {
        "Code": "CS1033",
        "Title": "Compiler Error CS1033",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1033",
        "Description": "Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect"
      },
      {
        "Code": "CS1034",
        "Title": "Compiler Error CS1034",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1034",
        "Description": "Compiler limit exceeded: Line cannot exceed 'number' characters"
      },
      {
        "Code": "CS1035",
        "Title": "Compiler Error CS1035",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1035",
        "Description": "End-of-file found, '*/' expected"
      },
      {
        "Code": "CS1036",
        "Title": "Compiler Error CS1036",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1036",
        "Description": "( or . expected"
      },
      {
        "Code": "CS1037",
        "Title": "Compiler Error CS1037",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1037",
        "Description": "Overloadable operator expected"
      },
      {
        "Code": "CS1038",
        "Title": "Compiler Error CS1038",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1038",
        "Description": "#endregion directive expected"
      },
      {
        "Code": "CS1039",
        "Title": "Compiler Error CS1039",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1039",
        "Description": "Unterminated string literal"
      },
      {
        "Code": "CS1040",
        "Title": "Compiler Error CS1040",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1040",
        "Description": "Preprocessor directives must appear as the first non-white-space character on a line"
      },
      {
        "Code": "CS1041",
        "Title": "Compiler Error CS1041",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1041",
        "Description": "Identifier expected, 'keyword' is a keyword"
      },
      {
        "Code": "CS1043",
        "Title": "Compiler Error CS1043",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1043",
        "Description": "{ or ; expected"
      },
      {
        "Code": "CS1044",
        "Title": "Compiler Error CS1044",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1044",
        "Description": "Cannot use more than one type in a for, using, fixed, or declaration statement"
      },
      {
        "Code": "CS1055",
        "Title": "Compiler Error CS1055",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1055",
        "Description": "An add or remove accessor expected"
      },
      {
        "Code": "CS1056",
        "Title": "Compiler Error CS1056",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1056",
        "Description": "Unexpected character 'character'"
      },
      {
        "Code": "CS1057",
        "Title": "Compiler Error CS1057",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1057",
        "Description": "'member': static classes cannot contain protected members"
      },
      {
        "Code": "CS1059",
        "Title": "Compiler Error CS1059",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1059",
        "Description": "The operand of an increment or decrement operator must be a variable, property or indexer."
      },
      {
        "Code": "CS1061",
        "Title": "Compiler Error CS1061",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1061",
        "Description": "'type' does not contain a definition for 'name' and no accessible extension method 'name' accepting a first argument of type 'type' could be found (are you missing a using directive or an assembly reference?)."
      },
      {
        "Code": "CS1100",
        "Title": "Compiler Error CS1100",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1100",
        "Description": "Method 'name' has a parameter modifier 'this' which is not on the first parameter."
      },
      {
        "Code": "CS1101",
        "Title": "Compiler Error CS1101",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1101",
        "Description": "The parameter modifier 'ref' cannot be used with 'this'."
      },
      {
        "Code": "CS1102",
        "Title": "Compiler Error CS1102",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1102",
        "Description": "The parameter modifier 'out' cannot be used with 'this'."
      },
      {
        "Code": "CS1103",
        "Title": "Compiler Error CS1103",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1103",
        "Description": "The first parameter of an extension method cannot be of type 'type'."
      },
      {
        "Code": "CS1104",
        "Title": "Compiler Error CS1104",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1104",
        "Description": "A parameter array cannot be used with 'this' modifier on an extension method."
      },
      {
        "Code": "CS1105",
        "Title": "Compiler Error CS1105",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1105",
        "Description": "Extension methods must be static."
      },
      {
        "Code": "CS1106",
        "Title": "Compiler Error CS1106",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1106",
        "Description": "Extension methods must be defined in a non generic static class."
      },
      {
        "Code": "CS1107",
        "Title": "Compiler Error CS1107",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1107",
        "Description": "A parameter can only have one 'modifier name' modifier."
      },
      {
        "Code": "CS1108",
        "Title": "Compiler Error CS1108",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1108",
        "Description": "A parameter cannot have all the specified modifiers; there are too many modifiers on the parameter."
      },
      {
        "Code": "CS1109",
        "Title": "Compiler Error CS1109",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1109",
        "Description": "Extension Methods must be defined on top level static classes, 'name' is a nested class."
      },
      {
        "Code": "CS1110",
        "Title": "Compiler Error CS1110",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1110",
        "Description": "Cannot use 'this' modifier on first parameter of method declaration without a reference to System.Core.dll. Add a reference to System.Core.dll or remove 'this' modifier from the method declaration."
      },
      {
        "Code": "CS1112",
        "Title": "Compiler Error CS1112",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1112",
        "Description": "Do not use 'System.Runtime.CompilerServices.ExtensionAttribute'. Use the 'this' keyword instead."
      },
      {
        "Code": "CS1113",
        "Title": "Compiler Error CS1113",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1113",
        "Description": "Extension methods 'name' defined on value type 'name' cannot be used to create delegates."
      },
      {
        "Code": "CS1501",
        "Title": "Compiler Error CS1501",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1501",
        "Description": "No overload for method 'method' takes 'number' arguments"
      },
      {
        "Code": "CS1502",
        "Title": "Compiler Error CS1502",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1502",
        "Description": "The best overloaded method match for 'name' has some invalid arguments"
      },
      {
        "Code": "CS1503",
        "Title": "Compiler Error CS1503",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1503",
        "Description": "Argument 'number' cannot convert from TypeA to TypeB"
      },
      {
        "Code": "CS1504",
        "Title": "Compiler Error CS1504",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1504",
        "Description": "Source file 'file' could not be opened ('reason')"
      },
      {
        "Code": "CS1507",
        "Title": "Compiler Error CS1507",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1507",
        "Description": "Cannot link resource file 'file' when building a module"
      },
      {
        "Code": "CS1508",
        "Title": "Compiler Error CS1508",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1508",
        "Description": "Resource identifier 'identifier' has already been used in this assembly"
      },
      {
        "Code": "CS1509",
        "Title": "Compiler Error CS1509",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1509",
        "Description": "Referenced file 'file' is not an assembly; use AddModules option instead"
      },
      {
        "Code": "CS1510",
        "Title": "Compiler Error CS1510",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1510",
        "Description": "A ref or out argument must be an assignable variable"
      },
      {
        "Code": "CS1511",
        "Title": "Compiler Error CS1511",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1511",
        "Description": "Keyword 'base' is not available in a static method"
      },
      {
        "Code": "CS1512",
        "Title": "Compiler Error CS1512",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1512",
        "Description": "Keyword 'base' is not available in the current context"
      },
      {
        "Code": "CS1513",
        "Title": "Compiler Error CS1513",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1513",
        "Description": "} expected"
      },
      {
        "Code": "CS1514",
        "Title": "Compiler Error CS1514",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1514",
        "Description": "{ expected"
      },
      {
        "Code": "CS1515",
        "Title": "Compiler Error CS1515",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1515",
        "Description": "'in' expected"
      },
      {
        "Code": "CS1517",
        "Title": "Compiler Error CS1517",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1517",
        "Description": "Invalid preprocessor expression"
      },
      {
        "Code": "CS1518",
        "Title": "Compiler Error CS1518",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1518",
        "Description": "Expected class, delegate, enum, interface, or struct"
      },
      {
        "Code": "CS1519",
        "Title": "Compiler Error CS1519",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1519",
        "Description": "Invalid token 'token' in class, struct, or interface member declaration"
      },
      {
        "Code": "CS1520",
        "Title": "Compiler Error CS1520",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1520",
        "Description": "Method must have a return type"
      },
      {
        "Code": "CS1521",
        "Title": "Compiler Error CS1521",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1521",
        "Description": "Invalid base type"
      },
      {
        "Code": "CS1524",
        "Title": "Compiler Error CS1524",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1524",
        "Description": "Expected catch or finally"
      },
      {
        "Code": "CS1525",
        "Title": "Compiler Error CS1525",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1525",
        "Description": "Invalid expression term 'character'"
      },
      {
        "Code": "CS1526",
        "Title": "Compiler Error CS1526",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1526",
        "Description": "A new expression requires (), [], or {} after type"
      },
      {
        "Code": "CS1527",
        "Title": "Compiler Error CS1527",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1527",
        "Description": "Elements defined in a namespace cannot be explicitly declared as private, protected, protected internal or private protected."
      },
      {
        "Code": "CS1528",
        "Title": "Compiler Error CS1528",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1528",
        "Description": "Expected ; or = (cannot specify constructor arguments in declaration)"
      },
      {
        "Code": "CS1529",
        "Title": "Compiler Error CS1529",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1529",
        "Description": "A using clause must precede all other elements defined in the namespace except extern alias declarations"
      },
      {
        "Code": "CS1530",
        "Title": "Compiler Error CS1530",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1530",
        "Description": "Keyword 'new' is not allowed on elements defined in a namespace"
      },
      {
        "Code": "CS1534",
        "Title": "Compiler Error CS1534",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1534",
        "Description": "Overloaded binary operator 'operator' takes two parameters"
      },
      {
        "Code": "CS1535",
        "Title": "Compiler Error CS1535",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1535",
        "Description": "Overloaded unary operator 'operator' takes one parameter"
      },
      {
        "Code": "CS1536",
        "Title": "Compiler Error CS1536",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1536",
        "Description": "Invalid parameter type void"
      },
      {
        "Code": "CS1537",
        "Title": "Compiler Error CS1537",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1537",
        "Description": "The using alias 'alias' appeared previously in this namespace"
      },
      {
        "Code": "CS1540",
        "Title": "Compiler Error CS1540",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1540",
        "Description": "Cannot access protected member 'member' via a qualifier of type 'type1'; the qualifier must be of type 'type2' (or derived from it)"
      },
      {
        "Code": "CS1541",
        "Title": "Compiler Error CS1541",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1541",
        "Description": "Invalid reference option: 'symbol' — cannot reference directories"
      },
      {
        "Code": "CS1542",
        "Title": "Compiler Error CS1542",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1542",
        "Description": "'dll' cannot be added to this assembly because it already is an assembly; use '/R' option instead"
      },
      {
        "Code": "CS1545",
        "Title": "Compiler Error CS1545",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1545",
        "Description": "Property, indexer, or event 'property' is not supported by the language; try directly calling accessor methods 'set accessor' or 'get accessor'"
      },
      {
        "Code": "CS1546",
        "Title": "Compiler Error CS1546",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1546",
        "Description": "Property, indexer, or event 'property' is not supported by the language; try directly calling accessor method 'accessor'"
      },
      {
        "Code": "CS1547",
        "Title": "Compiler Error CS1547",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1547",
        "Description": "Keyword 'void' cannot be used in this context"
      },
      {
        "Code": "CS1548",
        "Title": "Compiler Error CS1548",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1548",
        "Description": "Cryptographic failure while signing assembly 'assembly' — 'reason'"
      },
      {
        "Code": "CS1551",
        "Title": "Compiler Error CS1551",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1551",
        "Description": "Indexers must have at least one parameter"
      },
      {
        "Code": "CS1552",
        "Title": "Compiler Error CS1552",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1552",
        "Description": "Array type specifier, [], must appear before parameter name"
      },
      {
        "Code": "CS1553",
        "Title": "Compiler Error CS1553",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1553",
        "Description": "Declaration is not valid; use 'modifier operator &lt;dest-type&gt; (...' instead"
      },
      {
        "Code": "CS1554",
        "Title": "Compiler Error CS1554",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1554",
        "Description": "Declaration is not valid; use '&lt;type&gt; operator op (...' instead"
      },
      {
        "Code": "CS1555",
        "Title": "Compiler Error CS1555",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1555",
        "Description": "Could not find 'class' specified for Main method"
      },
      {
        "Code": "CS1556",
        "Title": "Compiler Error CS1556",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1556",
        "Description": "'construct' specified for Main method must be a valid class or struct"
      },
      {
        "Code": "CS1557",
        "Title": "Compiler Error CS1557",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1557",
        "Description": "Cannot use 'class' for Main method because it is in a different output file"
      },
      {
        "Code": "CS1558",
        "Title": "Compiler Error CS1558",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1558",
        "Description": "'class' does not have a suitable static Main method"
      },
      {
        "Code": "CS1559",
        "Title": "Compiler Error CS1559",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1559",
        "Description": "Cannot use 'object' for Main method because it is imported"
      },
      {
        "Code": "CS1560",
        "Title": "Compiler Error CS1560",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1560",
        "Description": "Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename"
      },
      {
        "Code": "CS1561",
        "Title": "Compiler Error CS1561",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1561",
        "Description": "Output filename is too long or invalid"
      },
      {
        "Code": "CS1562",
        "Title": "Compiler Error CS1562",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1562",
        "Description": "Outputs without source must have the /out option specified"
      },
      {
        "Code": "CS1563",
        "Title": "Compiler Error CS1563",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1563",
        "Description": "Output 'output file' does not have any source files"
      },
      {
        "Code": "CS1564",
        "Title": "Compiler Error CS1564",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1564",
        "Description": "Conflicting options specified: Win32 resource file; Win32 manifest."
      },
      {
        "Code": "CS1565",
        "Title": "Compiler Error CS1565",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1565",
        "Description": "Conflicting options specified: Win32 resource file; Win32 icon"
      },
      {
        "Code": "CS1566",
        "Title": "Compiler Error CS1566",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1566",
        "Description": "Error reading resource file 'file' — 'reason'"
      },
      {
        "Code": "CS1567",
        "Title": "Compiler Error CS1567",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1567",
        "Description": "Error generating Win32 resource: 'file'"
      },
      {
        "Code": "CS1569",
        "Title": "Compiler Error CS1569",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1569",
        "Description": "Error generating XML documentation file 'Filename' ('reason')"
      },
      {
        "Code": "CS1575",
        "Title": "Compiler Error CS1575",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1575",
        "Description": "A stackalloc expression requires [] after type"
      },
      {
        "Code": "CS1576",
        "Title": "Compiler Error CS1576",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1576",
        "Description": "The line number specified for #line directive is missing or invalid"
      },
      {
        "Code": "CS1577",
        "Title": "Compiler Error CS1577",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1577",
        "Description": "Assembly generation failed —reason"
      },
      {
        "Code": "CS1578",
        "Title": "Compiler Error CS1578",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1578",
        "Description": "Filename, single-line comment or end-of-line expected"
      },
      {
        "Code": "CS1579",
        "Title": "Compiler Error CS1579",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1579",
        "Description": "foreach statement cannot operate on variables of type 'type1' because 'type2' does not contain a public definition for 'identifier'"
      },
      {
        "Code": "CS1583",
        "Title": "Compiler Error CS1583",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1583",
        "Description": "'file' is not a valid Win32 resource file"
      },
      {
        "Code": "CS1585",
        "Title": "Compiler Error CS1585",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1585",
        "Description": "Member modifier 'keyword' must precede the member type and name"
      },
      {
        "Code": "CS1586",
        "Title": "Compiler Error CS1586",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1586",
        "Description": "Array creation must have array size or array initializer"
      },
      {
        "Code": "CS1588",
        "Title": "Compiler Error CS1588",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1588",
        "Description": "Cannot determine common language runtime directory -- 'reason'"
      },
      {
        "Code": "CS1593",
        "Title": "Compiler Error CS1593",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1593",
        "Description": "Delegate 'del' does not take 'number' arguments"
      },
      {
        "Code": "CS1594",
        "Title": "Compiler Error CS1594",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1594",
        "Description": "Delegate 'delegate' has some invalid arguments"
      },
      {
        "Code": "CS1597",
        "Title": "Compiler Error CS1597",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1597",
        "Description": "Semicolon after method or accessor block is not valid"
      },
      {
        "Code": "CS1599",
        "Title": "Compiler Error CS1599",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1599",
        "Description": "Method or delegate cannot return type 'type'"
      },
      {
        "Code": "CS1600",
        "Title": "Compiler Error CS1600",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1600",
        "Description": "Compilation cancelled by user"
      },
      {
        "Code": "CS1601",
        "Title": "Compiler Error CS1601",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1601",
        "Description": "Method or delegate parameter cannot be of type 'type'"
      },
      {
        "Code": "CS1604",
        "Title": "Compiler Error CS1604",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1604",
        "Description": "Cannot assign to 'variable' because it is read-only"
      },
      {
        "Code": "CS1605",
        "Title": "Compiler Error CS1605",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1605",
        "Description": "Cannot pass 'var' as a ref or out argument because it is read-only"
      },
      {
        "Code": "CS1606",
        "Title": "Compiler Error CS1606",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1606",
        "Description": "Assembly signing failed; output may not be signed -- reason"
      },
      {
        "Code": "CS1608",
        "Title": "Compiler Error CS1608",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1608",
        "Description": "The Required attribute is not permitted on C# types"
      },
      {
        "Code": "CS1609",
        "Title": "Compiler Error CS1609",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1609",
        "Description": "Modifiers cannot be placed on event accessor declarations"
      },
      {
        "Code": "CS1611",
        "Title": "Compiler Error CS1611",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1611",
        "Description": "The params parameter cannot be declared as in ref or out"
      },
      {
        "Code": "CS1612",
        "Title": "Compiler Error CS1612",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1612",
        "Description": "Cannot modify the return value of 'expression' because it is not a variable"
      },
      {
        "Code": "CS1613",
        "Title": "Compiler Error CS1613",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1613",
        "Description": "The managed coclass wrapper class 'class' for interface 'interface' cannot be found (are you missing an assembly reference?)"
      },
      {
        "Code": "CS1614",
        "Title": "Compiler Error CS1614",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1614",
        "Description": "'name' is ambiguous between 'name' and 'nameAttribute'; use either '@name' or 'nameAttribute'."
      },
      {
        "Code": "CS1615",
        "Title": "Compiler Error CS1615",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1615",
        "Description": "Argument 'number' should not be passed with the 'keyword' keyword"
      },
      {
        "Code": "CS1617",
        "Title": "Compiler Error CS1617",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1617",
        "Description": "Invalid option 'option' for LangVersion. Use &lt;LangVersion&gt;?&lt;/LangVersion&gt; to list supported values."
      },
      {
        "Code": "CS1618",
        "Title": "Compiler Error CS1618",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1618",
        "Description": "Cannot create delegate with 'method' because it has a Conditional attribute"
      },
      {
        "Code": "CS1619",
        "Title": "Compiler Error CS1619",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1619",
        "Description": "Cannot create temporary file 'filename' -- reason"
      },
      {
        "Code": "CS1620",
        "Title": "Compiler Error CS1620",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1620",
        "Description": "Argument 'number' must be passed with the 'keyword' keyword"
      },
      {
        "Code": "CS1621",
        "Title": "Compiler Error CS1621",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1621",
        "Description": "The yield statement cannot be used inside an anonymous method or lambda expression"
      },
      {
        "Code": "CS1622",
        "Title": "Compiler Error CS1622",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1622",
        "Description": "Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration."
      },
      {
        "Code": "CS1623",
        "Title": "Compiler Error CS1623",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1623",
        "Description": "Iterators cannot have in ref or out parameters"
      },
      {
        "Code": "CS1624",
        "Title": "Compiler Error CS1624",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1624",
        "Description": "The body of 'accessor' cannot be an iterator block because 'type' is not an iterator interface type"
      },
      {
        "Code": "CS1625",
        "Title": "Compiler Error CS1625",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1625",
        "Description": "Cannot yield in the body of a finally clause"
      },
      {
        "Code": "CS1626",
        "Title": "Compiler Error CS1626",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1626",
        "Description": "Cannot yield a value in the body of a try block with a catch clause"
      },
      {
        "Code": "CS1627",
        "Title": "Compiler Error CS1627",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1627",
        "Description": "Expression expected after yield return"
      },
      {
        "Code": "CS1628",
        "Title": "Compiler Error CS1628",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1628",
        "Description": "Cannot use in ref or out parameter 'parameter' inside an anonymous method, lambda expression, or query expression"
      },
      {
        "Code": "CS1629",
        "Title": "Compiler Error CS1629",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1629",
        "Description": "Unsafe code may not appear in iterators"
      },
      {
        "Code": "CS1630",
        "Title": "Compiler Error CS1630",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1630",
        "Description": "Invalid option 'option' for ErrorReport; must be prompt, send, queue, or none"
      },
      {
        "Code": "CS1631",
        "Title": "Compiler Error CS1631",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1631",
        "Description": "Cannot yield a value in the body of a catch clause"
      },
      {
        "Code": "CS1632",
        "Title": "Compiler Error CS1632",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1632",
        "Description": "Control cannot leave the body of an anonymous method or lambda expression"
      },
      {
        "Code": "CS1637",
        "Title": "Compiler Error CS1637",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1637",
        "Description": "Iterators cannot have unsafe parameters or yield types"
      },
      {
        "Code": "CS1638",
        "Title": "Compiler Error CS1638",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1638",
        "Description": "'identifier' is a reserved identifier and cannot be used when ISO language version mode is used"
      },
      {
        "Code": "CS1639",
        "Title": "Compiler Error CS1639",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1639",
        "Description": "The managed coclass wrapper class signature 'signature' for interface 'interface' is not a valid class name signature"
      },
      {
        "Code": "CS1640",
        "Title": "Compiler Error CS1640",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1640",
        "Description": "foreach statement cannot operate on variables of type 'type' because it implements multiple instantiations of 'interface', try casting to a specific interface instantiation"
      },
      {
        "Code": "CS1641",
        "Title": "Compiler Error CS1641",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1641",
        "Description": "A fixed size buffer field must have the array size specifier after the field name"
      },
      {
        "Code": "CS1642",
        "Title": "Compiler Error CS1642",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1642",
        "Description": "Fixed size buffer fields may only be members of structs."
      },
      {
        "Code": "CS1643",
        "Title": "Compiler Error CS1643",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1643",
        "Description": "Not all code paths return a value in method of type 'type!'"
      },
      {
        "Code": "CS1644",
        "Title": "Compiler Error CS1644",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1644",
        "Description": "Feature 'feature' is not part of the standardized ISO C# language specification, and may not be accepted by other compilers"
      },
      {
        "Code": "CS1646",
        "Title": "Compiler Error CS1646",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1646",
        "Description": "Keyword, identifier, or string expected after verbatim specifier: @"
      },
      {
        "Code": "CS1647",
        "Title": "Compiler Error CS1647",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1647",
        "Description": "An expression is too long or complex to compile near 'code'"
      },
      {
        "Code": "CS1648",
        "Title": "Compiler Error CS1648",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1648",
        "Description": "Members of readonly field 'identifier' cannot be modified (except in a constructor or a variable initializer)"
      },
      {
        "Code": "CS1649",
        "Title": "Compiler Error CS1649",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1649",
        "Description": "Members of readonly field 'identifier' cannot be passed ref or out (except in a constructor)"
      },
      {
        "Code": "CS1650",
        "Title": "Compiler Error CS1650",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1650",
        "Description": "Fields of static readonly field 'identifier' cannot be assigned to (except in a static constructor or a variable initializer)"
      },
      {
        "Code": "CS1651",
        "Title": "Compiler Error CS1651",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1651",
        "Description": "Fields of static readonly field 'identifier' cannot be passed ref or out (except in a static constructor)"
      },
      {
        "Code": "CS1654",
        "Title": "Compiler Error CS1654",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1654",
        "Description": "Cannot modify members of 'variable' because it is a 'read-only variable type'"
      },
      {
        "Code": "CS1655",
        "Title": "Compiler Error CS1655",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1655",
        "Description": "Cannot pass fields of 'variable' as a ref or out argument because it is a 'readonly variable type'"
      },
      {
        "Code": "CS1656",
        "Title": "Compiler Error CS1656",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1656",
        "Description": "Cannot assign to 'variable' because it is a 'read-only variable type'"
      },
      {
        "Code": "CS1657",
        "Title": "Compiler Error CS1657",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1657",
        "Description": "Cannot pass 'parameter' as a ref or out argument because 'reason''"
      },
      {
        "Code": "CS1660",
        "Title": "Compiler Error CS1660",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1660",
        "Description": "Cannot convert anonymous method block to type 'type' because it is not a delegate type"
      },
      {
        "Code": "CS1661",
        "Title": "Compiler Error CS1661",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1661",
        "Description": "Cannot convert anonymous method block to delegate type 'delegate type' because the specified block's parameter types do not match the delegate parameter types"
      },
      {
        "Code": "CS1662",
        "Title": "Compiler Error CS1662",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1662",
        "Description": "Cannot convert anonymous method block to delegate type 'delegate type' because some of the return types in the block are not implicitly convertible to the delegate return type"
      },
      {
        "Code": "CS1663",
        "Title": "Compiler Error CS1663",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1663",
        "Description": "Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double"
      },
      {
        "Code": "CS1664",
        "Title": "Compiler Error CS1664",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1664",
        "Description": "Fixed size buffer of length 'length' and type 'type' is too big"
      },
      {
        "Code": "CS1665",
        "Title": "Compiler Error CS1665",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1665",
        "Description": "Fixed size buffers must have a length greater than zero"
      },
      {
        "Code": "CS1666",
        "Title": "Compiler Error CS1666",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1666",
        "Description": "You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement."
      },
      {
        "Code": "CS1667",
        "Title": "Compiler Error CS1667",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1667",
        "Description": "Attribute 'attribute' is not valid on property or event accessors. It is valid on 'declaration type' declarations only."
      },
      {
        "Code": "CS1670",
        "Title": "Compiler Error CS1670",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1670",
        "Description": "params is not valid in this context"
      },
      {
        "Code": "CS1671",
        "Title": "Compiler Error CS1671",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1671",
        "Description": "A namespace declaration cannot have modifiers or attributes"
      },
      {
        "Code": "CS1672",
        "Title": "Compiler Error CS1672",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1672",
        "Description": "Invalid option 'option' for /platform; must be anycpu, x86, Itanium or x64"
      },
      {
        "Code": "CS1673",
        "Title": "Compiler Error CS1673",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1673",
        "Description": "Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead."
      },
      {
        "Code": "CS1674",
        "Title": "Compiler Error CS1674",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1674",
        "Description": "'T': type used in a using statement must be implicitly convertible to 'System.IDisposable'"
      },
      {
        "Code": "CS1675",
        "Title": "Compiler Error CS1675",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1675",
        "Description": "Enums cannot have type parameters"
      },
      {
        "Code": "CS1676",
        "Title": "Compiler Error CS1676",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1676",
        "Description": "Parameter 'number' must be declared with the 'keyword' keyword"
      },
      {
        "Code": "CS1677",
        "Title": "Compiler Error CS1677",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1677",
        "Description": "Parameter 'number' should not be declared with the 'keyword' keyword"
      },
      {
        "Code": "CS1678",
        "Title": "Compiler Error CS1678",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1678",
        "Description": "Parameter 'number' is declared as type 'type1' but should be 'type2'"
      },
      {
        "Code": "CS1679",
        "Title": "Compiler Error CS1679",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1679",
        "Description": "Invalid extern alias for '/reference'; 'identifier' is not a valid identifier"
      },
      {
        "Code": "CS1680",
        "Title": "Compiler Error CS1680",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1680",
        "Description": "Invalid reference alias option: 'alias=' -- missing filename."
      },
      {
        "Code": "CS1681",
        "Title": "Compiler Error CS1681",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1681",
        "Description": "You cannot redefine the global extern alias"
      },
      {
        "Code": "CS1686",
        "Title": "Compiler Error CS1686",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1686",
        "Description": "Local 'variable' or its members cannot have their address taken and be used inside an anonymous method or lambda expression"
      },
      {
        "Code": "CS1688",
        "Title": "Compiler Error CS1688",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1688",
        "Description": "Cannot convert anonymous method block without a parameter list to delegate type 'delegate' because it has one or more out parameters"
      },
      {
        "Code": "CS1689",
        "Title": "Compiler Error CS1689",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1689",
        "Description": "Attribute 'Attribute Name' is only valid on methods or attribute classes"
      },
      {
        "Code": "CS1703",
        "Title": "Compiler Error CS1703",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1703",
        "Description": "An assembly with the same simple name 'name' has already been imported. Try removing one of the references or sign them to enable side-by-side."
      },
      {
        "Code": "CS1704",
        "Title": "Compiler Error CS1704",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1704",
        "Description": "An assembly with the same simple name 'Assembly Name' has already been imported. Try removing one of the references or sign them to enable side-by-side."
      },
      {
        "Code": "CS1705",
        "Title": "Compiler Error CS1705",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1705",
        "Description": "Assembly 'AssemblyName1' uses 'TypeName' which has a higher version than referenced assembly 'AssemblyName2'"
      },
      {
        "Code": "CS1706",
        "Title": "Compiler Error CS1706",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1706",
        "Description": "Expression cannot contain anonymous methods  or lambda expressions"
      },
      {
        "Code": "CS1708",
        "Title": "Compiler Error CS1708",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1708",
        "Description": "Fixed size buffers can only be accessed through locals or fields"
      },
      {
        "Code": "CS1713",
        "Title": "Compiler Error CS1713",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1713",
        "Description": "Unexpected error building metadata name for type Typename1—'Reason'"
      },
      {
        "Code": "CS1714",
        "Title": "Compiler Error CS1714",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1714",
        "Description": "The base class or interface of TypeName1 could not be resolved or is invalid"
      },
      {
        "Code": "CS1715",
        "Title": "Compiler Error CS1715",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1715",
        "Description": "'Type1': type must be 'Type2' to match overridden member 'MemberName'"
      },
      {
        "Code": "CS1716",
        "Title": "Compiler Error CS1716",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1716",
        "Description": "Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute. Use the 'fixed' field modifier instead."
      },
      {
        "Code": "CS1719",
        "Title": "Compiler Error CS1719",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1719",
        "Description": "Error reading Win32 resource file 'File Name' -- 'reason'"
      },
      {
        "Code": "CS1721",
        "Title": "Compiler Error CS1721",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1721",
        "Description": "Class 'class' cannot have multiple base classes: 'class_1' and 'class_2'"
      },
      {
        "Code": "CS1722",
        "Title": "Compiler Error CS1722",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1722",
        "Description": "Base class 'class' must come before any interfaces"
      },
      {
        "Code": "CS1724",
        "Title": "Compiler Error CS1724",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1724",
        "Description": "Value specified for the argument to 'System.Runtime.InteropServices.DefaultCharSetAttribute' is not valid"
      },
      {
        "Code": "CS1725",
        "Title": "Compiler Error CS1725",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1725",
        "Description": "Friend assembly reference 'reference' is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified."
      },
      {
        "Code": "CS1726",
        "Title": "Compiler Error CS1726",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1726",
        "Description": "Friend assembly reference 'reference' is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations."
      },
      {
        "Code": "CS1727",
        "Title": "Compiler Error CS1727",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1727",
        "Description": "Cannot send error report automatically without authorization. Please visit '' to authorize sending error report."
      },
      {
        "Code": "CS1728",
        "Title": "Compiler Error CS1728",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1728",
        "Description": "Cannot bind delegate to 'member' because it is a member of 'type'"
      },
      {
        "Code": "CS1729",
        "Title": "Compiler Error CS1729",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1729",
        "Description": "'type' does not contain a constructor that takes 'number' arguments."
      },
      {
        "Code": "CS1730",
        "Title": "Compiler Error CS1730",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1730",
        "Description": "Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations."
      },
      {
        "Code": "CS1731",
        "Title": "Compiler Error CS1731",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1731",
        "Description": "Cannot convert 'expression' to delegate because some of the return types in the block are not implicitly convertible to the delegate return type."
      },
      {
        "Code": "CS1732",
        "Title": "Compiler Error CS1732",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1732",
        "Description": "Expected parameter."
      },
      {
        "Code": "CS1733",
        "Title": "Compiler Error CS1733",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1733",
        "Description": "Expected expression."
      },
      {
        "Code": "CS1900",
        "Title": "Compiler Error CS1900",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1900",
        "Description": "Warning level must be in the range 0-4"
      },
      {
        "Code": "CS1902",
        "Title": "Compiler Error CS1902",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1902",
        "Description": "Invalid option 'option' for /debug; must be full or pdbonly"
      },
      {
        "Code": "CS1906",
        "Title": "Compiler Error CS1906",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1906",
        "Description": "Invalid option 'option'; Resource visibility must be either 'public' or 'private'"
      },
      {
        "Code": "CS1908",
        "Title": "Compiler Error CS1908",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1908",
        "Description": "The type of the argument to the DefaultValue attribute must match the parameter type"
      },
      {
        "Code": "CS1909",
        "Title": "Compiler Error CS1909",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1909",
        "Description": "The DefaultValue attribute is not applicable on parameters of type 'type'"
      },
      {
        "Code": "CS1910",
        "Title": "Compiler Error CS1910",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1910",
        "Description": "Argument of type 'type' is not applicable for the DefaultValue attribute"
      },
      {
        "Code": "CS1912",
        "Title": "Compiler Error CS1912",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1912",
        "Description": "Duplicate initialization of member 'name'."
      },
      {
        "Code": "CS1913",
        "Title": "Compiler Error CS1913",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1913",
        "Description": "Member 'name' cannot be initialized. It is not a field or property."
      },
      {
        "Code": "CS1914",
        "Title": "Compiler Error CS1914",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1914",
        "Description": "Static field 'name' cannot be assigned in an object initializer"
      },
      {
        "Code": "CS1917",
        "Title": "Compiler Error CS1917",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1917",
        "Description": "Members of read-only field 'name' of type 'struct name' cannot be assigned with an object initializer because it is of a value type."
      },
      {
        "Code": "CS1918",
        "Title": "Compiler Error CS1918",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1918",
        "Description": "Members of property 'name' of type 'type' cannot be assigned with an object initializer because it is of a value type."
      },
      {
        "Code": "CS1919",
        "Title": "Compiler Error CS1919",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1919",
        "Description": "Unsafe type 'type name' cannot be used in object creation."
      },
      {
        "Code": "CS1920",
        "Title": "Compiler Error CS1920",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1920",
        "Description": "Element initializer cannot be empty."
      },
      {
        "Code": "CS1921",
        "Title": "Compiler Error CS1921",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1921",
        "Description": "The best overloaded method match for 'method' has wrong signature for the initializer element. The initializable Add must be an accessible instance method."
      },
      {
        "Code": "CS1922",
        "Title": "Compiler Error CS1922",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1922",
        "Description": "Collection initializer requires its type 'type' to implement System.Collections.IEnumerable."
      },
      {
        "Code": "CS1925",
        "Title": "Compiler Error CS1925",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1925",
        "Description": "Cannot initialize object of type 'type' with a collection initializer."
      },
      {
        "Code": "CS1926",
        "Title": "Compiler Error CS1926",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1926",
        "Description": "Error reading Win32 manifest file 'filename' -- 'error'."
      },
      {
        "Code": "CS1928",
        "Title": "Compiler Error CS1928",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1928",
        "Description": "'Type' does not contain a definition for 'method' and the best extension method overload 'method' has some invalid arguments."
      },
      {
        "Code": "CS1929",
        "Title": "Compiler Error CS1929",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1929",
        "Description": "Instance argument: cannot convert from 'typeA' to 'typeB'."
      },
      {
        "Code": "CS1930",
        "Title": "Compiler Error CS1930",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1930",
        "Description": "The range variable 'name' has already been declared"
      },
      {
        "Code": "CS1931",
        "Title": "Compiler Error CS1931",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1931",
        "Description": "The range variable 'variable' conflicts with a previous declaration of 'variable'."
      },
      {
        "Code": "CS1932",
        "Title": "Compiler Error CS1932",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1932",
        "Description": "Cannot assign 'expression' to a range variable."
      },
      {
        "Code": "CS1933",
        "Title": "Compiler Error CS1933",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1933",
        "Description": "Expression cannot contain query expressions"
      },
      {
        "Code": "CS1934",
        "Title": "Compiler Error CS1934",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1934",
        "Description": "Could not find an implementation of the query pattern for source type 'type'. 'method' not found. Consider explicitly specifying the type of the range variable 'name'."
      },
      {
        "Code": "CS1935",
        "Title": "Compiler Error CS1935",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1935",
        "Description": "Could not find an implementation of the query pattern for source type 'type'. 'method' not found. Are you missing a using directive for 'System.Linq'?"
      },
      {
        "Code": "CS1936",
        "Title": "Compiler Error CS1936",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1936",
        "Description": "Could not find an implementation of the query pattern for source type 'type'.  'method' not found."
      },
      {
        "Code": "CS1937",
        "Title": "Compiler Error CS1937",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1937",
        "Description": "The name 'name' is not in scope on the left side of 'equals'. Consider swapping the expressions on either side of 'equals'."
      },
      {
        "Code": "CS1938",
        "Title": "Compiler Error CS1938",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1938",
        "Description": "The name 'name' is not in scope on the right side of 'equals'. Consider swapping the expressions on either side of 'equals'."
      },
      {
        "Code": "CS1939",
        "Title": "Compiler Error CS1939",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1939",
        "Description": "Cannot pass the range variable 'name' as an out or ref parameter."
      },
      {
        "Code": "CS1940",
        "Title": "Compiler Error CS1940",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1940",
        "Description": "Multiple implementations of the query pattern were found for source type 'type'. Ambiguous call to 'method'."
      },
      {
        "Code": "CS1941",
        "Title": "Compiler Error CS1941",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1941",
        "Description": "The type of one of the expressions in the 'clause' clause is incorrect. Type inference failed in the call to 'method'."
      },
      {
        "Code": "CS1942",
        "Title": "Compiler Error CS1942",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1942",
        "Description": "The type of the expression in the 'clause' clause is incorrect. Type inference failed in the call to 'method'."
      },
      {
        "Code": "CS1943",
        "Title": "Compiler Error CS1943",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1943",
        "Description": "An expression of type 'type' is not allowed in a subsequent from clause in a query expression with source type 'type'. Type inference failed in the call to 'method'."
      },
      {
        "Code": "CS1944",
        "Title": "Compiler Error CS1944",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1944",
        "Description": "An expression tree may not contain an unsafe pointer operation"
      },
      {
        "Code": "CS1945",
        "Title": "Compiler Error CS1945",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1945",
        "Description": "An expression tree may not contain an anonymous method expression."
      },
      {
        "Code": "CS1946",
        "Title": "Compiler Error CS1946",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1946",
        "Description": "An anonymous method expression cannot be converted to an expression tree."
      },
      {
        "Code": "CS1947",
        "Title": "Compiler Error CS1947",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1947",
        "Description": "Range variable 'variable name' cannot be assigned to -- it is read only."
      },
      {
        "Code": "CS1948",
        "Title": "Compiler Error CS1948",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1948",
        "Description": "The range variable 'name' cannot have the same name as a method type parameter"
      },
      {
        "Code": "CS1949",
        "Title": "Compiler Error CS1949",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1949",
        "Description": "The contextual keyword 'var' cannot be used in a range variable declaration."
      },
      {
        "Code": "CS1950",
        "Title": "Compiler Error CS1950",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1950",
        "Description": "The best overloaded Add method 'name' for the collection initializer has some invalid arguments."
      },
      {
        "Code": "CS1951",
        "Title": "Compiler Error CS1951",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1951",
        "Description": "An expression tree lambda may not contain an in, out, or ref parameter."
      },
      {
        "Code": "CS1952",
        "Title": "Compiler Error CS1952",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1952",
        "Description": "An expression tree lambda may not contain a method with variable arguments"
      },
      {
        "Code": "CS1953",
        "Title": "Compiler Error CS1953",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1953",
        "Description": "An expression tree lambda may not contain a method group."
      },
      {
        "Code": "CS1954",
        "Title": "Compiler Error CS1954",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1954",
        "Description": "The best overloaded method match 'method' for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters."
      },
      {
        "Code": "CS1955",
        "Title": "Compiler Error CS1955",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1955",
        "Description": "Non-invocable member 'name' cannot be used like a method."
      },
      {
        "Code": "CS1958",
        "Title": "Compiler Error CS1958",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1958",
        "Description": "Object and collection initializer expressions may not be applied to a delegate creation expression,"
      },
      {
        "Code": "CS1959",
        "Title": "Compiler Error CS1959",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1959",
        "Description": "'name' is of type 'type'. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type."
      },
      {
        "Code": "CS2001",
        "Title": "Compiler Error CS2001",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2001",
        "Description": "Source file 'file' could not be found"
      },
      {
        "Code": "CS2003",
        "Title": "Compiler Error CS2003",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2003",
        "Description": "Response file 'file' included multiple times"
      },
      {
        "Code": "CS2005",
        "Title": "Compiler Error CS2005",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2005",
        "Description": "Missing file specification for 'option' option"
      },
      {
        "Code": "CS2006",
        "Title": "Compiler Error CS2006",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2006",
        "Description": "Command-line syntax error: Missing 'text' for 'option' option"
      },
      {
        "Code": "CS2007",
        "Title": "Compiler Error CS2007",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2007",
        "Description": "Unrecognized command-line option: 'option'"
      },
      {
        "Code": "CS2008",
        "Title": "Compiler Error CS2008",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2008",
        "Description": "No inputs specified"
      },
      {
        "Code": "CS2011",
        "Title": "Compiler Error CS2011",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2011",
        "Description": "Unable to open response file 'file'"
      },
      {
        "Code": "CS2012",
        "Title": "Compiler Error CS2012",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2012",
        "Description": "Cannot open 'file' for writing"
      },
      {
        "Code": "CS2013",
        "Title": "Compiler Error CS2013",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2013",
        "Description": "Invalid image base number 'value'"
      },
      {
        "Code": "CS2015",
        "Title": "Compiler Error CS2015",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2015",
        "Description": "'file' is a binary file instead of a text file"
      },
      {
        "Code": "CS2016",
        "Title": "Compiler Error CS2016",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2016",
        "Description": "Code page 'codepage' is invalid or not installed"
      },
      {
        "Code": "CS2017",
        "Title": "Compiler Error CS2017",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2017",
        "Description": "Cannot specify /main if building a module or library"
      },
      {
        "Code": "CS2018",
        "Title": "Compiler Error CS2018",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2018",
        "Description": "Unable to find messages file 'cscmsgs.dll'"
      },
      {
        "Code": "CS2019",
        "Title": "Compiler Error CS2019",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2019",
        "Description": "Invalid target type for /target: must specify 'exe', 'winexe', 'library', or 'module'"
      },
      {
        "Code": "CS2020",
        "Title": "Compiler Error CS2020",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2020",
        "Description": "Only the first set of input files can build a target other than 'module'"
      },
      {
        "Code": "CS2021",
        "Title": "Compiler Error CS2021",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2021",
        "Description": "File name 'file' is too long or invalid"
      },
      {
        "Code": "CS2022",
        "Title": "Compiler Error CS2022",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2022",
        "Description": "Options '/out' and '/target' must appear before source file names"
      },
      {
        "Code": "CS2024",
        "Title": "Compiler Error CS2024",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2024",
        "Description": "Invalid file section alignment number '#'"
      },
      {
        "Code": "CS2032",
        "Title": "Compiler Error CS2032",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs2032",
        "Description": "Character 'character' is not allowed on the command-line or in response files"
      },
      {
        "Code": "CS2033",
        "Title": "Compiler Error CS2033",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2033",
        "Description": "Cannot create short filename 'filename' when a long filename with the same short filename already exists"
      },
      {
        "Code": "CS2034",
        "Title": "Compiler Error CS2034",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2034",
        "Description": "A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options."
      },
      {
        "Code": "CS2035",
        "Title": "Compiler Error CS2035",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2035",
        "Description": "Command-line syntax error:  Missing ':&lt;number&gt;' for 'compiler_option' option"
      },
      {
        "Code": "CS2036",
        "Title": "Compiler Error CS2036",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2036",
        "Description": "The /pdb option requires that the /debug option also be used."
      },
      {
        "Code": "CS4009",
        "Title": "Compiler Error CS4009",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs4009",
        "Description": "'Type.Method': an entry point cannot be marked with the async modifier."
      },
      {
        "Code": "CS5001",
        "Title": "Compiler Error CS5001",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs5001",
        "Description": "Program does not contain a static 'Main' method suitable for an entry point"
      },
      {
        "Code": "CS7003",
        "Title": "Compiler Error CS7003",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs7003",
        "Description": "Unexpected use of an unbound generic name"
      },
      {
        "Code": "CS8400",
        "Title": "Compiler Error CS8400",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8400",
        "Description": "Feature 'feature' is not available in C# 8.0. Please use language version &lt;version&gt; or greater."
      },
      {
        "Code": "CS8401",
        "Title": "Compiler Error CS8401",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8401",
        "Description": "To use '@$' instead of '$@' for an interpolated verbatim string, please use language version '8.0' or greater."
      },
      {
        "Code": "CS8403",
        "Title": "Compiler Error CS8403",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8403",
        "Description": "Method 'method' with an iterator block must be 'async' to return '{IAsyncEnumerable&lt;T&gt;|IAsyncEnumerator&lt;T&gt;}'"
      },
      {
        "Code": "CS8410",
        "Title": "Compiler Error CS8410",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8410",
        "Description": "'type': type used in an asynchronous using statement must be implicitly convertible to 'System.IAsyncDisposable' or implement a suitable 'DisposeAsync' method."
      },
      {
        "Code": "CS8411",
        "Title": "Compiler Error CS8411",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8411",
        "Description": "Asynchronous foreach statement cannot operate on variables of type 'type' because 'type' does not contain a suitable public instance definition for 'GetAsyncEnumerator'"
      },
      {
        "Code": "CS0183",
        "Title": "Compiler Warning (level 1) CS0183",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0183",
        "Description": "The given expression is always of the provided ('type') type"
      },
      {
        "Code": "CS0184",
        "Title": "Compiler Warning (level 1) CS0184",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0184",
        "Description": "The given expression is never of the provided ('type') type"
      },
      {
        "Code": "CS0197",
        "Title": "Compiler Warning (level 1) CS0197",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0197",
        "Description": "Passing 'argument' as ref or out or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class"
      },
      {
        "Code": "CS0420",
        "Title": "Compiler Warning (level 1) CS0420",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0420",
        "Description": "'identifier': a reference to a volatile field will not be treated as volatile"
      },
      {
        "Code": "CS0465",
        "Title": "Compiler Warning (level 1) CS0465",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0465",
        "Description": "Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?"
      },
      {
        "Code": "CS0602",
        "Title": "Compiler Warning (level 1) CS0602",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0602",
        "Description": "The feature 'old_feature' is deprecated. Please use 'new_feature' instead"
      },
      {
        "Code": "CS0612",
        "Title": "Compiler warning (level 1) CS0612",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0612",
        "Description": "'member' is obsolete"
      },
      {
        "Code": "CS0626",
        "Title": "Compiler Warning (level 1) CS0626",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0626",
        "Description": "Method, operator, or accessor 'method' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation."
      },
      {
        "Code": "CS0657",
        "Title": "Compiler Warning (level 1) CS0657",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0657",
        "Description": "'attribute modifier' is not a valid attribute location for this declaration. Valid attribute locations for this declaration are 'locations'. All attributes in this block will be ignored."
      },
      {
        "Code": "CS0658",
        "Title": "Compiler Warning (level 1) CS0658",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0658",
        "Description": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored."
      },
      {
        "Code": "CS0672",
        "Title": "Compiler Warning (level 1) CS0672",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0672",
        "Description": "Member 'member1' overrides obsolete member 'member2. Add the Obsolete attribute to 'member1'"
      },
      {
        "Code": "CS0684",
        "Title": "Compiler Warning (level 1) CS0684",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0684",
        "Description": "'interface' interface marked with 'CoClassAttribute' not marked with 'ComImportAttribute'"
      },
      {
        "Code": "CS0688",
        "Title": "Compiler Warning (level 1) CS0688",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0688",
        "Description": "'method1' has a link demand, but overrides or implements 'method2' which does not have a link demand. A security hole may exist."
      },
      {
        "Code": "CS0809",
        "Title": "Compiler Warning (level 1) CS0809",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0809",
        "Description": "Obsolete member 'memberA' overrides non-obsolete member 'memberB'."
      },
      {
        "Code": "CS0824",
        "Title": "Compiler Warning (level 1) CS0824",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0824",
        "Description": "Constructor 'name' is marked external."
      },
      {
        "Code": "CS1030",
        "Title": "Compiler Warning (level 1) CS1030",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1030",
        "Description": "#warning: 'text'"
      },
      {
        "Code": "CS1058",
        "Title": "Compiler Warning (level 1) CS1058",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1058",
        "Description": "A previous catch clause already catches all exceptions. All exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException"
      },
      {
        "Code": "CS1060",
        "Title": "Compiler Warning (level 1) CS1060",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1060",
        "Description": "Use of possibly unassigned field 'name'. Struct instance variables are initially unassigned if struct is unassigned."
      },
      {
        "Code": "CS1200",
        "Title": "Compiler Warning (level 1) CS1200",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1200",
        "Description": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead'."
      },
      {
        "Code": "CS1201",
        "Title": "Compiler Warning (level 1) CS1201",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1201",
        "Description": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead."
      },
      {
        "Code": "CS1202",
        "Title": "Compiler Warning (level 1) CS1202",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1202",
        "Description": "The feature 'invalid feature' is deprecated. Please use 'valid feature' instead'."
      },
      {
        "Code": "CS1203",
        "Title": "Compiler Warning (level 1) CS1203",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1203",
        "Description": "The feature 'feature' is deprecated. Please use 'feature' instead'."
      },
      {
        "Code": "CS1522",
        "Title": "Compiler Warning (level 1) CS1522",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1522",
        "Description": "Empty switch block"
      },
      {
        "Code": "CS1570",
        "Title": "Compiler Warning (level 1) CS1570",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1570",
        "Description": "XML comment on 'construct' has badly formed XML — 'reason'"
      },
      {
        "Code": "CS1574",
        "Title": "Compiler Warning (level 1) CS1574",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1574",
        "Description": "XML comment on 'construct' has syntactically incorrect cref attribute 'name'"
      },
      {
        "Code": "CS1580",
        "Title": "Compiler Warning (level 1) CS1580",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1580",
        "Description": "Invalid type for parameter 'parameter number' in XML comment cref attribute"
      },
      {
        "Code": "CS1581",
        "Title": "Compiler Warning (level 1) CS1581",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1581",
        "Description": "Invalid return type in XML comment cref attribute"
      },
      {
        "Code": "CS1584",
        "Title": "Compiler Warning (level 1) CS1584",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1584",
        "Description": "XML comment on 'member' has syntactically incorrect cref attribute 'invalid_syntax'"
      },
      {
        "Code": "CS1589",
        "Title": "Compiler Warning (level 1) CS1589",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1589",
        "Description": "Unable to include XML fragment 'fragment' of file 'file' -- reason"
      },
      {
        "Code": "CS1590",
        "Title": "Compiler Warning (level 1) CS1590",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1590",
        "Description": "Invalid XML include element -- Missing file attribute"
      },
      {
        "Code": "CS1592",
        "Title": "Compiler Warning (level 1) CS1592",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1592",
        "Description": "Badly formed XML in included comments file -- 'reason'"
      },
      {
        "Code": "CS1598",
        "Title": "Compiler Warning (level 1) CS1598",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1598",
        "Description": "XML parser could not be loaded for the following reason: 'reason'. The XML documentation file 'file' will not be generated."
      },
      {
        "Code": "CS1607",
        "Title": "Compiler Warning (level 1) CS1607",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1607",
        "Description": "Assembly generation -- reason"
      },
      {
        "Code": "CS1616",
        "Title": "Compiler Warning (level 1) CS1616",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1616",
        "Description": "Option 'option' overrides attribute 'attribute' given in a source file or added module"
      },
      {
        "Code": "CS1633",
        "Title": "Compiler Warning (level 1) CS1633",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1633",
        "Description": "Unrecognized #pragma directive"
      },
      {
        "Code": "CS1634",
        "Title": "Compiler Warning (level 1) CS1634",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1634",
        "Description": "Expected disable or restore"
      },
      {
        "Code": "CS1635",
        "Title": "Compiler Warning (level 1) CS1635",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1635",
        "Description": "Cannot restore warning 'warning code' because it was disabled globally"
      },
      {
        "Code": "CS1645",
        "Title": "Compiler Warning (level 1) CS1645",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1645",
        "Description": "Feature 'feature' is not part of the standardized ISO C# language specification, and may not be accepted by other compilers"
      },
      {
        "Code": "CS1658",
        "Title": "Compiler Warning (level 1) CS1658",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1658",
        "Description": "'warning text'. See also error 'error code'"
      },
      {
        "Code": "CS1682",
        "Title": "Compiler Warning (level 1) CS1682",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1682",
        "Description": "Reference to type 'type' claims it is nested within 'nested type', but it could not be found"
      },
      {
        "Code": "CS1683",
        "Title": "Compiler Warning (level 1) CS1683",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1683",
        "Description": "Reference to type 'Type Name' claims it is defined in this assembly, but it is not defined in source or any added modules"
      },
      {
        "Code": "CS1684",
        "Title": "Compiler Warning (level 1) CS1684",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1684",
        "Description": "Reference to type 'Type Name' claims it is defined in 'Namespace', but it could not be found"
      },
      {
        "Code": "CS1685",
        "Title": "Compiler Warning (level 1) CS1685",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1685",
        "Description": "The predefined type 'System.type name' is defined in multiple assemblies in the global alias; using definition from 'File Name'"
      },
      {
        "Code": "CS1687",
        "Title": "Compiler Warning (level 1) CS1687",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1687",
        "Description": "Source file has exceeded the limit of 16,707,565 lines representable in the PDB, debug information will be incorrect"
      },
      {
        "Code": "CS1690",
        "Title": "Compiler Warning (level 1) CS1690",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1690",
        "Description": "Accessing a member on 'member' may cause a runtime exception because it is a field of a marshal-by-reference class"
      },
      {
        "Code": "CS1691",
        "Title": "Compiler Warning (level 1) CS1691",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1691",
        "Description": "'number' is not a valid warning number"
      },
      {
        "Code": "CS1692",
        "Title": "Compiler Warning (level 1) CS1692",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1692",
        "Description": "Invalid number"
      },
      {
        "Code": "CS1694",
        "Title": "Compiler Warning (level 1) CS1694",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1694",
        "Description": "Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename."
      },
      {
        "Code": "CS1695",
        "Title": "Compiler Warning (level 1) CS1695",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1695",
        "Description": "Invalid #pragma checksum syntax; should be #pragma checksum &quot;filename&quot; &quot;{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}&quot; &quot;XXXX...&quot;"
      },
      {
        "Code": "CS1696",
        "Title": "Compiler Warning (level 1) CS1696",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1696",
        "Description": "Single-line comment or end-of-line expected"
      },
      {
        "Code": "CS1697",
        "Title": "Compiler Warning (level 1) CS1697",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1697",
        "Description": "Different checksum values given for 'file name'"
      },
      {
        "Code": "CS1699",
        "Title": "Compiler Warning (level 1) CS1699",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1699",
        "Description": "Use command line option &quot;compiler_option&quot; or appropriate project settings instead of &quot;attribute_name&quot;"
      },
      {
        "Code": "CS1707",
        "Title": "Compiler Warning (level 1) CS1707",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1707",
        "Description": "Delegate 'DelegateName' bound to 'MethodName1' instead of 'MethodName2' because of new language rules"
      },
      {
        "Code": "CS1709",
        "Title": "Compiler Warning (level 1) CS1709",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1709",
        "Description": "Filename specified for preprocessor directive is empty"
      },
      {
        "Code": "CS1720",
        "Title": "Compiler Warning (level 1) CS1720",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1720",
        "Description": "Expression will always cause a System.NullReferenceException because the default value of 'generic type' is null"
      },
      {
        "Code": "CS1723",
        "Title": "Compiler Warning (level 1) CS1723",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1723",
        "Description": "XML comment on 'param' has cref attribute 'attribute' that refers to a type parameter"
      },
      {
        "Code": "CS1762",
        "Title": "Compiler Warning (level 1) CS1762",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1762",
        "Description": "A reference was created to embedded interop assembly '&lt;assembly1&gt;' because of an indirect reference to that assembly from assembly '&lt;assembly2&gt;'. Consider changing the 'Embed Interop Types' property on either assembly."
      },
      {
        "Code": "CS1911",
        "Title": "Compiler Warning (level 1) CS1911",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1911",
        "Description": "Access to member 'name' through a 'base' keyword from an anonymous method, lambda expression, query expression, or iterator results in unverifiable code. Consider moving the access into a helper method on the containing type."
      },
      {
        "Code": "CS1956",
        "Title": "Compiler Warning (level 1) CS1956",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1956",
        "Description": "Member 'name' implements interface member 'name' in type 'type'. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called."
      },
      {
        "Code": "CS1957",
        "Title": "Compiler Warning (Level 1) CS1957",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1957",
        "Description": "Member 'name' overrides 'method'. There are multiple override candidates at run-time. It is implementation dependent which method will be called."
      },
      {
        "Code": "CS2002",
        "Title": "Compiler Warning (level 1) CS2002",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2002",
        "Description": "Source file 'file' specified multiple times"
      },
      {
        "Code": "CS2014",
        "Title": "Compiler Warning (level 1) CS2014",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2014",
        "Description": "Compiler option 'old option' is obsolete, please use 'new option' instead"
      },
      {
        "Code": "CS2023",
        "Title": "Compiler Warning (level 1) CS2023",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2023",
        "Description": "Ignoring /noconfig option because it was specified in a response file"
      },
      {
        "Code": "CS2029",
        "Title": "Compiler Warning (level 1) CS2029",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs2029",
        "Description": "Invalid value for '/define'; 'identifier' is not a valid identifier"
      },
      {
        "Code": "CS3000",
        "Title": "Compiler Warning (level 1) CS3000",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3000",
        "Description": "Methods with variable arguments are not CLS-compliant"
      },
      {
        "Code": "CS3001",
        "Title": "Compiler Warning (level 1) CS3001",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3001",
        "Description": "Argument type 'type' is not CLS-compliant"
      },
      {
        "Code": "CS3002",
        "Title": "Compiler Warning (level 1) CS3002",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3002",
        "Description": "Return type of 'method' is not CLS-compliant"
      },
      {
        "Code": "CS3003",
        "Title": "Compiler Warning (level 1) CS3003",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs3003",
        "Description": "Type of 'variable' is not CLS-compliant"
      },
      {
        "Code": "CS3004",
        "Title": "Compiler Warning (level 1) CS3004",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3004",
        "Description": "Mixed and decomposed Unicode characters are not CLS-compliant"
      },
      {
        "Code": "CS3005",
        "Title": "Compiler Warning (level 1) CS3005",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3005",
        "Description": "Identifier 'identifier' differing only in case is not CLS-compliant"
      },
      {
        "Code": "CS3006",
        "Title": "Compiler Warning (level 1) CS3006",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3006",
        "Description": "Overloaded method 'method' differing only in ref or out, or in array rank, is not CLS-compliant"
      },
      {
        "Code": "CS3007",
        "Title": "Compiler Warning (level 1) CS3007",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs3007",
        "Description": "Overloaded method 'method' differing only by unnamed array types is not CLS-compliant"
      },
      {
        "Code": "CS3008",
        "Title": "Compiler Warning (level 1) CS3008",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3008",
        "Description": "Identifier 'identifier' differing only in case is not CLS-compliant"
      },
      {
        "Code": "CS3009",
        "Title": "Compiler Warning (level 1) CS3009",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs3009",
        "Description": "'type': base type 'type' is not CLS-compliant"
      },
      {
        "Code": "CS3010",
        "Title": "Compiler Warning (level 1) CS3010",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3010",
        "Description": "'member': CLS-compliant interfaces must have only CLS-compliant members"
      },
      {
        "Code": "CS3011",
        "Title": "Compiler Warning (level 1) CS3011",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3011",
        "Description": "'member': only CLS-compliant members can be abstract"
      },
      {
        "Code": "CS3012",
        "Title": "Compiler Warning (level 1) CS3012",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3012",
        "Description": "You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly"
      },
      {
        "Code": "CS3013",
        "Title": "Compiler Warning (level 1) CS3013",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3013",
        "Description": "Added modules must be marked with the CLSCompliant attribute to match the assembly"
      },
      {
        "Code": "CS3014",
        "Title": "Compiler Warning (level 1) CS3014",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3014",
        "Description": "'member' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute"
      },
      {
        "Code": "CS3015",
        "Title": "Compiler Warning (level 1) CS3015",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3015",
        "Description": "'method signature' has no accessible constructors which use only CLS-compliant types"
      },
      {
        "Code": "CS3016",
        "Title": "Compiler Warning (level 1) CS3016",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3016",
        "Description": "Arrays as attribute arguments is not CLS-compliant"
      },
      {
        "Code": "CS3017",
        "Title": "Compiler Warning (level 1) CS3017",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3017",
        "Description": "You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly"
      },
      {
        "Code": "CS3018",
        "Title": "Compiler Warning (level 1) CS3018",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3018",
        "Description": "'type' cannot be marked as CLS-Compliant because it is a member of non CLS-compliant type 'type'"
      },
      {
        "Code": "CS3022",
        "Title": "Compiler Warning (level 1) CS3022",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3022",
        "Description": "CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead."
      },
      {
        "Code": "CS3023",
        "Title": "Compiler Warning (level 1) CS3023",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3023",
        "Description": "CLSCompliant attribute has no meaning when applied to return types.  Try putting it on the method instead."
      },
      {
        "Code": "CS3024",
        "Title": "Compiler Warning (level 1) CS3024",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3024",
        "Description": "Constraint type 'type' is not CLS-compliant."
      },
      {
        "Code": "CS3026",
        "Title": "Compiler Warning (level 1) CS3026",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3026",
        "Description": "CLS-compliant field 'field' cannot be volatile"
      },
      {
        "Code": "CS3027",
        "Title": "Compiler Warning (level 1) CS3027",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3027",
        "Description": "'type_1' is not CLS-compliant because base interface 'type_2' is not CLS-compliant"
      },
      {
        "Code": "CS4014",
        "Title": "Compiler Warning (level 1) CS4014",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs4014",
        "Description": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the await operator to the result of the call."
      },
      {
        "Code": "CS5000",
        "Title": "Compiler Warning (level 1) CS5000",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs5000",
        "Description": "Unknown compiler option '/option'"
      },
      {
        "Code": "CS0108",
        "Title": "Compiler Warning (level 2) CS0108",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0108",
        "Description": "'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended."
      },
      {
        "Code": "CS0114",
        "Title": "Compiler Warning (level 2) CS0114",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0114",
        "Description": "'function1' hides inherited member 'function2'. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword."
      },
      {
        "Code": "CS0162",
        "Title": "Compiler Warning (level 2) CS0162",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0162",
        "Description": "Unreachable code detected"
      },
      {
        "Code": "CS0164",
        "Title": "Compiler Warning (level 2) CS0164",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0164",
        "Description": "This label has not been referenced"
      },
      {
        "Code": "CS0251",
        "Title": "Compiler Warning (level 2) CS0251",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0251",
        "Description": "Indexing an array with a negative index (array indices always start at zero)"
      },
      {
        "Code": "CS0252",
        "Title": "Compiler Warning (level 2) CS0252",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0252",
        "Description": "Possible unintended reference comparison; to get a value comparison, cast the left hand side to type 'type'"
      },
      {
        "Code": "CS0253",
        "Title": "Compiler Warning (level 2) CS0253",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0253",
        "Description": "Possible unintended reference comparison; to get a value comparison, cast the right hand side to type 'type'"
      },
      {
        "Code": "CS0278",
        "Title": "Compiler Warning (level 2) CS0278",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0278",
        "Description": "'type' does not implement the 'pattern name' pattern. 'method name' is ambiguous with 'method name'."
      },
      {
        "Code": "CS0279",
        "Title": "Compiler Warning (level 2) CS0279",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0279",
        "Description": "'type name' does not implement the 'pattern name' pattern. 'method name' is either static or not public."
      },
      {
        "Code": "CS0280",
        "Title": "Compiler Warning (level 2) CS0280",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0280",
        "Description": "'type' does not implement the 'pattern name' pattern. 'method name' has the wrong signature."
      },
      {
        "Code": "CS0435",
        "Title": "Compiler Warning (level 2) CS0435",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0435",
        "Description": "The namespace 'namespace' in 'assembly' conflicts with the imported type 'type' in 'assembly'. Using the namespace defined in 'assembly'."
      },
      {
        "Code": "CS0436",
        "Title": "Compiler Warning (level 2) CS0436",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0436",
        "Description": "The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'."
      },
      {
        "Code": "CS0437",
        "Title": "Compiler Warning (level 2) CS0437",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0437",
        "Description": "The type 'type' in 'assembly2' conflicts with the imported namespace 'namespace' in 'fassembly1'. Using the type defined in 'assembly'."
      },
      {
        "Code": "CS0440",
        "Title": "Compiler Warning (level 2) CS0440",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0440",
        "Description": "Defining an alias named 'global' is ill-advised since 'global::' always references the global namespace and not an alias"
      },
      {
        "Code": "CS0444",
        "Title": "Compiler Warning (level 2) CS0444",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0444",
        "Description": "Predefined type 'type name 1' was not found in 'System namespace 1' but was found in 'System namespace 2'"
      },
      {
        "Code": "CS0458",
        "Title": "Compiler Warning (level 2) CS0458",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0458",
        "Description": "The result of the expression is always 'null' of type 'type name'"
      },
      {
        "Code": "CS0464",
        "Title": "Compiler Warning (level 2) CS0464",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0464",
        "Description": "Comparing with null of type 'type' always produces 'false'"
      },
      {
        "Code": "CS0467",
        "Title": "Compiler Warning (level 2) CS0467",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0467",
        "Description": "Ambiguity between method 'method' and non-method 'non-method'. Using method group."
      },
      {
        "Code": "CS0469",
        "Title": "Compiler Warning (level 2) CS0469",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0469",
        "Description": "The 'goto case' value is not implicitly convertible to type 'type'"
      },
      {
        "Code": "CS0472",
        "Title": "Compiler Warning (level 2) CS0472",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0472",
        "Description": "The result of the expression is always 'value1' since a value of type 'value2' is never equal to 'null' of type 'value3'"
      },
      {
        "Code": "CS0618",
        "Title": "Compiler Warning (level 2) CS0618",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0618",
        "Description": "'member' is obsolete: 'text'"
      },
      {
        "Code": "CS0652",
        "Title": "Compiler Warning (level 2) CS0652",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0652",
        "Description": "Comparison to integral constant is useless; the constant is outside the range of type 'type'"
      },
      {
        "Code": "CS0728",
        "Title": "Compiler Warning (level 2) CS0728",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0728",
        "Description": "Possibly incorrect assignment to local 'variable' which is the argument to a using or lock statement.  The Dispose call or unlocking will happen on the original value of the local."
      },
      {
        "Code": "CS1571",
        "Title": "Compiler Warning (level 2) CS1571",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1571",
        "Description": "XML comment on 'construct' has a duplicate param tag for 'parameter'"
      },
      {
        "Code": "CS1572",
        "Title": "Compiler Warning (level 2) CS1572",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1572",
        "Description": "XML comment on 'construct' has a param tag for 'parameter', but there is no parameter by that name"
      },
      {
        "Code": "CS1587",
        "Title": "Compiler Warning (level 2) CS1587",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1587",
        "Description": "XML comment is not placed on a valid language element"
      },
      {
        "Code": "CS1668",
        "Title": "Compiler Warning (level 2) CS1668",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1668",
        "Description": "Invalid search path 'path' specified in 'path string' --  'system error message'"
      },
      {
        "Code": "CS1698",
        "Title": "Compiler Warning (level 2) CS1698",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1698",
        "Description": "Circular assembly reference 'AssemblyName1' does not match the output assembly name 'AssemblyName2'. Try adding a reference to 'AssemblyName1' or changing the output assembly name to match."
      },
      {
        "Code": "CS1701",
        "Title": "Compiler Warning (level 2) CS1701",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1701",
        "Description": "Assuming assembly reference &quot;Assembly Name #1&quot; matches &quot;Assembly Name #2&quot;, you may need to supply runtime policy"
      },
      {
        "Code": "CS1710",
        "Title": "Compiler Warning (level 2) CS1710",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1710",
        "Description": "XML comment on 'type' has a duplicate typeparam tag for 'parameter'"
      },
      {
        "Code": "CS1711",
        "Title": "Compiler Warning (level 2) CS1711",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1711",
        "Description": "XML comment on 'type' has a typeparam tag for 'parameter', but there is no type parameter by that name"
      },
      {
        "Code": "CS1927",
        "Title": "Compiler Warning (Level 2) CS1927",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1927",
        "Description": "Ignoring /win32manifest for module because it only applies to assemblies."
      },
      {
        "Code": "CS3019",
        "Title": "Compiler Warning (level 2) CS3019",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3019",
        "Description": "CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly."
      },
      {
        "Code": "CS3021",
        "Title": "Compiler Warning (level 2) CS3021",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs3021",
        "Description": "'type' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute"
      },
      {
        "Code": "CS0067",
        "Title": "Compiler Warning (level 3) CS0067",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0067",
        "Description": "The event 'event' is never used"
      },
      {
        "Code": "CS0105",
        "Title": "Compiler Warning (level 3) CS0105",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0105",
        "Description": "The using directive for 'namespace' appeared previously in this namespace"
      },
      {
        "Code": "CS0168",
        "Title": "Compiler Warning (level 3) CS0168",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0168",
        "Description": "The variable 'var' is declared but never used"
      },
      {
        "Code": "CS0169",
        "Title": "Compiler Warning (level 3) CS0169",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0169",
        "Description": "The private field 'class member' is never used"
      },
      {
        "Code": "CS0219",
        "Title": "Compiler Warning (level 3) CS0219",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0219",
        "Description": "The variable 'variable' is assigned but its value is never used"
      },
      {
        "Code": "CS0282",
        "Title": "Compiler Warning (level 3) CS0282",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0282",
        "Description": "There is no defined ordering between fields in multiple declarations of partial class or struct 'type'. To specify an ordering, all instance fields must be in the same declaration."
      },
      {
        "Code": "CS0414",
        "Title": "Compiler Warning (level 3) CS0414",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0414",
        "Description": "The private field 'field' is assigned but its value is never used"
      },
      {
        "Code": "CS0419",
        "Title": "Compiler Warning (level 3) CS0419",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0419",
        "Description": "Ambiguous reference in cref attribute: 'Method Name1'.  Assuming 'Method Name2', but could have also matched other overloads including 'Method Name3'."
      },
      {
        "Code": "CS0642",
        "Title": "Compiler Warning (level 3) CS0642",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0642",
        "Description": "Possible mistaken empty statement"
      },
      {
        "Code": "CS0659",
        "Title": "Compiler Warning (level 3) CS0659",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0659",
        "Description": "'class' overrides Object.Equals(object o) but does not override Object.GetHashCode()"
      },
      {
        "Code": "CS0660",
        "Title": "Compiler Warning (level 3) CS0660",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0660",
        "Description": "'class' defines operator == or operator != but does not override Object.Equals(object o)"
      },
      {
        "Code": "CS0661",
        "Title": "Compiler Warning (level 3) CS0661",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0661",
        "Description": "'class' defines operator == or operator != but does not override Object.GetHashCode()"
      },
      {
        "Code": "CS0665",
        "Title": "Compiler Warning (level 3) CS0665",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0665",
        "Description": "Assignment in conditional expression is always constant; did you mean to use == instead of = ?"
      },
      {
        "Code": "CS0675",
        "Title": "Compiler Warning (level 3) CS0675",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0675",
        "Description": "Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first"
      },
      {
        "Code": "CS0693",
        "Title": "Compiler Warning (level 3) CS0693",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0693",
        "Description": "Type parameter 'type parameter' has the same name as the type parameter from outer type 'type'"
      },
      {
        "Code": "CS1700",
        "Title": "Compiler Warning (level 3) CS1700",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1700",
        "Description": "Assembly reference Assembly Name is invalid and cannot be resolved"
      },
      {
        "Code": "CS1702",
        "Title": "Compiler Warning (level 3) CS1702",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1702",
        "Description": "Assuming assembly reference &quot;Assembly Name #1&quot; matches &quot;Assembly Name #2&quot;, you may need to supply runtime policy"
      },
      {
        "Code": "CS1717",
        "Title": "Compiler Warning (level 3) CS1717",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717",
        "Description": "Assignment made to same variable; did you mean to assign something else?"
      },
      {
        "Code": "CS1718",
        "Title": "Compiler Warning (level 3) CS1718",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1718",
        "Description": "Comparison made to same variable; did you mean to compare something else?"
      },
      {
        "Code": "CS0028",
        "Title": "Compiler Warning (level 4) CS0028",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0028",
        "Description": "'function declaration' has the wrong signature to be an entry point"
      },
      {
        "Code": "CS0078",
        "Title": "Compiler Warning (level 4) CS0078",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0078",
        "Description": "The 'l' suffix is easily confused with the digit '1' -- use 'L' for clarity"
      },
      {
        "Code": "CS0109",
        "Title": "Compiler Warning (level 4) CS0109",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0109",
        "Description": "The member 'member' does not hide an inherited member. The new keyword is not required"
      },
      {
        "Code": "CS0402",
        "Title": "Compiler Warning (level 4) CS0402",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0402",
        "Description": "'identifier' : an entry point cannot be generic or in a generic type"
      },
      {
        "Code": "CS0422",
        "Title": "Compiler Warning (level 4) CS0422",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0422",
        "Description": "The /incremental option is no longer supported"
      },
      {
        "Code": "CS0429",
        "Title": "Compiler Warning (level 4) CS0429",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0429",
        "Description": "Unreachable expression code detected"
      },
      {
        "Code": "CS0628",
        "Title": "Compiler Warning (level 4) CS0628",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0628",
        "Description": "'member' : new protected member declared in sealed class"
      },
      {
        "Code": "CS0649",
        "Title": "Compiler Warning (level 4) CS0649",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0649",
        "Description": "Field 'field' is never assigned to, and will always have its default value 'value'"
      },
      {
        "Code": "CS1573",
        "Title": "Compiler Warning (level 4) CS1573",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1573",
        "Description": "Parameter 'parameter' has no matching param tag in the XML comment for 'parameter' (but other parameters do)"
      },
      {
        "Code": "CS1591",
        "Title": "Compiler Warning (level 4) CS1591",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1591",
        "Description": "Missing XML comment for publicly visible type or member 'Type_or_Member'"
      },
      {
        "Code": "CS1610",
        "Title": "Compiler Warning (level 4) CS1610",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1610",
        "Description": "Unable to delete temporary file 'file' used for default Win32 resource -- resource"
      },
      {
        "Code": "CS1712",
        "Title": "Compiler Warning (level 4) CS1712",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1712",
        "Description": "Type parameter 'type parameter' has no matching typeparam tag in the XML comment on 'type' (but other type parameters do)"
      },
      {
        "Code": "CS8892",
        "Title": "Compiler warning (level 5) CS8892",
        "Link": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs8892",
        "Description": "Method 'method' will not be used as an entry point because a synchronous entry point 'method' was found."
      }
    ]
  },
  {
    "Name": "Microsoft.CompilerErrors.Undocumented",
    "Rules": [
      {
        "Code": "CS1998",
        "Title": "Async method lacks 'await' operators and will run synchronously.",
        "Link": ""
      },
      {
        "Code": "CS8034",
        "Title": "Unable to load Analyzer assembly.",
        "Link": ""
      },
      {
        "Code": "CS8073",
        "Title": "The result of the expression is always the same since a value of this type is never equal to ‘null’.",
        "Link": ""
      },
      {
        "Code": "CS8597",
        "Title": "Thrown value may be null.",
        "Link": ""
      },
      {
        "Code": "CS8600",
        "Title": "Converting null literal or possible null value to non - nullable type.",
        "Link": ""
      },
      {
        "Code": "CS8601",
        "Title": "Possible null reference assignment.",
        "Link": ""
      },
      {
        "Code": "CS8602",
        "Title": "Dereference of a possibly null reference.",
        "Link": ""
      },
      {
        "Code": "CS8603",
        "Title": "Possible null reference return.",
        "Link": ""
      },
      {
        "Code": "CS8604",
        "Title": "Possible null reference argument.",
        "Link": ""
      },
      {
        "Code": "CS8605",
        "Title": "Unboxing a possibly null value.",
        "Link": ""
      },
      {
        "Code": "CS8606",
        "Title": "Possible null reference assignment to iteration variable",
        "Link": ""
      },
      {
        "Code": "CS8607",
        "Title": "A possible null value may not be passed to a target marked with the[DisallowNull] attribute",
        "Link": ""
      },
      {
        "Code": "CS8608",
        "Title": "Nullability of reference types in type doesn’t match overridden member.",
        "Link": ""
      },
      {
        "Code": "CS8609",
        "Title": "Nullability of reference types in return type doesn’t match overridden member.",
        "Link": ""
      },
      {
        "Code": "CS8610",
        "Title": "Nullability of reference types in type of parameter doesn't match overridden member.",
        "Link": ""
      },
      {
        "Code": "CS8611",
        "Title": "Nullability of reference types in type of parameter doesn't match partial method declaration.",
        "Link": ""
      },
      {
        "Code": "CS8612",
        "Title": "Nullability of reference types in type doesn’t match implicitly implemented member.",
        "Link": ""
      },
      {
        "Code": "CS8613",
        "Title": "Nullability of reference types in return type doesn't match implicitly implemented member.",
        "Link": ""
      },
      {
        "Code": "CS8614",
        "Title": "Nullability of reference types in type of parameter doesn’t match implicitly implemented member.",
        "Link": ""
      },
      {
        "Code": "CS8615",
        "Title": "Nullability of reference types in type doesn’t match implemented member.",
        "Link": ""
      },
      {
        "Code": "CS8616",
        "Title": "Nullability of reference types in return type doesn’t match implemented member.",
        "Link": ""
      },
      {
        "Code": "CS8617",
        "Title": "Nullability of reference types in type of parameter doesn’t match implemented member.",
        "Link": ""
      },
      {
        "Code": "CS8618",
        "Title": "Non-nullable field is uninitialized. Consider declaring as nullable.",
        "Link": ""
      },
      {
        "Code": "CS8619",
        "Title": "Nullability of reference types in value doesn't match target type.",
        "Link": ""
      },
      {
        "Code": "CS8620",
        "Title": "Argument cannot be used for parameter due to differences in the nullability of reference types.",
        "Link": ""
      },
      {
        "Code": "CS8621",
        "Title": "Nullability of reference types in return type doesn't match the target delegate.",
        "Link": ""
      },
      {
        "Code": "CS8622",
        "Title": "Nullability of reference types in type of parameter doesn't match the target delegate.",
        "Link": ""
      },
      {
        "Code": "CS8624",
        "Title": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types.",
        "Link": ""
      },
      {
        "Code": "CS8625",
        "Title": "Cannot convert null literal to non-nullable reference type.",
        "Link": ""
      },
      {
        "Code": "CS8626",
        "Title": "The ‘as’ operator may produce a null value for a type parameter.",
        "Link": ""
      },
      {
        "Code": "CS8629",
        "Title": "Nullable value type may be null.",
        "Link": ""
      },
      {
        "Code": "CS8631",
        "Title": "The type cannot be used as type parameter in the generic type or method.Nullability of type argument doesn’t match constraint type.",
        "Link": ""
      },
      {
        "Code": "CS8632",
        "Title": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
        "Link": ""
      },
      {
        "Code": "CS8633",
        "Title": "Nullability in constraints for type parameter doesn’t match the constraints for type parameter in implicitly implemented interface method’.",
        "Link": ""
      },
      {
        "Code": "CS8634",
        "Title": "The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match 'class' constraint.",
        "Link": ""
      },
      {
        "Code": "CS8638",
        "Title": "Conditional access may produce a null value for a type parameter.",
        "Link": ""
      },
      {
        "Code": "CS8643",
        "Title": "Nullability of reference types in explicit interface specifier doesn’t match interface implemented by the type.",
        "Link": ""
      },
      {
        "Code": "CS8644",
        "Title": "Type does not implement interface member. Nullability of reference types in interface implemented by the base type doesn’t match.",
        "Link": ""
      },
      {
        "Code": "CS8645",
        "Title": "Interface is already listed in the interface list with different nullability of reference types.",
        "Link": ""
      },
      {
        "Code": "CS8653",
        "Title": "A default expression introduces a null value for a type parameter.",
        "Link": ""
      },
      {
        "Code": "CS8654",
        "Title": "A null literal introduces a null value for a type parameter.",
        "Link": ""
      },
      {
        "Code": "CS8655",
        "Title": "The switch expression does not handle some null inputs.",
        "Link": ""
      },
      {
        "Code": "CS8667",
        "Title": "Partial method declarations have inconsistent nullability in constraints for type parameter.",
        "Link": ""
      },
      {
        "Code": "CS8670",
        "Title": "Object or collection initializer implicitly dereferences possibly null member.",
        "Link": ""
      },
      {
        "Code": "CS8714",
        "Title": "The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match 'notnull' constraint.",
        "Link": ""
      },
      {
        "Code": "CS8762",
        "Title": "Parameter may not have a null value when exiting in some condition.",
        "Link": ""
      }
    ]
  },
  {
    "Name": "SecurityCodeScan.VS2019",
    "Rules": [
      {
        "Code": "SCS0001",
        "Title": "Command Injection",
        "Link": "https://security-code-scan.github.io#SCS0001"
      },
      {
        "Code": "SCS0002",
        "Title": "SQL Injection",
        "Link": "https://security-code-scan.github.io#SCS0002"
      },
      {
        "Code": "SCS0003",
        "Title": "XPath Injection",
        "Link": "https://security-code-scan.github.io#SCS0003"
      },
      {
        "Code": "SCS0007",
        "Title": "XML eXternal Entity Injection (XXE)",
        "Link": "https://security-code-scan.github.io#SCS0007"
      },
      {
        "Code": "SCS0018",
        "Title": "Path Traversal",
        "Link": "https://security-code-scan.github.io#SCS0018"
      },
      {
        "Code": "SCS0029",
        "Title": "Cross-Site Scripting (XSS)",
        "Link": "https://security-code-scan.github.io#SCS0029"
      },
      {
        "Code": "SCS0026",
        "Title": "LDAP Distinguished Name Injection",
        "Link": "https://security-code-scan.github.io#SCS0026"
      },
      {
        "Code": "SCS0031",
        "Title": "LDAP Filter Injection",
        "Link": "https://security-code-scan.github.io#SCS0031"
      },
      {
        "Code": "SCS0004",
        "Title": "Certificate Validation Disabled",
        "Link": "https://security-code-scan.github.io#SCS0004"
      },
      {
        "Code": "SCS0005",
        "Title": "Weak Random Number Generator",
        "Link": "https://security-code-scan.github.io#SCS0005"
      },
      {
        "Code": "SCS0006",
        "Title": "Weak hashing function",
        "Link": "https://security-code-scan.github.io#SCS0006"
      },
      {
        "Code": "SCS0010",
        "Title": "Weak cipher algorithm",
        "Link": "https://security-code-scan.github.io#SCS0010"
      },
      {
        "Code": "SCS0013",
        "Title": "Potential usage of weak CipherMode mode",
        "Link": "https://security-code-scan.github.io#SCS0013"
      },
      {
        "Code": "SCS0008",
        "Title": "Cookie Without SSL Flag",
        "Link": "https://security-code-scan.github.io#SCS0008"
      },
      {
        "Code": "SCS0009",
        "Title": "Cookie Without HttpOnly Flag",
        "Link": "https://security-code-scan.github.io#SCS0009"
      },
      {
        "Code": "SCS0023",
        "Title": "View State Not Encrypted",
        "Link": "https://security-code-scan.github.io#SCS0023"
      },
      {
        "Code": "SCS0024",
        "Title": "View State MAC Disabled",
        "Link": "https://security-code-scan.github.io#SCS0024"
      },
      {
        "Code": "SCS0017",
        "Title": "Request Validation Disabled (Attribute)",
        "Link": "https://security-code-scan.github.io#SCS0017"
      },
      {
        "Code": "SCS0021",
        "Title": "Request Validation Disabled (Configuration File)",
        "Link": "https://security-code-scan.github.io#SCS0021"
      },
      {
        "Code": "SCS0030",
        "Title": "Request validation is enabled only for pages (Configuration File)",
        "Link": "https://security-code-scan.github.io#SCS0030"
      },
      {
        "Code": "SCS0015",
        "Title": "Hardcoded Password",
        "Link": "https://security-code-scan.github.io#SCS0015"
      },
      {
        "Code": "SCS0034",
        "Title": "Password RequiredLength Not Set",
        "Link": "https://security-code-scan.github.io#SCS0034"
      },
      {
        "Code": "SCS0032",
        "Title": "Password RequiredLength Too Small",
        "Link": "https://security-code-scan.github.io#SCS0032"
      },
      {
        "Code": "SCS0033",
        "Title": "Password Complexity",
        "Link": "https://security-code-scan.github.io#SCS0033"
      },
      {
        "Code": "SCS0011",
        "Title": "Unsafe XSLT setting used",
        "Link": "https://security-code-scan.github.io#SCS0011"
      },
      {
        "Code": "SCS0012",
        "Title": "Controller method is potentially vulnerable to authorization bypass",
        "Link": "https://security-code-scan.github.io#SCS0012"
      },
      {
        "Code": "SCS0016",
        "Title": "Cross-Site Request Forgery (CSRF)",
        "Link": "https://security-code-scan.github.io#SCS0016"
      },
      {
        "Code": "SCS0019",
        "Title": "OutputCache Conflict",
        "Link": "https://security-code-scan.github.io#SCS0019"
      },
      {
        "Code": "SCS0022",
        "Title": "Event Validation Disabled",
        "Link": "https://security-code-scan.github.io#SCS0022"
      },
      {
        "Code": "SCS0027",
        "Title": "Open Redirect",
        "Link": "https://security-code-scan.github.io#SCS0027"
      },
      {
        "Code": "SCS0028",
        "Title": "Insecure Deserialization",
        "Link": "https://security-code-scan.github.io#SCS0028"
      }
    ]
  },
  {
    "Name": "StyleCop.Analyzers",
    "Rules": [
      {
        "Code": "SA0001",
        "Title": "Xml comment analysis disabled",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0001.md",
        "Category": "Special",
        "Description": "All diagnostics of XML documentation comments has been disabled due to the current project configuration."
      },
      {
        "Code": "SA0002",
        "Title": "Invalid settings file",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0002.md",
        "Category": "Special",
        "Description": "The stylecop.json settings file could not be loaded due to a deserialization error."
      },
      {
        "Code": "SA1000",
        "Title": "Keywords must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1000.md",
        "Category": "Spacing",
        "Description": "The spacing around a C# keyword is incorrect."
      },
      {
        "Code": "SA1001",
        "Title": "Commas must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1001.md",
        "Category": "Spacing",
        "Description": "The spacing around a comma is incorrect, within a C# code file."
      },
      {
        "Code": "SA1002",
        "Title": "Semicolons must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1002.md",
        "Category": "Spacing",
        "Description": "The spacing around a semicolon is incorrect, within a C# code file."
      },
      {
        "Code": "SA1003",
        "Title": "Symbols must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1003.md",
        "Category": "Spacing",
        "Description": "The spacing around an operator symbol is incorrect, within a C# code file."
      },
      {
        "Code": "SA1004",
        "Title": "Documentation lines must begin with single space",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1004.md",
        "Category": "Spacing",
        "Description": "A line within a documentation header above a C# element does not begin with a single space."
      },
      {
        "Code": "SA1005",
        "Title": "Single line comments must begin with single space",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1005.md",
        "Category": "Spacing",
        "Description": "A single-line comment within a C# code file does not begin with a single space."
      },
      {
        "Code": "SA1006",
        "Title": "Preprocessor keywords must not be preceded by space",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1006.md",
        "Category": "Spacing",
        "Description": "A C# preprocessor-type keyword is preceded by space."
      },
      {
        "Code": "SA1007",
        "Title": "Operator keyword must be followed by space",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1007.md",
        "Category": "Spacing",
        "Description": "The operator keyword within a C# operator overload method is not followed by any whitespace."
      },
      {
        "Code": "SA1008",
        "Title": "Opening parenthesis must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1008.md",
        "Category": "Spacing",
        "Description": "An opening parenthesis within a C# statement is not spaced correctly."
      },
      {
        "Code": "SA1009",
        "Title": "Closing parenthesis must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1009.md",
        "Category": "Spacing",
        "Description": "A closing parenthesis within a C# statement is not spaced correctly."
      },
      {
        "Code": "SA1010",
        "Title": "Opening square brackets must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1010.md",
        "Category": "Spacing",
        "Description": "An opening square bracket within a C# statement is not spaced correctly."
      },
      {
        "Code": "SA1011",
        "Title": "Closing square brackets must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1011.md",
        "Category": "Spacing",
        "Description": "A closing square bracket within a C# statement is not spaced correctly."
      },
      {
        "Code": "SA1012",
        "Title": "Opening braces must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1012.md",
        "Category": "Spacing",
        "Description": "An opening brace within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1013",
        "Title": "Closing braces must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1013.md",
        "Category": "Spacing",
        "Description": "A closing brace within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1014",
        "Title": "Opening generic brackets must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1014.md",
        "Category": "Spacing",
        "Description": "An opening generic bracket within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1015",
        "Title": "Closing generic brackets must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1015.md",
        "Category": "Spacing",
        "Description": "A closing generic bracket within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1016",
        "Title": "Opening attribute brackets must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1016.md",
        "Category": "Spacing",
        "Description": "An opening attribute bracket within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1017",
        "Title": "Closing attribute brackets must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1017.md",
        "Category": "Spacing",
        "Description": "A closing attribute bracket within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1018",
        "Title": "Nullable type symbols must not be preceded by space",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1018.md",
        "Category": "Spacing",
        "Description": "A nullable type symbol within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1019",
        "Title": "Member access symbols must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1019.md",
        "Category": "Spacing",
        "Description": "The spacing around a member access symbol is incorrect, within a C# code file."
      },
      {
        "Code": "SA1020",
        "Title": "Increment decrement symbols must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1020.md",
        "Category": "Spacing",
        "Description": "An increment or decrement symbol within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1021",
        "Title": "Negative signs must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1021.md",
        "Category": "Spacing",
        "Description": "A negative sign within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1022",
        "Title": "Positive signs must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1022.md",
        "Category": "Spacing",
        "Description": "A positive sign within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1023",
        "Title": "Dereference and access of must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1023.md",
        "Category": "Spacing",
        "Description": "A dereference symbol or an access-of symbol within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1024",
        "Title": "Colons must be spaced correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1024.md",
        "Category": "Spacing",
        "Description": "A colon within a C# element is not spaced correctly."
      },
      {
        "Code": "SA1025",
        "Title": "Code must not contain multiple whitespace in ARow",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1025.md",
        "Category": "Spacing",
        "Description": "The code contains multiple whitespace characters in a row."
      },
      {
        "Code": "SA1026",
        "Title": "Code must not contain space after new keyword in implicitly typed array allocation",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1026.md",
        "Category": "Spacing",
        "Description": "An implicitly typed new array allocation within a C# code file is not spaced correctly."
      },
      {
        "Code": "SA1027",
        "Title": "Use tabs correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1027.md",
        "Category": "Spacing",
        "Description": "The code contains a tab or space character which is not consistent with the current project settings."
      },
      {
        "Code": "SA1028",
        "Title": "Code must not contain trailing whitespace",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1028.md",
        "Category": "Spacing",
        "Description": "A line of code ends with a space, tab, or other whitespace characters before the end of line character(s)."
      },
      {
        "Code": "SA1100",
        "Title": "Do not prefix calls with base unless local implementation exists",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1100.md",
        "Category": "Readability",
        "Description": "A call to a member from an inherited class begins with base., and the local class does not contain an override or implementation of the member."
      },
      {
        "Code": "SA1101",
        "Title": "Prefix local calls with this",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1101.md",
        "Category": "Readability",
        "Description": "A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file."
      },
      {
        "Code": "SA1102",
        "Title": "Query clauses",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1102.md",
        "Category": "Readability",
        "Description": "A C# query clause does not begin on the same line as the previous clause, or on the next line."
      },
      {
        "Code": "SA1103",
        "Title": "Query clauses",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1103.md",
        "Category": "Readability",
        "Description": "The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line."
      },
      {
        "Code": "SA1104",
        "Title": "Query clauses",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1104.md",
        "Category": "Readability",
        "Description": "A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines."
      },
      {
        "Code": "SA1105",
        "Title": "Query clauses",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1105.md",
        "Category": "Readability",
        "Description": "A clause within a C# query expression spans across multiple lines, and does not begin on its own line."
      },
      {
        "Code": "SA1106",
        "Title": "Code must not contain empty statements",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1106.md",
        "Category": "Readability",
        "Description": "The C# code contains an extra semicolon."
      },
      {
        "Code": "SA1107",
        "Title": "Code must not contain multiple statements on one line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1107.md",
        "Category": "Readability",
        "Description": "The C# code contains more than one statement on a single line."
      },
      {
        "Code": "SA1108",
        "Title": "Block statements must not contain embedded comments",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1108.md",
        "Category": "Readability",
        "Description": "A C# statement contains a comment between the declaration of the statement and the opening brace of the statement."
      },
      {
        "Code": "SA1109",
        "Title": "Block statements must not contain embedded regions",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1109.md",
        "Category": "Readability",
        "Description": "A C# statement contains a region tag between the declaration of the statement and the opening brace of the statement."
      },
      {
        "Code": "SA1110",
        "Title": "Opening parenthesis must be on declaration line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1110.md",
        "Category": "Readability",
        "Description": "The opening parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the method or indexer name."
      },
      {
        "Code": "SA1111",
        "Title": "Closing parenthesis must be on line of last parameter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1111.md",
        "Category": "Readability",
        "Description": "The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the last parameter."
      },
      {
        "Code": "SA1112",
        "Title": "Closing parenthesis must be on line of opening parenthesis",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1112.md",
        "Category": "Readability",
        "Description": "The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters."
      },
      {
        "Code": "SA1113",
        "Title": "Comma must be on same line as previous parameter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1113.md",
        "Category": "Readability",
        "Description": "A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter."
      },
      {
        "Code": "SA1114",
        "Title": "Parameter list must follow declaration",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1114.md",
        "Category": "Readability",
        "Description": "The start of the parameter list for a method or indexer call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket."
      },
      {
        "Code": "SA1115",
        "Title": "Parameter must follow comma",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1115.md",
        "Category": "Readability",
        "Description": "A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line."
      },
      {
        "Code": "SA1116",
        "Title": "Split parameters must start on line after declaration",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1116.md",
        "Category": "Readability",
        "Description": "The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket."
      },
      {
        "Code": "SA1117",
        "Title": "Parameters must be on same line or separate lines",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1117.md",
        "Category": "Readability",
        "Description": "The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line."
      },
      {
        "Code": "SA1118",
        "Title": "Parameter must not span multiple lines",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1118.md",
        "Category": "Readability",
        "Description": "A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines."
      },
      {
        "Code": "SA1120",
        "Title": "Comments must contain text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1120.md",
        "Category": "Readability",
        "Description": "The C# comment does not contain any comment text."
      },
      {
        "Code": "SA1121",
        "Title": "Use built in type alias",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1121.md",
        "Category": "Readability",
        "Description": "The code uses one of the basic C# types, but does not use the built-in alias for the type."
      },
      {
        "Code": "SA1122",
        "Title": "Use string empty for empty strings",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1122.md",
        "Category": "Readability",
        "Description": "The C# code includes an empty string, written as \"\"."
      },
      {
        "Code": "SA1123",
        "Title": "Do not place regions within elements",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1123.md",
        "Category": "Readability",
        "Description": "The C# code contains a region within the body of a code element."
      },
      {
        "Code": "SA1124",
        "Title": "Do not use regions",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1124.md",
        "Category": "Readability",
        "Description": "The C# code contains a region."
      },
      {
        "Code": "SA1125",
        "Title": "Use shorthand for nullable types",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1125.md",
        "Category": "Readability",
        "Description": "The Nullable type has been defined not using the C# shorthand."
      },
      {
        "Code": "SA1126",
        "Title": "Prefix calls correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1126.md",
        "Category": "Readability",
        "Description": "A call to a member is not prefixed with the 'this.', 'base.', 'object.' or 'typename.' prefix to indicate the intended method call, within a C# code file."
      },
      {
        "Code": "SA1127",
        "Title": "Generic type constraints must be on own line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1127.md",
        "Category": "Readability",
        "Description": "A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file."
      },
      {
        "Code": "SA1128",
        "Title": "Constructor initializer must be on own line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1128.md",
        "Category": "Readability",
        "Description": "A constructor initializer is on the same line as the constructor declaration, within a C# code file."
      },
      {
        "Code": "SA1129",
        "Title": "Do not use default value type constructor",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1129.md",
        "Category": "Readability",
        "Description": "A value type was constructed using the syntax new T()."
      },
      {
        "Code": "SA1130",
        "Title": "Use lambda syntax",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1130.md",
        "Category": "Readability",
        "Description": "An anonymous method was declared using the form delegate (parameters) { }, when a lambda expression would provide equivalent behavior with the syntax (parameters) =&gt; { }."
      },
      {
        "Code": "SA1131",
        "Title": "Use readable conditions",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1131.md",
        "Category": "Readability",
        "Description": "A comparison was made between a variable and a literal or constant value, and the variable appeared on the right-hand side of the expression."
      },
      {
        "Code": "SA1132",
        "Title": "Do not combine fields",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1132.md",
        "Category": "Readability",
        "Description": "Two or more fields were declared in the same field declaration syntax."
      },
      {
        "Code": "SA1133",
        "Title": "Do not combine attributes",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1133.md",
        "Category": "Readability",
        "Description": "Two or more attributes appeared within the same set of square brackets."
      },
      {
        "Code": "SA1134",
        "Title": "Attributes must not share line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1134.md",
        "Category": "Readability",
        "Description": "An attribute is placed on the same line of code as another attribute or element."
      },
      {
        "Code": "SA1135",
        "Title": "Using directives must be qualified",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1135.md",
        "Category": "Readability",
        "Description": "A using directive is not qualified."
      },
      {
        "Code": "SA1136",
        "Title": "Enum values should be on separate lines",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1136.md",
        "Category": "Readability",
        "Description": "Multiple enum values are placed on the same line of code."
      },
      {
        "Code": "SA1137",
        "Title": "Elements should have the same indentation",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1137.md",
        "Category": "Readability",
        "Description": "Two sibling elements which each start on their own line have different levels of indentation."
      },
      {
        "Code": "SA1139",
        "Title": "Use literals suffix notation instead of casting",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1139.md",
        "Category": "Readability",
        "Description": "Use literal suffix notation instead of casting."
      },
      {
        "Code": "SA1141",
        "Title": "Use tuple syntax",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1141.md",
        "Category": "Readability",
        "Description": "Use tuple syntax instead of the underlying ValueTuple implementation type."
      },
      {
        "Code": "SA1142",
        "Title": "Refer to tuple elements by name",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1142.md",
        "Category": "Readability",
        "Description": "An element of a tuple was referenced by its metadata name when an element name is available."
      },
      {
        "Code": "SA1200",
        "Title": "Using directives must be placed correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1200.md",
        "Category": "Ordering",
        "Description": "A C# using directive is placed outside of a namespace element."
      },
      {
        "Code": "SA1201",
        "Title": "Elements must appear in the correct order",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1201.md",
        "Category": "Ordering",
        "Description": "An element within a C# code file is out of order in relation to the other elements in the code."
      },
      {
        "Code": "SA1202",
        "Title": "Elements must be ordered by access",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1202.md",
        "Category": "Ordering",
        "Description": "An element within a C# code file is out of order within regard to access level, in relation to other elements in the code."
      },
      {
        "Code": "SA1203",
        "Title": "Constants must appear before fields",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1203.md",
        "Category": "Ordering",
        "Description": "A constant field is placed beneath a non-constant field."
      },
      {
        "Code": "SA1204",
        "Title": "Static elements must appear before instance elements",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1204.md",
        "Category": "Ordering",
        "Description": "A static element is positioned beneath an instance element of the same type."
      },
      {
        "Code": "SA1205",
        "Title": "Partial elements must declare access",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1205.md",
        "Category": "Ordering",
        "Description": "The partial element does not have an access modifier defined."
      },
      {
        "Code": "SA1206",
        "Title": "Declaration keywords must follow order",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1206.md",
        "Category": "Ordering",
        "Description": "The keywords within the declaration of an element do not follow a standard ordering scheme."
      },
      {
        "Code": "SA1207",
        "Title": "Protected must come before internal",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1207.md",
        "Category": "Ordering",
        "Description": "The keyword protected is positioned after the keyword internal within the declaration of a protected internal C# element."
      },
      {
        "Code": "SA1208",
        "Title": "System using directives must be placed before other using directives",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1208.md",
        "Category": "Ordering",
        "Description": "A using directive which declares a member of the System namespace appears after a using directive which declares a member of a different namespace, within a C# code file."
      },
      {
        "Code": "SA1209",
        "Title": "Using alias directives must be placed after other using directives",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1209.md",
        "Category": "Ordering",
        "Description": "A using-alias directive is positioned before a regular using directive."
      },
      {
        "Code": "SA1210",
        "Title": "Using directives must be ordered alphabetically by namespace",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1210.md",
        "Category": "Ordering",
        "Description": "The using directives within a C# code file are not sorted alphabetically by namespace."
      },
      {
        "Code": "SA1211",
        "Title": "Using alias directives must be ordered alphabetically by alias name",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1211.md",
        "Category": "Ordering",
        "Description": "The using-alias directives within a C# code file are not sorted alphabetically by alias name."
      },
      {
        "Code": "SA1212",
        "Title": "Property accessors must follow order",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1212.md",
        "Category": "Ordering",
        "Description": "A get accessor appears after a set accessor within a property or indexer."
      },
      {
        "Code": "SA1213",
        "Title": "Event accessors must follow order",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1213.md",
        "Category": "Ordering",
        "Description": "An add accessor appears after a remove accessor within an event."
      },
      {
        "Code": "SA1214",
        "Title": "Readonly elements must appear before non readonly elements",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1214.md",
        "Category": "Ordering",
        "Description": "A readonly field is positioned beneath a non-readonly field."
      },
      {
        "Code": "SA1215",
        "Title": "Instance readonly elements must appear before instance non readonly elements",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1215.md",
        "Category": "Ordering",
        "Description": "An instance readonly element is positioned beneath an instance non-readonly element of the same type."
      },
      {
        "Code": "SA1216",
        "Title": "Using static directives must be placed at the correct location",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1216.md",
        "Category": "Ordering",
        "Description": "A using static directive is positioned at the wrong location (before a regular using directive or after an alias using directive)."
      },
      {
        "Code": "SA1217",
        "Title": "Using static directives must be ordered alphabetically",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1217.md",
        "Category": "Ordering",
        "Description": "The using static directives within a C# code file are not sorted alphabetically by full type name."
      },
      {
        "Code": "SA1300",
        "Title": "Element must begin with upper case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md",
        "Category": "Naming",
        "Description": "The name of a C# element does not begin with an upper-case letter."
      },
      {
        "Code": "SA1301",
        "Title": "Element must begin with lower case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1301.md",
        "Category": "Naming",
        "Description": "There are currently no situations in which this rule will fire."
      },
      {
        "Code": "SA1302",
        "Title": "Interface names must begin with I",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1302.md",
        "Category": "Naming",
        "Description": "The name of a C# interface does not begin with the capital letter I."
      },
      {
        "Code": "SA1303",
        "Title": "Const field names must begin with upper case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md",
        "Category": "Naming",
        "Description": "The name of a constant C# field should begin with an upper-case letter."
      },
      {
        "Code": "SA1304",
        "Title": "Non private readonly fields must begin with upper case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1304.md",
        "Category": "Naming",
        "Description": "The name of a non-private readonly C# field should being with an upper-case letter."
      },
      {
        "Code": "SA1305",
        "Title": "Field names must not use hungarian notation",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1305.md",
        "Category": "Naming",
        "Description": "The name of a field or variable in C# uses Hungarian notation."
      },
      {
        "Code": "SA1306",
        "Title": "Field names must begin with lower case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md",
        "Category": "Naming",
        "Description": "The name of a field in C# does not begin with a lower-case letter."
      },
      {
        "Code": "SA1307",
        "Title": "Accessible fields must begin with upper case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1307.md",
        "Category": "Naming",
        "Description": "The name of a public or internal field in C# does not begin with an upper-case letter."
      },
      {
        "Code": "SA1308",
        "Title": "Variable names must not be prefixed",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1308.md",
        "Category": "Naming",
        "Description": "A field name in C# is prefixed with m_ or s_."
      },
      {
        "Code": "SA1309",
        "Title": "Field names must not begin with underscore",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1309.md",
        "Category": "Naming",
        "Description": "A field name in C# begins with an underscore."
      },
      {
        "Code": "SA1310",
        "Title": "Field names must not contain underscore",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1310.md",
        "Category": "Naming",
        "Description": "A field name in C# contains an underscore."
      },
      {
        "Code": "SA1311",
        "Title": "Static readonly fields must begin with upper case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md",
        "Category": "Naming",
        "Description": "The name of a static readonly field does not begin with an upper-case letter."
      },
      {
        "Code": "SA1312",
        "Title": "Variable names must begin with lower case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md",
        "Category": "Naming",
        "Description": "The name of a variable in C# does not begin with a lower-case letter."
      },
      {
        "Code": "SA1313",
        "Title": "Parameter names must begin with lower case letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1313.md",
        "Category": "Naming",
        "Description": "The name of a parameter in C# does not begin with a lower-case letter."
      },
      {
        "Code": "SA1314",
        "Title": "Type parameter names must begin with T",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1314.md",
        "Category": "Naming",
        "Description": "The name of a C# type parameter does not begin with the capital letter T."
      },
      {
        "Code": "SA1316",
        "Title": "Tuple element names should use correct casing",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1316.md",
        "Category": "Naming",
        "Description": "Element names within a tuple type should have the correct casing."
      },
      {
        "Code": "SA1119",
        "Title": "Statement must not use unnecessary parenthesis",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1119.md",
        "Category": "Maintainability",
        "Description": "A C# statement contains parenthesis which are unnecessary and should be removed."
      },
      {
        "Code": "SA1400",
        "Title": "Access modifier must be declared",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1400.md",
        "Category": "Maintainability",
        "Description": "The access modifier for a C# element has not been explicitly defined."
      },
      {
        "Code": "SA1401",
        "Title": "Fields must be private",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md",
        "Category": "Maintainability",
        "Description": "A field within a C# class has an access modifier other than private."
      },
      {
        "Code": "SA1402",
        "Title": "File may only contain ASingle type",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1402.md",
        "Category": "Maintainability",
        "Description": "A C# code file contains more than one unique type."
      },
      {
        "Code": "SA1403",
        "Title": "File may only contain ASingle namespace",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1403.md",
        "Category": "Maintainability",
        "Description": "A C# code file contains more than one namespace."
      },
      {
        "Code": "SA1404",
        "Title": "Code analysis suppression must have justification",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1404.md",
        "Category": "Maintainability",
        "Description": "A Code Analysis SuppressMessage attribute does not include a justification."
      },
      {
        "Code": "SA1405",
        "Title": "Debug assert must provide message text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1405.md",
        "Category": "Maintainability",
        "Description": "A call to Debug.Assert in C# code does not include a descriptive message."
      },
      {
        "Code": "SA1406",
        "Title": "Debug fail must provide message text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1406.md",
        "Category": "Maintainability",
        "Description": "A call to Debug.Fail in C# code does not include a descriptive message."
      },
      {
        "Code": "SA1407",
        "Title": "Arithmetic expressions must declare precedence",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1407.md",
        "Category": "Maintainability",
        "Description": "A C# statement contains a complex arithmetic expression which omits parenthesis around operators."
      },
      {
        "Code": "SA1408",
        "Title": "Conditional expressions must declare precedence",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1408.md",
        "Category": "Maintainability",
        "Description": "A C# statement contains a complex conditional expression which omits parenthesis around operators."
      },
      {
        "Code": "SA1409",
        "Title": "Remove unnecessary code",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1409.md",
        "Category": "Maintainability",
        "Description": "A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code."
      },
      {
        "Code": "SA1410",
        "Title": "Remove delegate parenthesis when possible",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1410.md",
        "Category": "Maintainability",
        "Description": "A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis."
      },
      {
        "Code": "SA1411",
        "Title": "Attribute constructor must not use unnecessary parenthesis",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1411.md",
        "Category": "Maintainability",
        "Description": "An attribute declaration does not contain any parameters, yet it still includes parenthesis."
      },
      {
        "Code": "SA1412",
        "Title": "Store files as utf8",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1412.md",
        "Category": "Maintainability",
        "Description": "The encoding of the file is not UTF-8 with byte order mark."
      },
      {
        "Code": "SA1413",
        "Title": "Use trailing commas in multi line initializers",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1413.md",
        "Category": "Maintainability",
        "Description": "A multi-line initializer should use a comma on the last item."
      },
      {
        "Code": "SA1414",
        "Title": "Tuple types in signatures should have element names",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1414.md",
        "Category": "Maintainability",
        "Description": "Tuple types appearing in member declarations should have explicitly named tuple elements."
      },
      {
        "Code": "SA1500",
        "Title": "Braces for multi line statements must not share line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1500.md",
        "Category": "Layout",
        "Description": "The opening or closing brace within a C# statement, element, or expression is not placed on its own line."
      },
      {
        "Code": "SA1501",
        "Title": "Statement must not be on single line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1501.md",
        "Category": "Layout",
        "Description": "A C# statement containing opening and closing braces is written completely on a single line."
      },
      {
        "Code": "SA1502",
        "Title": "Element must not be on single line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1502.md",
        "Category": "Layout",
        "Description": "A C# element containing opening and closing braces is written completely on a single line."
      },
      {
        "Code": "SA1503",
        "Title": "Braces must not be omitted",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1503.md",
        "Category": "Layout",
        "Description": "The opening and closing braces for a C# statement have been omitted."
      },
      {
        "Code": "SA1504",
        "Title": "All accessors must be single line or multi line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1504.md",
        "Category": "Layout",
        "Description": "Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines."
      },
      {
        "Code": "SA1505",
        "Title": "Opening braces must not be followed by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1505.md",
        "Category": "Layout",
        "Description": "An opening brace within a C# element, statement, or expression is followed by a blank line."
      },
      {
        "Code": "SA1506",
        "Title": "Element documentation headers must not be followed by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1506.md",
        "Category": "Layout",
        "Description": "An element documentation header above a C# element is followed by a blank line."
      },
      {
        "Code": "SA1507",
        "Title": "Code must not contain multiple blank lines in ARow",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1507.md",
        "Category": "Layout",
        "Description": "The C# code contains multiple blank lines in a row."
      },
      {
        "Code": "SA1508",
        "Title": "Closing braces must not be preceded by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1508.md",
        "Category": "Layout",
        "Description": "A closing brace within a C# element, statement, or expression is preceded by a blank line."
      },
      {
        "Code": "SA1509",
        "Title": "Opening braces must not be preceded by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1509.md",
        "Category": "Layout",
        "Description": "An opening brace within a C# element, statement, or expression is preceded by a blank line."
      },
      {
        "Code": "SA1510",
        "Title": "Chained statement blocks must not be preceded by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1510.md",
        "Category": "Layout",
        "Description": "Chained C# statements are separated by a blank line."
      },
      {
        "Code": "SA1511",
        "Title": "While do footer must not be preceded by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1511.md",
        "Category": "Layout",
        "Description": "The while footer at the bottom of a do-while statement is separated from the statement by a blank line."
      },
      {
        "Code": "SA1512",
        "Title": "Single line comments must not be followed by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1512.md",
        "Category": "Layout",
        "Description": "A single-line comment within C# code is followed by a blank line."
      },
      {
        "Code": "SA1513",
        "Title": "Closing brace must be followed by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1513.md",
        "Category": "Layout",
        "Description": "A closing brace within a C# element, statement, or expression is not followed by a blank line."
      },
      {
        "Code": "SA1514",
        "Title": "Element documentation header must be preceded by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1514.md",
        "Category": "Layout",
        "Description": "An element documentation header above a C# element is not preceded by a blank line."
      },
      {
        "Code": "SA1515",
        "Title": "Single line comment must be preceded by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1515.md",
        "Category": "Layout",
        "Description": "A single-line comment within C# code is not preceded by a blank line."
      },
      {
        "Code": "SA1516",
        "Title": "Elements must be separated by blank line",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1516.md",
        "Category": "Layout",
        "Description": "Adjacent C# elements are not separated by a blank line."
      },
      {
        "Code": "SA1517",
        "Title": "Code must not contain blank lines at start of file",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1517.md",
        "Category": "Layout",
        "Description": "The code file has blank lines at the start."
      },
      {
        "Code": "SA1518",
        "Title": "Use line endings correctly at end of file",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1518.md",
        "Category": "Layout",
        "Description": "The line endings at the end of a file do not match the settings for the project."
      },
      {
        "Code": "SA1519",
        "Title": "Braces must not be omitted from multi line child statement",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1519.md",
        "Category": "Layout",
        "Description": "The opening and closing braces for a multi-line C# statement have been omitted."
      },
      {
        "Code": "SA1520",
        "Title": "Use braces consistently",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1520.md",
        "Category": "Layout",
        "Description": "The opening and closing braces of a chained if/else if/else construct were included for some clauses, but omitted for others."
      },
      {
        "Code": "SA1600",
        "Title": "Elements must be documented",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1600.md",
        "Category": "Documentation",
        "Description": "A C# code element is missing a documentation header."
      },
      {
        "Code": "SA1601",
        "Title": "Partial elements must be documented",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1601.md",
        "Category": "Documentation",
        "Description": "A C# partial element is missing a documentation header."
      },
      {
        "Code": "SA1602",
        "Title": "Enumeration items must be documented",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1602.md",
        "Category": "Documentation",
        "Description": "An item within a C# enumeration is missing an Xml documentation header."
      },
      {
        "Code": "SA1603",
        "Title": "Documentation must contain valid xml",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1603.md",
        "Category": "Documentation",
        "Description": "The Xml within a C# element's document header is badly formed."
      },
      {
        "Code": "SA1604",
        "Title": "Element documentation must have summary",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1604.md",
        "Category": "Documentation",
        "Description": "The Xml header documentation for a C# element is missing a &lt;summary&gt; tag."
      },
      {
        "Code": "SA1605",
        "Title": "Partial element documentation must have summary",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1605.md",
        "Category": "Documentation",
        "Description": "The &lt;summary&gt; or &lt;content&gt; tag within the documentation header for a C# code element is missing or empty."
      },
      {
        "Code": "SA1606",
        "Title": "Element documentation must have summary text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1606.md",
        "Category": "Documentation",
        "Description": "The &lt;summary&gt; tag within the documentation header for a C# code element is empty."
      },
      {
        "Code": "SA1607",
        "Title": "Partial element documentation must have summary text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1607.md",
        "Category": "Documentation",
        "Description": "The &lt;summary&gt; or &lt;content&gt; tag within the documentation header for a C# code element is empty."
      },
      {
        "Code": "SA1608",
        "Title": "Element documentation must not have default summary",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1608.md",
        "Category": "Documentation",
        "Description": "The &lt;summary&gt; tag within an element's Xml header documentation contains the default text generated by Visual Studio during the creation of the element."
      },
      {
        "Code": "SA1609",
        "Title": "Property documentation must have value",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1609.md",
        "Category": "Documentation",
        "Description": "The Xml header documentation for a C# property does not contain a &lt;value&gt; tag."
      },
      {
        "Code": "SA1610",
        "Title": "Property documentation must have value text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1610.md",
        "Category": "Documentation",
        "Description": "The Xml header documentation for a C# property contains an empty &lt;value&gt; tag."
      },
      {
        "Code": "SA1611",
        "Title": "Element parameters must be documented",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1611.md",
        "Category": "Documentation",
        "Description": "A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters."
      },
      {
        "Code": "SA1612",
        "Title": "Element parameter documentation must match element parameters",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1612.md",
        "Category": "Documentation",
        "Description": "The documentation describing the parameters to a C# method, constructor, delegate or indexer element does not match the actual parameters on the element."
      },
      {
        "Code": "SA1613",
        "Title": "Element parameter documentation must declare parameter name",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1613.md",
        "Category": "Documentation",
        "Description": "A &lt;param&gt; tag within a C# element's documentation header is missing a name attribute containing the name of the parameter."
      },
      {
        "Code": "SA1614",
        "Title": "Element parameter documentation must have text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1614.md",
        "Category": "Documentation",
        "Description": "A &lt;param&gt; tag within a C# element's documentation header is empty."
      },
      {
        "Code": "SA1615",
        "Title": "Element return value must be documented",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1615.md",
        "Category": "Documentation",
        "Description": "A C# element is missing documentation for its return value."
      },
      {
        "Code": "SA1616",
        "Title": "Element return value documentation must have text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1616.md",
        "Category": "Documentation",
        "Description": "The &lt;returns&gt; tag within a C# element's documentation header is empty."
      },
      {
        "Code": "SA1617",
        "Title": "Void return value must not be documented",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1617.md",
        "Category": "Documentation",
        "Description": "A C# code element does not contain a return value, or returns void, but the documentation header for the element contains a &lt;returns&gt; tag."
      },
      {
        "Code": "SA1618",
        "Title": "Generic type parameters must be documented",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1618.md",
        "Category": "Documentation",
        "Description": "A generic C# element is missing documentation for one or more of its generic type parameters."
      },
      {
        "Code": "SA1619",
        "Title": "Generic type parameters must be documented partial class",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1619.md",
        "Category": "Documentation",
        "Description": "A generic, partial C# element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a &lt;summary&gt; tag."
      },
      {
        "Code": "SA1620",
        "Title": "Generic type parameter documentation must match type parameters",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1620.md",
        "Category": "Documentation",
        "Description": "The &lt;typeparam&gt; tags within the Xml header documentation for a generic C# element do not match the generic type parameters on the element."
      },
      {
        "Code": "SA1621",
        "Title": "Generic type parameter documentation must declare parameter name",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1621.md",
        "Category": "Documentation",
        "Description": "A &lt;typeparam&gt; tag within the Xml header documentation for a generic C# element is missing a name attribute, or contains an empty name attribute."
      },
      {
        "Code": "SA1622",
        "Title": "Generic type parameter documentation must have text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1622.md",
        "Category": "Documentation",
        "Description": "A &lt;typeparam&gt; tag within the Xml header documentation for a generic C# element is empty."
      },
      {
        "Code": "SA1623",
        "Title": "Property summary documentation must match accessors",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1623.md",
        "Category": "Documentation",
        "Description": "The documentation text within a C# property's &lt;summary&gt; tag does not match the accessors within the property."
      },
      {
        "Code": "SA1624",
        "Title": "Property summary documentation must omit set accessor with restricted access",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1624.md",
        "Category": "Documentation",
        "Description": "The documentation text within a C# property's &lt;summary&gt; tag takes into account all of the accessors within the property, but one of the accessors has limited access."
      },
      {
        "Code": "SA1625",
        "Title": "Element documentation must not be copied and pasted",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1625.md",
        "Category": "Documentation",
        "Description": "The Xml documentation for a C# element contains two or more identical entries, indicating that the documentation has been copied and pasted."
      },
      {
        "Code": "SA1626",
        "Title": "Single line comments must not use documentation style slashes",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1626.md",
        "Category": "Documentation",
        "Description": "The C# code contains a single-line comment which begins with three forward slashes in a row."
      },
      {
        "Code": "SA1627",
        "Title": "Documentation text must not be empty",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1627.md",
        "Category": "Documentation",
        "Description": "The Xml header documentation for a C# code element contains an empty tag."
      },
      {
        "Code": "SA1628",
        "Title": "Documentation text must begin with ACapital letter",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1628.md",
        "Category": "Documentation",
        "Description": "A section of the Xml header documentation for a C# element does not begin with a capital letter."
      },
      {
        "Code": "SA1629",
        "Title": "Documentation text must end with APeriod",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1629.md",
        "Category": "Documentation",
        "Description": "A section of the Xml header documentation for a C# element does not end with a period (also known as a full stop)."
      },
      {
        "Code": "SA1630",
        "Title": "Documentation text must contain whitespace",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1630.md",
        "Category": "Documentation",
        "Description": "A section of the Xml header documentation for a C# element does not contain any whitespace between words."
      },
      {
        "Code": "SA1631",
        "Title": "Documentation must meet character percentage",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1631.md",
        "Category": "Documentation",
        "Description": "A section of the Xml header documentation for a C# element does not contain enough alphabetic characters."
      },
      {
        "Code": "SA1632",
        "Title": "Documentation text must meet minimum character length",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1632.md",
        "Category": "Documentation",
        "Description": "From StyleCop 4.5 this rule is disabled by default."
      },
      {
        "Code": "SA1633",
        "Title": "File must have header",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1633.md",
        "Category": "Documentation",
        "Description": "A C# code file is missing a standard file header."
      },
      {
        "Code": "SA1634",
        "Title": "File header must show copyright",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1634.md",
        "Category": "Documentation",
        "Description": "The file header at the top of a C# code file is missing a copyright tag."
      },
      {
        "Code": "SA1635",
        "Title": "File header must have copyright text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1635.md",
        "Category": "Documentation",
        "Description": "The file header at the top of a C# code file is missing copyright text."
      },
      {
        "Code": "SA1636",
        "Title": "File header copyright text must match",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1636.md",
        "Category": "Documentation",
        "Description": "The file header at the top of a C# code file does not contain the appropriate copyright text."
      },
      {
        "Code": "SA1637",
        "Title": "File header must contain file name",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1637.md",
        "Category": "Documentation",
        "Description": "The file header at the top of a C# code file is missing the file name."
      },
      {
        "Code": "SA1638",
        "Title": "File header file name documentation must match file name",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1638.md",
        "Category": "Documentation",
        "Description": "The file tag within the file header at the top of a C# code file does not contain the name of the file."
      },
      {
        "Code": "SA1639",
        "Title": "File header must have summary",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1639.md",
        "Category": "Documentation",
        "Description": "The file header at the top of a C# code file does not contain a filled-in summary tag."
      },
      {
        "Code": "SA1640",
        "Title": "File header must have valid company text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1640.md",
        "Category": "Documentation",
        "Description": "The file header at the top of a C# code file does not contain company name text."
      },
      {
        "Code": "SA1641",
        "Title": "File header company name text must match",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1641.md",
        "Category": "Documentation",
        "Description": "The file header at the top of a C# code file does not contain the appropriate company name text."
      },
      {
        "Code": "SA1642",
        "Title": "Constructor summary documentation must begin with standard text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1642.md",
        "Category": "Documentation",
        "Description": "The XML documentation header for a C# constructor does not contain the appropriate summary text."
      },
      {
        "Code": "SA1643",
        "Title": "Destructor summary documentation must begin with standard text",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1643.md",
        "Category": "Documentation",
        "Description": "The Xml documentation header for a C# finalizer does not contain the appropriate summary text."
      },
      {
        "Code": "SA1644",
        "Title": "Documentation headers must not contain blank lines",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1644.md",
        "Category": "Documentation",
        "Description": "A section within the Xml documentation header for a C# element contains blank lines."
      },
      {
        "Code": "SA1645",
        "Title": "Included documentation file does not exist",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1645.md",
        "Category": "Documentation",
        "Description": "An included Xml documentation file does not exist."
      },
      {
        "Code": "SA1646",
        "Title": "Included documentation XPath does not exist",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1646.md",
        "Category": "Documentation",
        "Description": "An included Xml documentation link contains an invalid path."
      },
      {
        "Code": "SA1647",
        "Title": "Include node does not contain valid file and path",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1647.md",
        "Category": "Documentation",
        "Description": "An include tag within an Xml documentation header does not contain valid file and path attribute."
      },
      {
        "Code": "SA1648",
        "Title": "Inherit doc must be used with inheriting class",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1648.md",
        "Category": "Documentation",
        "Description": "&lt;inheritdoc&gt; has been used on an element that doesn't inherit from a base class or implement an interface."
      },
      {
        "Code": "SA1649",
        "Title": "File name must match type name",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1649.md",
        "Category": "Documentation",
        "Description": "The file name of a C# code file does not match the first type declared in the file."
      },
      {
        "Code": "SA1650",
        "Title": "Element documentation must be spelled correctly",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1650.md",
        "Category": "Documentation",
        "Description": "The element documentation for the element contains one or more spelling mistakes or unrecognized words."
      },
      {
        "Code": "SA1651",
        "Title": "Do not use placeholder elements",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1651.md",
        "Category": "Documentation",
        "Description": "The documentation for the element contains one or more &lt;placeholder&gt; elements."
      },
      {
        "Code": "SA1652",
        "Title": "Enable xml documentation output",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1652.md",
        "Category": "Documentation",
        "Description": "This rule was moved to SA0001"
      },
      {
        "Code": "SX1101",
        "Title": "Do not prefix local members with this",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SX1101.md",
        "Category": "Alternative",
        "Description": "A call to an instance member of the local class or a base class is prefixed with 'this.', within a C# code file."
      },
      {
        "Code": "SX1309",
        "Title": "Field names must begin with underscore",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SX1309.md",
        "Category": "Alternative",
        "Description": "A field name does not begin with an underscore."
      },
      {
        "Code": "SX1309S",
        "Title": "Static field names must begin with underscore",
        "Link": "https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SX1309S.md",
        "Category": "Alternative",
        "Description": "A static field name does not begin with an underscore."
      }
    ]
  },
  {
    "Name": "SonarAnalyzer.CSharp",
    "Rules": [
      {
        "Code": "S6096",
        "Title": "Extracting archives should not lead to zip slip vulnerabilities",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-6096",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5334",
        "Title": "Dynamic code execution should not be vulnerable to injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5334",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5146",
        "Title": "HTTP request redirections should not be open to forging attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5146",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5135",
        "Title": "Deserialization should not be vulnerable to injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5135",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5131",
        "Title": "Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5131",
        "Category": "Vulnerability"
      },
      {
        "Code": "S3884",
        "Title": "\"CoSetProxyBlanket\" and \"CoInitializeSecurity\" should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3884",
        "Category": "Vulnerability"
      },
      {
        "Code": "S3649",
        "Title": "Database queries should not be vulnerable to injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3649",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2755",
        "Title": "XML parsers should not be vulnerable to XXE attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2755",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2115",
        "Title": "A secure password should be used when connecting to a database",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2115",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2091",
        "Title": "XPath expressions should not be vulnerable to injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2091",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2083",
        "Title": "I/O function calls should not be vulnerable to path injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2083",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2078",
        "Title": "LDAP queries should not be vulnerable to injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2078",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2076",
        "Title": "OS commands should not be vulnerable to command injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2076",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4159",
        "Title": "Classes should implement their \"ExportAttribute\" interfaces",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4159",
        "Category": "Bug"
      },
      {
        "Code": "S3889",
        "Title": "Neither \"Thread.Resume\" nor \"Thread.Suspend\" should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3889",
        "Category": "Bug"
      },
      {
        "Code": "S3869",
        "Title": "\"SafeHandle.DangerousGetHandle\" should not be called",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3869",
        "Category": "Bug"
      },
      {
        "Code": "S3464",
        "Title": "Type inheritance should not be recursive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3464",
        "Category": "Bug"
      },
      {
        "Code": "S2930",
        "Title": "\"IDisposables\" should be disposed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2930",
        "Category": "Bug"
      },
      {
        "Code": "S2857",
        "Title": "SQL keywords should be delimited by whitespace",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2857",
        "Category": "Bug"
      },
      {
        "Code": "S2275",
        "Title": "Composite format strings should not lead to unexpected behavior at runtime",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2275",
        "Category": "Bug"
      },
      {
        "Code": "S2190",
        "Title": "Recursion should not be infinite",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2190",
        "Category": "Bug"
      },
      {
        "Code": "S1048",
        "Title": "Destructors should not throw exceptions",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1048",
        "Category": "Bug"
      },
      {
        "Code": "S2068",
        "Title": "Hard-coded credentials are security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2068",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S3877",
        "Title": "Exceptions should not be thrown from unexpected methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3877",
        "Category": "Code Smell"
      },
      {
        "Code": "S3875",
        "Title": "\"operator==\" should not be overloaded on reference types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3875",
        "Category": "Code Smell"
      },
      {
        "Code": "S3443",
        "Title": "Type should not be examined on \"System.Type\" instances",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3443",
        "Category": "Code Smell"
      },
      {
        "Code": "S3433",
        "Title": "Test method signatures should be correct",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3433",
        "Category": "Code Smell"
      },
      {
        "Code": "S3427",
        "Title": "Method overloads with default parameter values should not overlap ",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3427",
        "Category": "Code Smell"
      },
      {
        "Code": "S3237",
        "Title": "\"value\" parameters should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3237",
        "Category": "Code Smell"
      },
      {
        "Code": "S3060",
        "Title": "\"is\" should not be used with \"this\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3060",
        "Category": "Code Smell"
      },
      {
        "Code": "S2953",
        "Title": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2953",
        "Category": "Code Smell"
      },
      {
        "Code": "S2699",
        "Title": "Tests should include assertions",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2699",
        "Category": "Code Smell"
      },
      {
        "Code": "S2437",
        "Title": "Silly bit operations should not be performed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2437",
        "Category": "Code Smell"
      },
      {
        "Code": "S2368",
        "Title": "Public methods should not have multidimensional array parameters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2368",
        "Category": "Code Smell"
      },
      {
        "Code": "S2187",
        "Title": "TestCases should contain tests",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2187",
        "Category": "Code Smell"
      },
      {
        "Code": "S2178",
        "Title": "Short-circuit logic should be used in boolean contexts",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2178",
        "Category": "Code Smell"
      },
      {
        "Code": "S5659",
        "Title": "JWT should be signed and verified with strong cipher algorithms",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5659",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5547",
        "Title": "Cipher algorithms should be robust",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5547",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5542",
        "Title": "Encryption algorithms should be used with secure mode and padding scheme",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5542",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5445",
        "Title": "Insecure temporary file creation methods should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5445",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4830",
        "Title": "Server certificates should be verified during SSL/TLS connections",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4830",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4433",
        "Title": "LDAP connections should be authenticated",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4433",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4426",
        "Title": "Cryptographic keys should be robust",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4426",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4423",
        "Title": "Weak SSL/TLS protocols should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4423",
        "Category": "Vulnerability"
      },
      {
        "Code": "S3329",
        "Title": "Cipher Block Chaining IV's should be unpredictable",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3329",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2631",
        "Title": "Regular expressions should not be vulnerable to Denial of Service attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2631",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2053",
        "Title": "Hashes should include an unpredictable salt",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2053",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4586",
        "Title": "Non-async \"Task/Task&lt;T&gt;\" methods should not return null",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4586",
        "Category": "Bug"
      },
      {
        "Code": "S4583",
        "Title": "Calls to delegate's method \"BeginInvoke\" should be paired with calls to \"EndInvoke\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4583",
        "Category": "Bug"
      },
      {
        "Code": "S4277",
        "Title": "\"Shared\" parts should not be created with \"new\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4277",
        "Category": "Bug"
      },
      {
        "Code": "S4275",
        "Title": "Getters and setters should access the expected fields",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4275",
        "Category": "Bug"
      },
      {
        "Code": "S3449",
        "Title": "Right operands of shift operators should be integers",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3449",
        "Category": "Bug"
      },
      {
        "Code": "S2551",
        "Title": "Shared resources should not be used for locking",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2551",
        "Category": "Bug"
      },
      {
        "Code": "S5443",
        "Title": "Using publicly writable directories is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5443",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S5332",
        "Title": "Using clear-text protocols is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5332",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S5042",
        "Title": "Expanding archive files without controlling resource consumption is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5042",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4792",
        "Title": "Configuring loggers is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4792",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4790",
        "Title": "Using weak hashing algorithms is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4790",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4502",
        "Title": "Disabling CSRF protections is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4502",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S2257",
        "Title": "Using non-standard cryptographic algorithms is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2257",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S2245",
        "Title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2245",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S927",
        "Title": "Parameter names should match base declaration and other partial definitions",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-927",
        "Category": "Code Smell"
      },
      {
        "Code": "S5034",
        "Title": "\"ValueTask\" should be consumed correctly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5034",
        "Category": "Code Smell"
      },
      {
        "Code": "S4635",
        "Title": "String offset-based methods should be preferred for finding substrings from offsets",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4635",
        "Category": "Code Smell"
      },
      {
        "Code": "S4524",
        "Title": "\"default\" clauses should be first or last",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4524",
        "Category": "Code Smell"
      },
      {
        "Code": "S4487",
        "Title": "Unread \"private\" fields should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4487",
        "Category": "Code Smell"
      },
      {
        "Code": "S4019",
        "Title": "Base class methods should not be hidden",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4019",
        "Category": "Code Smell"
      },
      {
        "Code": "S4015",
        "Title": "Inherited member visibility should not be decreased",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4015",
        "Category": "Code Smell"
      },
      {
        "Code": "S3998",
        "Title": "Threads should not lock on objects with weak identity",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3998",
        "Category": "Code Smell"
      },
      {
        "Code": "S3973",
        "Title": "A conditionally executed single line should be denoted by indentation",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3973",
        "Category": "Code Smell"
      },
      {
        "Code": "S3972",
        "Title": "Conditionals should start on new lines",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3972",
        "Category": "Code Smell"
      },
      {
        "Code": "S3904",
        "Title": "Assemblies should have version information",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3904",
        "Category": "Code Smell"
      },
      {
        "Code": "S3871",
        "Title": "Exception types should be \"public\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3871",
        "Category": "Code Smell"
      },
      {
        "Code": "S3776",
        "Title": "Cognitive Complexity of methods should not be too high",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3776",
        "Category": "Code Smell"
      },
      {
        "Code": "S3600",
        "Title": "\"params\" should not be introduced on overrides",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3600",
        "Category": "Code Smell"
      },
      {
        "Code": "S3451",
        "Title": "\"[DefaultValue]\" should not be used when \"[DefaultParameterValue]\" is meant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3451",
        "Category": "Code Smell"
      },
      {
        "Code": "S3447",
        "Title": "\"[Optional]\" should not be used on \"ref\" or \"out\" parameters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3447",
        "Category": "Code Smell"
      },
      {
        "Code": "S3265",
        "Title": "Non-flags enums should not be used in bitwise operations",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3265",
        "Category": "Code Smell"
      },
      {
        "Code": "S3218",
        "Title": "Inner class members should not shadow outer class \"static\" or type members",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3218",
        "Category": "Code Smell"
      },
      {
        "Code": "S3217",
        "Title": "\"Explicit\" conversions of \"foreach\" loops should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3217",
        "Category": "Code Smell"
      },
      {
        "Code": "S2696",
        "Title": "Instance members should not write to \"static\" fields",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2696",
        "Category": "Code Smell"
      },
      {
        "Code": "S2692",
        "Title": "\"IndexOf\" checks should not be for positive numbers",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2692",
        "Category": "Code Smell"
      },
      {
        "Code": "S2479",
        "Title": "Whitespace and control characters in string literals should be explicit",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2479",
        "Category": "Code Smell"
      },
      {
        "Code": "S2365",
        "Title": "Properties should not make collection or array copies",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2365",
        "Category": "Code Smell"
      },
      {
        "Code": "S2346",
        "Title": "Flags enumerations zero-value members should be named \"None\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2346",
        "Category": "Code Smell"
      },
      {
        "Code": "S2291",
        "Title": "Overflow checking should not be disabled for \"Enumerable.Sum\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2291",
        "Category": "Code Smell"
      },
      {
        "Code": "S2290",
        "Title": "Field-like events should not be virtual",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2290",
        "Category": "Code Smell"
      },
      {
        "Code": "S2223",
        "Title": "Non-constant static fields should not be visible",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2223",
        "Category": "Code Smell"
      },
      {
        "Code": "S1944",
        "Title": "Inappropriate casts should not be made",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1944",
        "Category": "Code Smell"
      },
      {
        "Code": "S1699",
        "Title": "Constructors should only call non-overridable methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1699",
        "Category": "Code Smell"
      },
      {
        "Code": "S1215",
        "Title": "\"GC.Collect\" should not be called",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1215",
        "Category": "Code Smell"
      },
      {
        "Code": "S1186",
        "Title": "Methods should not be empty",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1186",
        "Category": "Code Smell"
      },
      {
        "Code": "S1163",
        "Title": "Exceptions should not be thrown in finally blocks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1163",
        "Category": "Code Smell"
      },
      {
        "Code": "S1006",
        "Title": "Method overrides should not change parameter defaults",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1006",
        "Category": "Code Smell"
      },
      {
        "Code": "S5773",
        "Title": "Types allowed to be deserialized should be restricted",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5773",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5144",
        "Title": "Server-side requests should not be vulnerable to forging attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5144",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4211",
        "Title": "Members should not have conflicting transparency annotations",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4211",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4428",
        "Title": "\"PartCreationPolicyAttribute\" should be used with \"ExportAttribute\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4428",
        "Category": "Bug"
      },
      {
        "Code": "S4260",
        "Title": "\"ConstructorArgument\" parameters should exist in constructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4260",
        "Category": "Bug"
      },
      {
        "Code": "S4210",
        "Title": "Windows Forms entry points should be marked with STAThread",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4210",
        "Category": "Bug"
      },
      {
        "Code": "S4143",
        "Title": "Collection elements should not be replaced unconditionally",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4143",
        "Category": "Bug"
      },
      {
        "Code": "S3984",
        "Title": "Exceptions should not be created without being thrown",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3984",
        "Category": "Bug"
      },
      {
        "Code": "S3981",
        "Title": "Collection sizes and array length comparisons should make sense",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3981",
        "Category": "Bug"
      },
      {
        "Code": "S3927",
        "Title": "Serialization event handlers should be implemented correctly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3927",
        "Category": "Bug"
      },
      {
        "Code": "S3926",
        "Title": "Deserialization methods should be provided for \"OptionalField\" members",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3926",
        "Category": "Bug"
      },
      {
        "Code": "S3923",
        "Title": "All branches in a conditional structure should not have exactly the same implementation",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3923",
        "Category": "Bug"
      },
      {
        "Code": "S3903",
        "Title": "Types should be defined in named namespaces",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3903",
        "Category": "Bug"
      },
      {
        "Code": "S3655",
        "Title": "Empty nullable value should not be accessed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3655",
        "Category": "Bug"
      },
      {
        "Code": "S3610",
        "Title": "Nullable type comparison should not be redundant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3610",
        "Category": "Bug"
      },
      {
        "Code": "S3603",
        "Title": "Methods with \"Pure\" attribute should return a value ",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3603",
        "Category": "Bug"
      },
      {
        "Code": "S3598",
        "Title": "One-way \"OperationContract\" methods should have \"void\" return type",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3598",
        "Category": "Bug"
      },
      {
        "Code": "S3466",
        "Title": "Optional parameters should be passed to \"base\" calls",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3466",
        "Category": "Bug"
      },
      {
        "Code": "S3453",
        "Title": "Classes should not have only \"private\" constructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3453",
        "Category": "Bug"
      },
      {
        "Code": "S3346",
        "Title": "Expressions used in \"Debug.Assert\" should not produce side effects",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3346",
        "Category": "Bug"
      },
      {
        "Code": "S3343",
        "Title": "Caller information parameters should come at the end of the parameter list",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3343",
        "Category": "Bug"
      },
      {
        "Code": "S3263",
        "Title": "Static fields should appear in the order they must be initialized ",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3263",
        "Category": "Bug"
      },
      {
        "Code": "S3249",
        "Title": "Classes directly extending \"object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3249",
        "Category": "Bug"
      },
      {
        "Code": "S3244",
        "Title": "Anonymous delegates should not be used to unsubscribe from Events",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3244",
        "Category": "Bug"
      },
      {
        "Code": "S3172",
        "Title": "Delegates should not be subtracted",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3172",
        "Category": "Bug"
      },
      {
        "Code": "S3168",
        "Title": "\"async\" methods should not return \"void\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3168",
        "Category": "Bug"
      },
      {
        "Code": "S3005",
        "Title": "\"ThreadStatic\" should not be used on non-static fields",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3005",
        "Category": "Bug"
      },
      {
        "Code": "S2997",
        "Title": "\"IDisposables\" created in a \"using\" statement should not be returned",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2997",
        "Category": "Bug"
      },
      {
        "Code": "S2996",
        "Title": "\"ThreadStatic\" fields should not be initialized",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2996",
        "Category": "Bug"
      },
      {
        "Code": "S2995",
        "Title": "\"Object.ReferenceEquals\" should not be used for value types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2995",
        "Category": "Bug"
      },
      {
        "Code": "S2761",
        "Title": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2761",
        "Category": "Bug"
      },
      {
        "Code": "S2757",
        "Title": "\"=+\" should not be used instead of \"+=\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2757",
        "Category": "Bug"
      },
      {
        "Code": "S2688",
        "Title": "\"NaN\" should not be used in comparisons",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2688",
        "Category": "Bug"
      },
      {
        "Code": "S2583",
        "Title": "Conditionally executed code should be reachable",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2583",
        "Category": "Bug"
      },
      {
        "Code": "S2259",
        "Title": "Null pointers should not be dereferenced",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2259",
        "Category": "Bug"
      },
      {
        "Code": "S2252",
        "Title": "For-loop conditions should be true at least once",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2252",
        "Category": "Bug"
      },
      {
        "Code": "S2251",
        "Title": "A \"for\" loop update clause should move the counter in the right direction",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2251",
        "Category": "Bug"
      },
      {
        "Code": "S2225",
        "Title": "\"ToString()\" method should not return null",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2225",
        "Category": "Bug"
      },
      {
        "Code": "S2201",
        "Title": "Return values from functions without side effects should not be ignored",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2201",
        "Category": "Bug"
      },
      {
        "Code": "S2123",
        "Title": "Values should not be uselessly incremented",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2123",
        "Category": "Bug"
      },
      {
        "Code": "S2114",
        "Title": "Collections should not be passed as arguments to their own methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2114",
        "Category": "Bug"
      },
      {
        "Code": "S1862",
        "Title": "Related \"if/else if\" statements should not have the same condition",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1862",
        "Category": "Bug"
      },
      {
        "Code": "S1848",
        "Title": "Objects should not be created to be dropped immediately without being used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1848",
        "Category": "Bug"
      },
      {
        "Code": "S1764",
        "Title": "Identical expressions should not be used on both sides of a binary operator",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1764",
        "Category": "Bug"
      },
      {
        "Code": "S1751",
        "Title": "Loops with at most one iteration should be refactored",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1751",
        "Category": "Bug"
      },
      {
        "Code": "S1656",
        "Title": "Variables should not be self-assigned",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1656",
        "Category": "Bug"
      },
      {
        "Code": "S5766",
        "Title": "Deserializing objects without performing data validation is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5766",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S5753",
        "Title": "Disabling ASP.NET \"Request Validation\" feature is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5753",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S5693",
        "Title": "Allowing requests with excessive content length is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5693",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S2612",
        "Title": "Setting loose file permissions is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2612",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S2077",
        "Title": "Formatting SQL queries is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2077",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S1313",
        "Title": "Using hardcoded IP addresses is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1313",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S907",
        "Title": "\"goto\" statement should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-907",
        "Category": "Code Smell"
      },
      {
        "Code": "S4581",
        "Title": "\"new Guid()\" should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4581",
        "Category": "Code Smell"
      },
      {
        "Code": "S4457",
        "Title": "Parameter validation in \"async\"/\"await\" methods should be wrapped",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4457",
        "Category": "Code Smell"
      },
      {
        "Code": "S4456",
        "Title": "Parameter validation in yielding methods should be wrapped",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4456",
        "Category": "Code Smell"
      },
      {
        "Code": "S4220",
        "Title": "Events should have proper arguments",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4220",
        "Category": "Code Smell"
      },
      {
        "Code": "S4214",
        "Title": "\"P/Invoke\" methods should not be visible",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4214",
        "Category": "Code Smell"
      },
      {
        "Code": "S4200",
        "Title": "Native methods should be wrapped",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4200",
        "Category": "Code Smell"
      },
      {
        "Code": "S4144",
        "Title": "Methods should not have identical implementations",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4144",
        "Category": "Code Smell"
      },
      {
        "Code": "S4070",
        "Title": "Non-flags enums should not be marked with \"FlagsAttribute\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4070",
        "Category": "Code Smell"
      },
      {
        "Code": "S4035",
        "Title": "Classes implementing \"IEquatable&lt;T&gt;\" should be sealed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4035",
        "Category": "Code Smell"
      },
      {
        "Code": "S3971",
        "Title": "\"GC.SuppressFinalize\" should not be called",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3971",
        "Category": "Code Smell"
      },
      {
        "Code": "S3966",
        "Title": "Objects should not be disposed more than once",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3966",
        "Category": "Code Smell"
      },
      {
        "Code": "S3928",
        "Title": "Parameter names used into ArgumentException constructors should match an existing one ",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3928",
        "Category": "Code Smell"
      },
      {
        "Code": "S3925",
        "Title": "\"ISerializable\" should be implemented correctly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3925",
        "Category": "Code Smell"
      },
      {
        "Code": "S3885",
        "Title": "\"Assembly.Load\" should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3885",
        "Category": "Code Smell"
      },
      {
        "Code": "S3881",
        "Title": "\"IDisposable\" should be implemented correctly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3881",
        "Category": "Code Smell"
      },
      {
        "Code": "S3597",
        "Title": "\"ServiceContract\" and \"OperationContract\" attributes should be used together",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3597",
        "Category": "Code Smell"
      },
      {
        "Code": "S3457",
        "Title": "Composite format strings should be used correctly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3457",
        "Category": "Code Smell"
      },
      {
        "Code": "S3445",
        "Title": "Exceptions should not be explicitly rethrown",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3445",
        "Category": "Code Smell"
      },
      {
        "Code": "S3442",
        "Title": "\"abstract\" classes should not have \"public\" constructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3442",
        "Category": "Code Smell"
      },
      {
        "Code": "S3415",
        "Title": "Assertion arguments should be passed in the correct order",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3415",
        "Category": "Code Smell"
      },
      {
        "Code": "S3358",
        "Title": "Ternary operators should not be nested",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3358",
        "Category": "Code Smell"
      },
      {
        "Code": "S3264",
        "Title": "Events should be invoked",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3264",
        "Category": "Code Smell"
      },
      {
        "Code": "S3262",
        "Title": "\"params\" should be used on overrides",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3262",
        "Category": "Code Smell"
      },
      {
        "Code": "S3246",
        "Title": "Generic type parameters should be co/contravariant when possible",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3246",
        "Category": "Code Smell"
      },
      {
        "Code": "S3169",
        "Title": "Multiple \"OrderBy\" calls should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3169",
        "Category": "Code Smell"
      },
      {
        "Code": "S3011",
        "Title": "Reflection should not be used to increase accessibility of classes, methods, or fields",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3011",
        "Category": "Code Smell"
      },
      {
        "Code": "S3010",
        "Title": "Static fields should not be updated in constructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3010",
        "Category": "Code Smell"
      },
      {
        "Code": "S2971",
        "Title": "\"IEnumerable\" LINQs should be simplified",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2971",
        "Category": "Code Smell"
      },
      {
        "Code": "S2933",
        "Title": "Fields that are only assigned in the constructor should be \"readonly\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2933",
        "Category": "Code Smell"
      },
      {
        "Code": "S2743",
        "Title": "Static fields should not be used in generic types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2743",
        "Category": "Code Smell"
      },
      {
        "Code": "S2681",
        "Title": "Multiline blocks should be enclosed in curly braces",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2681",
        "Category": "Code Smell"
      },
      {
        "Code": "S2589",
        "Title": "Boolean expressions should not be gratuitous",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2589",
        "Category": "Code Smell"
      },
      {
        "Code": "S2436",
        "Title": "Types and methods should not have too many generic parameters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2436",
        "Category": "Code Smell"
      },
      {
        "Code": "S2376",
        "Title": "Write-only properties should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2376",
        "Category": "Code Smell"
      },
      {
        "Code": "S2372",
        "Title": "Exceptions should not be thrown from property getters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2372",
        "Category": "Code Smell"
      },
      {
        "Code": "S2326",
        "Title": "Unused type parameters should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2326",
        "Category": "Code Smell"
      },
      {
        "Code": "S2234",
        "Title": "Parameters should be passed in the correct order",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2234",
        "Category": "Code Smell"
      },
      {
        "Code": "S1871",
        "Title": "Two branches in a conditional structure should not have exactly the same implementation",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1871",
        "Category": "Code Smell"
      },
      {
        "Code": "S1854",
        "Title": "Unused assignments should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1854",
        "Category": "Code Smell"
      },
      {
        "Code": "S1607",
        "Title": "Tests should not be ignored",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1607",
        "Category": "Code Smell"
      },
      {
        "Code": "S1479",
        "Title": "\"switch\" statements should not have too many \"case\" clauses",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1479",
        "Category": "Code Smell"
      },
      {
        "Code": "S125",
        "Title": "Sections of code should not be commented out",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-125",
        "Category": "Code Smell"
      },
      {
        "Code": "S1172",
        "Title": "Unused method parameters should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1172",
        "Category": "Code Smell"
      },
      {
        "Code": "S1168",
        "Title": "Empty arrays and collections should be returned instead of null",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1168",
        "Category": "Code Smell"
      },
      {
        "Code": "S1144",
        "Title": "Unused private types or members should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1144",
        "Category": "Code Smell"
      },
      {
        "Code": "S1134",
        "Title": "Track uses of \"FIXME\" tags",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1134",
        "Category": "Code Smell"
      },
      {
        "Code": "S1123",
        "Title": "\"Obsolete\" attributes should include explanations",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1123",
        "Category": "Code Smell"
      },
      {
        "Code": "S1121",
        "Title": "Assignments should not be made from within sub-expressions",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1121",
        "Category": "Code Smell"
      },
      {
        "Code": "S112",
        "Title": "General exceptions should never be thrown",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-112",
        "Category": "Code Smell"
      },
      {
        "Code": "S1118",
        "Title": "Utility classes should not have public constructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1118",
        "Category": "Code Smell"
      },
      {
        "Code": "S1117",
        "Title": "Local variables should not shadow class fields",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1117",
        "Category": "Code Smell"
      },
      {
        "Code": "S1110",
        "Title": "Redundant pairs of parentheses should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1110",
        "Category": "Code Smell"
      },
      {
        "Code": "S110",
        "Title": "Inheritance tree of classes should not be too deep",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-110",
        "Category": "Code Smell"
      },
      {
        "Code": "S108",
        "Title": "Nested blocks of code should not be left empty",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-108",
        "Category": "Code Smell"
      },
      {
        "Code": "S107",
        "Title": "Methods should not have too many parameters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-107",
        "Category": "Code Smell"
      },
      {
        "Code": "S1066",
        "Title": "Collapsible \"if\" statements should be merged",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1066",
        "Category": "Code Smell"
      },
      {
        "Code": "S5167",
        "Title": "HTTP response headers should not be vulnerable to injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5167",
        "Category": "Vulnerability"
      },
      {
        "Code": "S5145",
        "Title": "Logging should not be vulnerable to injection attacks",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5145",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4158",
        "Title": "Empty collections should not be accessed or iterated",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4158",
        "Category": "Bug"
      },
      {
        "Code": "S3887",
        "Title": "Mutable, non-private fields should not be \"readonly\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3887",
        "Category": "Bug"
      },
      {
        "Code": "S3456",
        "Title": "\"string.ToCharArray()\" should not be called redundantly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3456",
        "Category": "Bug"
      },
      {
        "Code": "S3397",
        "Title": "\"base.Equals\" should not be used to check for reference equality in \"Equals\" if \"base\" is not \"object\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3397",
        "Category": "Bug"
      },
      {
        "Code": "S2934",
        "Title": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2934",
        "Category": "Bug"
      },
      {
        "Code": "S2345",
        "Title": "Flags enumerations should explicitly initialize all their members",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2345",
        "Category": "Bug"
      },
      {
        "Code": "S2328",
        "Title": "\"GetHashCode\" should not reference mutable fields",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2328",
        "Category": "Bug"
      },
      {
        "Code": "S2184",
        "Title": "Results of integer division should not be assigned to floating point variables",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2184",
        "Category": "Bug"
      },
      {
        "Code": "S2183",
        "Title": "Integral numbers should not be shifted by zero or more than their number of bits-1",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2183",
        "Category": "Bug"
      },
      {
        "Code": "S1206",
        "Title": "\"Equals(Object)\" and \"GetHashCode()\" should be overridden in pairs",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1206",
        "Category": "Bug"
      },
      {
        "Code": "S5122",
        "Title": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-5122",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4507",
        "Title": "Delivering code in production with debug features activated is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4507",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4036",
        "Title": "Searching OS commands in PATH is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4036",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S3330",
        "Title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3330",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S2092",
        "Title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2092",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S818",
        "Title": "Literal suffixes should be upper case",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-818",
        "Category": "Code Smell"
      },
      {
        "Code": "S4201",
        "Title": "Null checks should not be used with \"is\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4201",
        "Category": "Code Smell"
      },
      {
        "Code": "S4136",
        "Title": "Method overloads should be grouped together",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4136",
        "Category": "Code Smell"
      },
      {
        "Code": "S3963",
        "Title": "\"static\" fields should be initialized inline",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3963",
        "Category": "Code Smell"
      },
      {
        "Code": "S3897",
        "Title": "Classes that provide \"Equals(&lt;T&gt;)\" should implement \"IEquatable&lt;T&gt;\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3897",
        "Category": "Code Smell"
      },
      {
        "Code": "S3626",
        "Title": "Jump statements should not be redundant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3626",
        "Category": "Code Smell"
      },
      {
        "Code": "S3604",
        "Title": "Member initializer values should not be redundant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3604",
        "Category": "Code Smell"
      },
      {
        "Code": "S3459",
        "Title": "Unassigned members should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3459",
        "Category": "Code Smell"
      },
      {
        "Code": "S3458",
        "Title": "Empty \"case\" clauses that fall through to the \"default\" should be omitted",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3458",
        "Category": "Code Smell"
      },
      {
        "Code": "S3450",
        "Title": "Parameters with \"[DefaultParameterValue]\" attributes should also be marked \"[Optional]\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3450",
        "Category": "Code Smell"
      },
      {
        "Code": "S3444",
        "Title": "Interfaces should not simply inherit from base interfaces with colliding members",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3444",
        "Category": "Code Smell"
      },
      {
        "Code": "S3440",
        "Title": "Variables should not be checked against the values they're about to be assigned",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3440",
        "Category": "Code Smell"
      },
      {
        "Code": "S3400",
        "Title": "Methods should not return constants",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3400",
        "Category": "Code Smell"
      },
      {
        "Code": "S3376",
        "Title": "Attribute, EventArgs, and Exception type names should end with the type being extended",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3376",
        "Category": "Code Smell"
      },
      {
        "Code": "S3261",
        "Title": "Namespaces should not be empty",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3261",
        "Category": "Code Smell"
      },
      {
        "Code": "S3256",
        "Title": "\"string.IsNullOrEmpty\" should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3256",
        "Category": "Code Smell"
      },
      {
        "Code": "S3251",
        "Title": "Implementations should be provided for \"partial\" methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3251",
        "Category": "Code Smell"
      },
      {
        "Code": "S3247",
        "Title": "Duplicate casts should not be made",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3247",
        "Category": "Code Smell"
      },
      {
        "Code": "S3241",
        "Title": "Methods should not return values that are never used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3241",
        "Category": "Code Smell"
      },
      {
        "Code": "S3236",
        "Title": "Caller information arguments should not be provided explicitly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3236",
        "Category": "Code Smell"
      },
      {
        "Code": "S3220",
        "Title": "Method calls should not resolve ambiguously to overloads with \"params\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3220",
        "Category": "Code Smell"
      },
      {
        "Code": "S2737",
        "Title": "\"catch\" clauses should do more than rethrow",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2737",
        "Category": "Code Smell"
      },
      {
        "Code": "S2486",
        "Title": "Generic exceptions should not be ignored",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2486",
        "Category": "Code Smell"
      },
      {
        "Code": "S2386",
        "Title": "Mutable fields should not be \"public static\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2386",
        "Category": "Code Smell"
      },
      {
        "Code": "S2344",
        "Title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2344",
        "Category": "Code Smell"
      },
      {
        "Code": "S2342",
        "Title": "Enumeration types should comply with a naming convention",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2342",
        "Category": "Code Smell"
      },
      {
        "Code": "S2292",
        "Title": "Trivial properties should be auto-implemented",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2292",
        "Category": "Code Smell"
      },
      {
        "Code": "S2219",
        "Title": "Runtime type checking should be simplified",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2219",
        "Category": "Code Smell"
      },
      {
        "Code": "S1940",
        "Title": "Boolean checks should not be inverted",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1940",
        "Category": "Code Smell"
      },
      {
        "Code": "S1939",
        "Title": "Inheritance list should not be redundant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1939",
        "Category": "Code Smell"
      },
      {
        "Code": "S1905",
        "Title": "Redundant casts should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1905",
        "Category": "Code Smell"
      },
      {
        "Code": "S1643",
        "Title": "Strings should not be concatenated using '+' in a loop",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1643",
        "Category": "Code Smell"
      },
      {
        "Code": "S1481",
        "Title": "Unused local variables should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1481",
        "Category": "Code Smell"
      },
      {
        "Code": "S1450",
        "Title": "Private fields only used as local variables in methods should become local variables",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1450",
        "Category": "Code Smell"
      },
      {
        "Code": "S1264",
        "Title": "A \"while\" loop should be used instead of a \"for\" loop",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1264",
        "Category": "Code Smell"
      },
      {
        "Code": "S1210",
        "Title": "\"Equals\" and the comparison operators should be overridden when implementing \"IComparable\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1210",
        "Category": "Code Smell"
      },
      {
        "Code": "S1199",
        "Title": "Nested code blocks should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1199",
        "Category": "Code Smell"
      },
      {
        "Code": "S1185",
        "Title": "Overriding members should do more than simply call the same member in the base class",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1185",
        "Category": "Code Smell"
      },
      {
        "Code": "S1155",
        "Title": "\"Any()\" should be used to test for emptiness",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1155",
        "Category": "Code Smell"
      },
      {
        "Code": "S1125",
        "Title": "Boolean literals should not be redundant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1125",
        "Category": "Code Smell"
      },
      {
        "Code": "S1116",
        "Title": "Empty statements should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1116",
        "Category": "Code Smell"
      },
      {
        "Code": "S1104",
        "Title": "Fields should not have public accessibility",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1104",
        "Category": "Code Smell"
      },
      {
        "Code": "S1075",
        "Title": "URIs should not be hardcoded",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1075",
        "Category": "Code Smell"
      },
      {
        "Code": "S101",
        "Title": "Types should be named in PascalCase",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-101",
        "Category": "Code Smell"
      },
      {
        "Code": "S1135",
        "Title": "Track uses of \"TODO\" tags",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1135",
        "Category": "Code Smell"
      },
      {
        "Code": "S2278",
        "Title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2278",
        "Category": "Vulnerability"
      },
      {
        "Code": "S3693",
        "Title": "Exception constructors should not throw exceptions",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3693",
        "Category": "Bug"
      },
      {
        "Code": "S2931",
        "Title": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2931",
        "Category": "Bug"
      },
      {
        "Code": "S4462",
        "Title": "Calls to \"async\" methods should not be blocking",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4462",
        "Category": "Code Smell"
      },
      {
        "Code": "S2387",
        "Title": "Child class fields should not shadow parent class fields",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2387",
        "Category": "Code Smell"
      },
      {
        "Code": "S2306",
        "Title": "\"async\" and \"await\" should not be used as identifiers",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2306",
        "Category": "Code Smell"
      },
      {
        "Code": "S1451",
        "Title": "Track lack of copyright and license headers",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1451",
        "Category": "Code Smell"
      },
      {
        "Code": "S1147",
        "Title": "Exit methods should not be called",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1147",
        "Category": "Code Smell"
      },
      {
        "Code": "S4432",
        "Title": "AES encryption algorithm should be used with secured mode",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4432",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2070",
        "Title": "SHA-1 and Message-Digest hash algorithms should not be used in secure contexts",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2070",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2952",
        "Title": "Classes should \"Dispose\" of members from the classes' own \"Dispose\" methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2952",
        "Category": "Bug"
      },
      {
        "Code": "S4829",
        "Title": "Reading the Standard Input is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4829",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4823",
        "Title": "Using command line arguments is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4823",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4818",
        "Title": "Using Sockets is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4818",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4787",
        "Title": "Encrypting data is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4787",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4784",
        "Title": "Using regular expressions is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4784",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4039",
        "Title": "Interface methods should be callable by derived types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4039",
        "Category": "Code Smell"
      },
      {
        "Code": "S4025",
        "Title": "Child class fields should not differ from parent class fields only by capitalization",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4025",
        "Category": "Code Smell"
      },
      {
        "Code": "S4000",
        "Title": "Pointers to unmanaged memory should not be visible",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4000",
        "Category": "Code Smell"
      },
      {
        "Code": "S3937",
        "Title": "Number patterns should be regular",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3937",
        "Category": "Code Smell"
      },
      {
        "Code": "S3874",
        "Title": "\"out\" and \"ref\" parameters should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3874",
        "Category": "Code Smell"
      },
      {
        "Code": "S3353",
        "Title": "Unchanged local variables should be \"const\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3353",
        "Category": "Code Smell"
      },
      {
        "Code": "S3216",
        "Title": "\"ConfigureAwait(false)\" should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3216",
        "Category": "Code Smell"
      },
      {
        "Code": "S3215",
        "Title": "\"interface\" instances should not be cast to concrete types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3215",
        "Category": "Code Smell"
      },
      {
        "Code": "S2701",
        "Title": "Literal boolean values should not be used in assertions",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2701",
        "Category": "Code Smell"
      },
      {
        "Code": "S2360",
        "Title": "Optional parameters should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2360",
        "Category": "Code Smell"
      },
      {
        "Code": "S2339",
        "Title": "Public constant members should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2339",
        "Category": "Code Smell"
      },
      {
        "Code": "S2330",
        "Title": "Array covariance should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2330",
        "Category": "Code Smell"
      },
      {
        "Code": "S2302",
        "Title": "\"nameof\" should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2302",
        "Category": "Code Smell"
      },
      {
        "Code": "S2197",
        "Title": "Modulus results should not be checked for direct equality",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2197",
        "Category": "Code Smell"
      },
      {
        "Code": "S1994",
        "Title": "\"for\" loop increment clauses should modify the loops' counters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1994",
        "Category": "Code Smell"
      },
      {
        "Code": "S1821",
        "Title": "\"switch\" statements should not be nested",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1821",
        "Category": "Code Smell"
      },
      {
        "Code": "S1541",
        "Title": "Methods and properties should not be too complex",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1541",
        "Category": "Code Smell"
      },
      {
        "Code": "S134",
        "Title": "Control flow statements \"if\", \"switch\", \"for\", \"foreach\", \"while\", \"do\"  and \"try\" should not be nested too deeply",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-134",
        "Category": "Code Smell"
      },
      {
        "Code": "S131",
        "Title": "\"switch/Select\" statements should contain a \"default/Case Else\" clauses",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-131",
        "Category": "Code Smell"
      },
      {
        "Code": "S126",
        "Title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-126",
        "Category": "Code Smell"
      },
      {
        "Code": "S121",
        "Title": "Control structures should use curly braces",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-121",
        "Category": "Code Smell"
      },
      {
        "Code": "S1067",
        "Title": "Expressions should not be too complex",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1067",
        "Category": "Code Smell"
      },
      {
        "Code": "S4564",
        "Title": "ASP.NET HTTP request validation feature should not be disabled",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4564",
        "Category": "Vulnerability"
      },
      {
        "Code": "S4212",
        "Title": "Serialization constructors should be secured",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4212",
        "Category": "Vulnerability"
      },
      {
        "Code": "S3949",
        "Title": "Calculations should not overflow",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3949",
        "Category": "Bug"
      },
      {
        "Code": "S2758",
        "Title": "The ternary operator should not return the same value regardless of the condition",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2758",
        "Category": "Bug"
      },
      {
        "Code": "S1697",
        "Title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1697",
        "Category": "Bug"
      },
      {
        "Code": "S1244",
        "Title": "Floating point numbers should not be tested for equality",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1244",
        "Category": "Bug"
      },
      {
        "Code": "S1145",
        "Title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1145",
        "Category": "Bug"
      },
      {
        "Code": "S881",
        "Title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-881",
        "Category": "Code Smell"
      },
      {
        "Code": "S4142",
        "Title": "Duplicate values should not be passed as arguments",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4142",
        "Category": "Code Smell"
      },
      {
        "Code": "S4059",
        "Title": "Property names should not match get methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4059",
        "Category": "Code Smell"
      },
      {
        "Code": "S4057",
        "Title": "Locales should be set for data types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4057",
        "Category": "Code Smell"
      },
      {
        "Code": "S4055",
        "Title": "Literals should not be passed as localized parameters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4055",
        "Category": "Code Smell"
      },
      {
        "Code": "S4050",
        "Title": "Operators should be overloaded consistently",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4050",
        "Category": "Code Smell"
      },
      {
        "Code": "S4017",
        "Title": "Method signatures should not contain nested generic types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4017",
        "Category": "Code Smell"
      },
      {
        "Code": "S4016",
        "Title": "Enumeration members should not be named \"Reserved\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4016",
        "Category": "Code Smell"
      },
      {
        "Code": "S4005",
        "Title": "\"System.Uri\" arguments should be used instead of strings",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4005",
        "Category": "Code Smell"
      },
      {
        "Code": "S4004",
        "Title": "Collection properties should be readonly",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4004",
        "Category": "Code Smell"
      },
      {
        "Code": "S4002",
        "Title": "Disposable types should declare finalizers",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4002",
        "Category": "Code Smell"
      },
      {
        "Code": "S3997",
        "Title": "String URI overloads should call \"System.Uri\" overloads",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3997",
        "Category": "Code Smell"
      },
      {
        "Code": "S3996",
        "Title": "URI properties should not be strings",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3996",
        "Category": "Code Smell"
      },
      {
        "Code": "S3995",
        "Title": "URI return values should not be strings",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3995",
        "Category": "Code Smell"
      },
      {
        "Code": "S3994",
        "Title": "URI Parameters should not be strings",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3994",
        "Category": "Code Smell"
      },
      {
        "Code": "S3993",
        "Title": "Custom attributes should be marked with \"System.AttributeUsageAttribute\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3993",
        "Category": "Code Smell"
      },
      {
        "Code": "S3992",
        "Title": "Assemblies should explicitly specify COM visibility",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3992",
        "Category": "Code Smell"
      },
      {
        "Code": "S3990",
        "Title": "Assemblies should be marked as CLS compliant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3990",
        "Category": "Code Smell"
      },
      {
        "Code": "S3956",
        "Title": "\"Generic.List\" instances should not be part of public APIs",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3956",
        "Category": "Code Smell"
      },
      {
        "Code": "S3909",
        "Title": "Collections should implement the generic interface",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3909",
        "Category": "Code Smell"
      },
      {
        "Code": "S3908",
        "Title": "Generic event handlers should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3908",
        "Category": "Code Smell"
      },
      {
        "Code": "S3906",
        "Title": "Event Handlers should have the correct signature",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3906",
        "Category": "Code Smell"
      },
      {
        "Code": "S3902",
        "Title": "\"Assembly.GetExecutingAssembly\" should not be called",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3902",
        "Category": "Code Smell"
      },
      {
        "Code": "S3900",
        "Title": "Arguments of public methods should be validated against null",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3900",
        "Category": "Code Smell"
      },
      {
        "Code": "S3898",
        "Title": "Value types should implement \"IEquatable&lt;T&gt;\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3898",
        "Category": "Code Smell"
      },
      {
        "Code": "S3880",
        "Title": "Finalizers should not be empty",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3880",
        "Category": "Code Smell"
      },
      {
        "Code": "S3431",
        "Title": "\"[ExpectedException]\" should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3431",
        "Category": "Code Smell"
      },
      {
        "Code": "S3366",
        "Title": "\"this\" should not be exposed from constructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3366",
        "Category": "Code Smell"
      },
      {
        "Code": "S2357",
        "Title": "Fields should be private",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2357",
        "Category": "Code Smell"
      },
      {
        "Code": "S2327",
        "Title": "\"try\" statements with identical \"catch\" and/or \"finally\" blocks should be merged",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2327",
        "Category": "Code Smell"
      },
      {
        "Code": "S1696",
        "Title": "NullReferenceException should not be caught",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1696",
        "Category": "Code Smell"
      },
      {
        "Code": "S138",
        "Title": "Functions should not have too many lines of code",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-138",
        "Category": "Code Smell"
      },
      {
        "Code": "S127",
        "Title": "\"for\" loop stop conditions should be invariant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-127",
        "Category": "Code Smell"
      },
      {
        "Code": "S122",
        "Title": "Statements should be on separate lines",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-122",
        "Category": "Code Smell"
      },
      {
        "Code": "S1200",
        "Title": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1200",
        "Category": "Code Smell"
      },
      {
        "Code": "S1151",
        "Title": "\"switch case\" clauses should not have too many lines of code",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1151",
        "Category": "Code Smell"
      },
      {
        "Code": "S109",
        "Title": "Magic numbers should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-109",
        "Category": "Code Smell"
      },
      {
        "Code": "S106",
        "Title": "Standard outputs should not be used directly to log anything",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-106",
        "Category": "Code Smell"
      },
      {
        "Code": "S104",
        "Title": "Files should not have too many lines of code",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-104",
        "Category": "Code Smell"
      },
      {
        "Code": "S103",
        "Title": "Lines should not be too long",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-103",
        "Category": "Code Smell"
      },
      {
        "Code": "S2228",
        "Title": "Console logging should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2228",
        "Category": "Vulnerability"
      },
      {
        "Code": "S2955",
        "Title": "Generic parameters not constrained to reference types should not be compared to \"null\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2955",
        "Category": "Bug"
      },
      {
        "Code": "S2674",
        "Title": "The length returned from a stream read should be checked",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2674",
        "Category": "Bug"
      },
      {
        "Code": "S1226",
        "Title": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1226",
        "Category": "Bug"
      },
      {
        "Code": "S4834",
        "Title": "Controlling permissions is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4834",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S2255",
        "Title": "Writing cookies is security-sensitive",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2255",
        "Category": "Security Hotspot"
      },
      {
        "Code": "S4261",
        "Title": "Methods should be named according to their synchronicities",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4261",
        "Category": "Code Smell"
      },
      {
        "Code": "S4226",
        "Title": "Extensions should be in separate namespaces",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4226",
        "Category": "Code Smell"
      },
      {
        "Code": "S4225",
        "Title": "Extension methods should not extend \"object\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4225",
        "Category": "Code Smell"
      },
      {
        "Code": "S4069",
        "Title": "Operator overloads should have named alternatives",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4069",
        "Category": "Code Smell"
      },
      {
        "Code": "S4061",
        "Title": "\"params\" should be used instead of \"varargs\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4061",
        "Category": "Code Smell"
      },
      {
        "Code": "S4060",
        "Title": "Non-abstract attributes should be sealed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4060",
        "Category": "Code Smell"
      },
      {
        "Code": "S4058",
        "Title": "Overloads with a \"StringComparison\" parameter should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4058",
        "Category": "Code Smell"
      },
      {
        "Code": "S4056",
        "Title": "Overloads with a \"CultureInfo\" or an \"IFormatProvider\" parameter should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4056",
        "Category": "Code Smell"
      },
      {
        "Code": "S4052",
        "Title": "Types should not extend outdated base types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4052",
        "Category": "Code Smell"
      },
      {
        "Code": "S4049",
        "Title": "Properties should be preferred",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4049",
        "Category": "Code Smell"
      },
      {
        "Code": "S4047",
        "Title": "Generics should be used when appropriate",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4047",
        "Category": "Code Smell"
      },
      {
        "Code": "S4041",
        "Title": "Type names should not match namespaces",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4041",
        "Category": "Code Smell"
      },
      {
        "Code": "S4040",
        "Title": "Strings should be normalized to uppercase",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4040",
        "Category": "Code Smell"
      },
      {
        "Code": "S4027",
        "Title": "Exceptions should provide standard constructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4027",
        "Category": "Code Smell"
      },
      {
        "Code": "S4026",
        "Title": "Assemblies should be marked with \"NeutralResourcesLanguageAttribute\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4026",
        "Category": "Code Smell"
      },
      {
        "Code": "S4023",
        "Title": "Interfaces should not be empty",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4023",
        "Category": "Code Smell"
      },
      {
        "Code": "S4022",
        "Title": "Enumerations should have \"Int32\" storage",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4022",
        "Category": "Code Smell"
      },
      {
        "Code": "S4018",
        "Title": "Generic methods should provide type parameters",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-4018",
        "Category": "Code Smell"
      },
      {
        "Code": "S3967",
        "Title": "Multidimensional arrays should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3967",
        "Category": "Code Smell"
      },
      {
        "Code": "S3962",
        "Title": "\"static readonly\" constants should be \"const\" instead",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3962",
        "Category": "Code Smell"
      },
      {
        "Code": "S3876",
        "Title": "Strings or integral types should be used for indexers",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3876",
        "Category": "Code Smell"
      },
      {
        "Code": "S3872",
        "Title": "Parameter names should not duplicate the names of their methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3872",
        "Category": "Code Smell"
      },
      {
        "Code": "S3717",
        "Title": "Track use of \"NotImplementedException\"",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3717",
        "Category": "Code Smell"
      },
      {
        "Code": "S3532",
        "Title": "Empty \"default\" clauses should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3532",
        "Category": "Code Smell"
      },
      {
        "Code": "S3441",
        "Title": "Redundant property names should be omitted in anonymous classes",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3441",
        "Category": "Code Smell"
      },
      {
        "Code": "S3257",
        "Title": "Declarations and initializations should be as concise as possible",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3257",
        "Category": "Code Smell"
      },
      {
        "Code": "S3254",
        "Title": "Default parameter values should not be passed as arguments",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3254",
        "Category": "Code Smell"
      },
      {
        "Code": "S3253",
        "Title": "Constructor and destructor declarations should not be redundant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3253",
        "Category": "Code Smell"
      },
      {
        "Code": "S3242",
        "Title": "Method parameters should be declared with base types",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3242",
        "Category": "Code Smell"
      },
      {
        "Code": "S3240",
        "Title": "The simplest possible condition syntax should be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3240",
        "Category": "Code Smell"
      },
      {
        "Code": "S3235",
        "Title": "Redundant parentheses should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3235",
        "Category": "Code Smell"
      },
      {
        "Code": "S3234",
        "Title": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3234",
        "Category": "Code Smell"
      },
      {
        "Code": "S3052",
        "Title": "Members should not be initialized to default values",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-3052",
        "Category": "Code Smell"
      },
      {
        "Code": "S2760",
        "Title": "Sequential tests should not check the same condition",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2760",
        "Category": "Code Smell"
      },
      {
        "Code": "S2333",
        "Title": "Redundant modifiers should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2333",
        "Category": "Code Smell"
      },
      {
        "Code": "S2325",
        "Title": "Methods and properties that don't access instance data should be static",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2325",
        "Category": "Code Smell"
      },
      {
        "Code": "S2221",
        "Title": "\"Exception\" should not be caught when not required by called methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2221",
        "Category": "Code Smell"
      },
      {
        "Code": "S2156",
        "Title": "\"sealed\" classes should not have \"protected\" members",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2156",
        "Category": "Code Smell"
      },
      {
        "Code": "S2148",
        "Title": "Underscores should be used to make large numbers readable",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-2148",
        "Category": "Code Smell"
      },
      {
        "Code": "S1858",
        "Title": "\"ToString()\" calls should not be redundant",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1858",
        "Category": "Code Smell"
      },
      {
        "Code": "S1698",
        "Title": "\"==\" should not be used when \"Equals\" is overridden",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1698",
        "Category": "Code Smell"
      },
      {
        "Code": "S1694",
        "Title": "An abstract class should have both abstract and concrete methods",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1694",
        "Category": "Code Smell"
      },
      {
        "Code": "S1659",
        "Title": "Multiple variables should not be declared on the same line",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1659",
        "Category": "Code Smell"
      },
      {
        "Code": "S1449",
        "Title": "Culture should be specified for \"string\" operations",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1449",
        "Category": "Code Smell"
      },
      {
        "Code": "S1301",
        "Title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1301",
        "Category": "Code Smell"
      },
      {
        "Code": "S1227",
        "Title": "break statements should not be used except for switch cases",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1227",
        "Category": "Code Smell"
      },
      {
        "Code": "S1192",
        "Title": "String literals should not be duplicated",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1192",
        "Category": "Code Smell"
      },
      {
        "Code": "S113",
        "Title": "Files should contain an empty newline at the end",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-113",
        "Category": "Code Smell"
      },
      {
        "Code": "S1128",
        "Title": "Unused \"using\" should be removed",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1128",
        "Category": "Code Smell"
      },
      {
        "Code": "S1109",
        "Title": "A close curly brace should be located at the beginning of a line",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1109",
        "Category": "Code Smell"
      },
      {
        "Code": "S105",
        "Title": "Tabulation characters should not be used",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-105",
        "Category": "Code Smell"
      },
      {
        "Code": "S100",
        "Title": "Methods and properties should be named in PascalCase",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-100",
        "Category": "Code Smell"
      },
      {
        "Code": "S1309",
        "Title": "Track uses of in-source issue suppressions",
        "Link": "https://rules.sonarsource.com/csharp/RSPEC-1309",
        "Category": "Code Smell"
      }
    ]
  }
]